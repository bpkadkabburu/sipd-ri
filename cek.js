// let q = atob(atob("ZXlKMGIydGxiaUk2SWxVeFFtSlNNMGszZGxGMlJsSlFTaUlzSW1sa1gyUmhaWEpoYUNJNk16ZzRMQ0owWVdoMWJpSTZNakF5TkN3aWFXUmZZWEJ3SWpvME9EQTNNeXdpYVhOZllYQndJam94TENKelpXTnlaWFJmYTJWNUlqb2lXbGhzUzJWdFJsaFZhbEpLWVcwNWNGWnJXbUZWTWs1MFZWaGtUMWRGV2xSV2ExSkNUMVZzY0dReWJHcE5iWGh5V1d0T1NrNXJiSE5WYms1VFZrZDRVbFpXVVhkUFZXeHdaREpzYWsxdGVISlhhMDVLVG10c2MxVnNiR3BTZWxaUVZWWlJkMDlWYkhCa01teG9WakZLY2xOWGNIWmhWbHBIWVVoa2FXRjZWa05WUmxGM1lWZGFVbEJVTUQwaUxDSnpaV04xY21sMGVWOXJaWGtpT2lJek9EaDhNakF5Tkh4TlZGazFUVlJCTTA1RVVUTk5kejA5ZkVVMlpGUjFOMDlrZWtoOE56QXpNekFpZlE9PQ=="))
// console.log(q)
// let ee = atob(atob("ZXlKemFXUjRJam9pVkZaU2NtUXdOWEZTVkRBOUlpd2ljMmxrYkNJNklsUnNSVGxRVVQwOUlpd2ljMmxrWkNJNklsUlljRzVPUVQwOUlpd2lhV1JrSWpvaVZGaHdiazVCUFQwaWZRPT0="))
// let eej = JSON.parse(ee)
// console.log(ee)
// console.log(atob(atob(eej.sidx)))
// console.log(atob(atob(eej.sidl)))
// console.log(atob(atob(eej.sidd)))
// console.log(atob(atob(eej.idd)))
function decrip(t) {
    let e = atob(t),
        n = e.length - 1,
        s = "";
    for (; n >= 0; ) (s += e.charAt(n)), n--;
    let o = atob(s),
        l = o.length - 1,
        _ = "";
    for (; l >= 0; ) (_ += o.charAt(l)), l--;
    return JSON.parse(_);
}

function calculateSum(array, property) {
  const total = array.reduce((accumulator, object) => {
    return accumulator + object[property];
  }, 0);

  return total;
}

let aa = decrip("")
console.log(calculateSum(aa, 'pagu'))