(self.webpackChunkdemo1 = self.webpackChunkdemo1 || []).push([
    [7154],
    {
        96288: (Ct, mt, h) => {
            "use strict";
            h.d(mt, { Pb: () => W });
            var K = h(92340),
                it = h(61135),
                F = h(68624);
            const _ = {
                main: { componentName: "main", type: "default", primaryColor: "#009EF7", darkSkinEnabled: !0 },
                loader: { componentName: "loader", display: !0, type: "default" },
                scrolltop: { componentName: "scroll-top", display: !0 },
                header: { componentName: "header", display: !0, width: "fluid", left: "menu", fixed: { desktop: !0, tabletAndMobile: !0 }, menuIcon: "svg" },
                megaMenu: { componentName: "mega-menu", display: !0 },
                aside: { componentName: "aside", display: !0, theme: "dark", menu: "main", fixed: !0, minimized: !1, minimize: !0, hoverable: !0, menuIcon: "svg" },
                content: { componentName: "content", width: "fixed", layout: "default" },
                toolbar: {
                    componentName: "toolbar",
                    display: !0,
                    width: "fluid",
                    fixed: { desktop: !0, tabletAndMobileMode: !0 },
                    layout: "toolbar1",
                    layouts: {
                        toolbar1: { height: "55px", heightAndTabletMobileMode: "55px" },
                        toolbar2: { height: "75px", heightAndTabletMobileMode: "65px" },
                        toolbar3: { height: "55px", heightAndTabletMobileMode: "55px" },
                        toolbar4: { height: "65px", heightAndTabletMobileMode: "65px" },
                        toolbar5: { height: "75px", heightAndTabletMobileMode: "65px" },
                    },
                },
                footer: { componentName: "footer", width: "fluid" },
                pageTitle: { componentName: "page-title", display: !0, breadCrumbs: !0, description: !1, layout: "default", direction: "row", responsive: !0, responsiveBreakpoint: "lg", responsiveTarget: "#kt_toolbar_container" },
            };
            var B = h(5e3);
            const pt = `${K.N.appVersion}-layoutConfig`;
            let W = (() => {
                class U {
                    constructor() {
                        (this.layoutConfigSubject = new it.X(void 0)),
                            (this.classes = {
                                header: [],
                                headerContainer: [],
                                headerMobile: [],
                                headerMenu: [],
                                aside: [],
                                asideMenu: [],
                                asideToggle: [],
                                toolbar: [],
                                toolbarContainer: [],
                                content: [],
                                contentContainer: [],
                                footerContainer: [],
                                sidebar: [],
                                pageTitle: [],
                            }),
                            (this.attrs = { asideMenu: {}, headerMobile: {}, headerMenu: {}, headerContainer: {}, pageTitle: {} });
                    }
                    initConfig() {
                        const V = localStorage.getItem(pt);
                        if (V)
                            try {
                                return void this.layoutConfigSubject.next(JSON.parse(V));
                            } catch (Z) {
                                this.removeConfig(), console.error("config parse from local storage", Z);
                            }
                        this.layoutConfigSubject.next(_);
                    }
                    removeConfig() {
                        localStorage.removeItem(pt);
                    }
                    refreshConfigToDefault() {
                        this.setConfigWithPageRefresh(void 0);
                    }
                    getConfig() {
                        return this.layoutConfigSubject.value || _;
                    }
                    setConfig(V) {
                        V ? localStorage.setItem(pt, JSON.stringify(V)) : this.removeConfig(), this.layoutConfigSubject.next(V);
                    }
                    updateConfig(V) {
                        const Z = this.layoutConfigSubject.value;
                        if (!Z) return;
                        const G = Object.assign(Object.assign({}, Z), V);
                        (this.classes = {
                            header: [],
                            headerContainer: [],
                            headerMobile: [],
                            headerMenu: [],
                            aside: [],
                            asideMenu: [],
                            asideToggle: [],
                            toolbar: [],
                            toolbarContainer: [],
                            content: [],
                            contentContainer: [],
                            footerContainer: [],
                            sidebar: [],
                            pageTitle: [],
                        }),
                            (this.cssVariables = { body: new Map() }),
                            (this.attrs = Object.assign({}, { asideMenu: {}, headerMobile: {}, headerMenu: {}, headerContainer: {}, pageTitle: {} })),
                            this.layoutConfigSubject.next(G);
                    }
                    setConfigWithoutLocalStorageChanges(V) {
                        this.layoutConfigSubject.next(V);
                    }
                    setConfigWithPageRefresh(V) {
                        this.setConfig(V), document.location.reload();
                    }
                    getProp(V) {
                        const Z = this.layoutConfigSubject.value;
                        if (Z) return F.get(Z, V);
                    }
                    setCSSClass(V, Z) {
                        this.classes[V] || (this.classes[V] = []), Z.split(" ").forEach((rt) => this.classes[V].push(rt));
                    }
                    getCSSClasses(V) {
                        return this.classes[V] || [];
                    }
                    getStringCSSClasses(V) {
                        return this.getCSSClasses(V).join(" ");
                    }
                    getHTMLAttributes(V) {
                        return this.attrs[V] || {};
                    }
                    setHTMLAttribute(V, Z, G) {
                        this.attrs[V] || (this.attrs[V] = {}), (this.attrs[V][Z] = G);
                    }
                }
                return (
                    (U.ɵfac = function (V) {
                        return new (V || U)();
                    }),
                    (U.ɵprov = B.Yz7({ token: U, factory: U.ɵfac, providedIn: "root" })),
                    U
                );
            })();
        },
        17154: (Ct, mt, h) => {
            "use strict";
            h.r(mt), h.d(mt, { LayoutModule: () => Ie });
            var K = h(69808),
                it = h(44619),
                F = h(4521),
                _ = h(39483),
                B = h(51062),
                pt = h(87292),
                m = h(5e3),
                q = h(96288);
            let st = (() => {
                class b {
                    constructor(T) {
                        this.layout = T;
                    }
                    init() {
                        this.layout.initConfig(), this.initLayout(), this.initHeader(), this.initPageTitle(), this.initToolbar(), this.initContent(), this.initAside(), this.initFooter();
                    }
                    update(T) {
                        this.layout.updateConfig(T), this.initLayout(), this.initHeader(), this.initPageTitle(), this.initToolbar(), this.initContent(), this.initAside(), this.initFooter();
                    }
                    initLayout() {
                        document.body.setAttribute("style", ""), document.body.setAttribute("id", "kt_body");
                        const T = this.layout.getProp("main.body.backgroundImage");
                        T && (document.body.style.backgroundImage = `url("${T}")`);
                        const X = (this.layout.getProp("main.body.class") || "").toString();
                        X && X.split(" ").forEach((ot) => document.body.classList.add(ot));
                    }
                    initHeader() {
                        this.layout.setCSSClass("headerContainer", "fluid" === this.layout.getProp("header.width") ? "container-fluid" : "container-xxl"),
                            this.layout.getProp("header.fixed.desktop") && document.body.classList.add("header-fixed"),
                            this.layout.getProp("header.fixed.tabletAndMobile") && document.body.classList.add("header-tablet-and-mobile-fixed");
                    }
                    initPageTitle() {
                        if (
                            this.layout.getProp("pageTitle.display") &&
                            ("column" === this.layout.getProp("pageTitle.direction")
                                ? (this.layout.setCSSClass("pageTitle", "flex-column"), this.layout.setCSSClass("pageTitle", "align-items-start"))
                                : (this.layout.setCSSClass("pageTitle", "align-items-center"), this.layout.setCSSClass("pageTitle", "flex-wrap")),
                            this.layout.setCSSClass("pageTitle", "me-3"),
                            this.layout.getProp("pageTitle.responsive"))
                        ) {
                            this.layout.setCSSClass("pageTitle", "mb-5"),
                                this.layout.setCSSClass("pageTitle", "mb-lg-0"),
                                this.layout.setHTMLAttribute("pageTitle", "data-kt-swapper", !0),
                                this.layout.setHTMLAttribute("pageTitle", "data-kt-swapper-mode", "prepend");
                            const ot = this.layout.getProp("pageTitle.responsiveBreakpoint"),
                                ut = this.layout.getProp("pageTitle.responsiveTarget");
                            this.layout.setHTMLAttribute("pageTitle", "data-kt-swapper-parent", `{ default: '#kt_content_container', '${ot}': '${ut}'}`);
                        }
                    }
                    initToolbar() {
                        if (!this.layout.getProp("toolbar.display")) return;
                        document.body.classList.add("toolbar-enabled");
                        const X = this.layout.getProp("toolbar.width");
                        if (
                            (this.layout.setCSSClass("toolbarContainer", "fluid" === X ? "container-fluid" : "container-xxl"),
                            this.layout.getProp("toolbar.fixed.desktop") && document.body.classList.add("toolbar-fixed"),
                            this.layout.getProp("toolbar.fixed.tabletAndMobileMode") && document.body.classList.add("toolbar-tablet-and-mobile-fixed"),
                            "toolbar1" === this.layout.getProp("toolbar.layout"))
                        ) {
                            const kt = this.layout.getProp("toolbar.layouts.toolbar1.height"),
                                Bt = this.layout.getProp("toolbar.layouts.toolbar1.heightAndTabletMobileMode");
                            let It = "";
                            kt && (It += ` --kt-toolbar-height: ${kt};`), Bt && (It += ` --kt-toolbar-height-tablet-and-mobile: ${Bt};`), document.body.setAttribute("style", It);
                        }
                    }
                    initContent() {
                        const T = this.layout.getProp("content.width");
                        this.layout.setCSSClass("contentContainer", "fluid" === T ? "container-fluid" : "container-xxl");
                    }
                    initAside() {
                        if (!this.layout.getProp("aside.display")) return;
                        document.body.classList.add("aside-enabled");
                        const X = this.layout.getProp("aside.theme");
                        this.layout.setCSSClass("aside", `aside-${X}`),
                            this.layout.getProp("aside.fixed") && document.body.classList.add("aside-fixed"),
                            this.layout.getProp("aside.minimized") && document.body.setAttribute("data-kt-aside-minimize", "on"),
                            this.layout.getProp("aside.hoverable") && this.layout.setCSSClass("aside", "aside-hoverable");
                    }
                    initFooter() {
                        const T = this.layout.getProp("footer.width");
                        this.layout.setCSSClass("footerContainer", "fluid" === T ? "container-fluid" : "container-xxl");
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.LFG(q.Pb));
                    }),
                    (b.ɵprov = m.Yz7({ token: b, factory: b.ɵfac, providedIn: "root" })),
                    b
                );
            })();
            var W = h(92340),
                U = h(26244),
                dt = h(40520);
            let V = (() => {
                class b {
                    constructor(T) {
                        (this.http = T), (this.ROOT_URI = `${W.N.apiUrlMaster}`);
                    }
                    getMenu(T) {
                        return this.http.get(this.ROOT_URI + "/menu/" + T.level_id + "?akses=" + T.akses);
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.LFG(dt.eN));
                    }),
                    (b.ɵprov = m.Yz7({ token: b, factory: b.ɵfac, providedIn: "root" })),
                    b
                );
            })();
            const Z = function (b) {
                return { xmenu: b };
            };
            function G(b, R) {
                if ((1 & b && (m.ynx(0), m.GkF(1, 5), m.BQk()), 2 & b)) {
                    const T = R.$implicit;
                    m.oxw();
                    const X = m.MAs(2),
                        J = m.MAs(4);
                    m.xp6(1), m.Q6J("ngTemplateOutlet", "" == T.submenu ? X : J)("ngTemplateOutletContext", m.VKq(2, Z, T));
                }
            }
            function rt(b, R) {
                if ((1 & b && (m.TgZ(0, "div", 6)(1, "a", 7)(2, "span", 8), m._UZ(3, "span", 9), m.qZA(), m.TgZ(4, "span", 10), m._uU(5), m.qZA()()()), 2 & b)) {
                    const T = R.xmenu;
                    m.xp6(1), m.MGl("routerLink", "/", T.link, ""), m.xp6(2), m.Q6J("inlineSVG", "./assets/media/icons/duotune/general/gen019.svg"), m.xp6(2), m.Oqu(T.nama_menu);
                }
            }
            const nt = function (b) {
                return { submenu: b };
            };
            function z(b, R) {
                if ((1 & b && (m.TgZ(0, "div", 16), m.GkF(1, 5), m.qZA()), 2 & b)) {
                    const T = R.$implicit;
                    m.oxw(2);
                    const X = m.MAs(6),
                        J = m.MAs(8);
                    m.xp6(1), m.Q6J("ngTemplateOutlet", "" == T.submenu || null == T.submenu ? X : J)("ngTemplateOutletContext", m.VKq(2, nt, T));
                }
            }
            function j(b, R) {
                if ((1 & b && (m.TgZ(0, "div", 11)(1, "span", 12)(2, "span", 8), m._UZ(3, "span", 9), m.qZA(), m.TgZ(4, "span", 13), m._uU(5), m.qZA(), m._UZ(6, "span", 14), m.qZA(), m.YNc(7, z, 2, 4, "div", 15), m.qZA()), 2 & b)) {
                    const T = R.xmenu;
                    m.xp6(3), m.Q6J("inlineSVG", "./assets/media/icons/duotune/communication/com012.svg"), m.xp6(2), m.Oqu(T.nama_menu), m.xp6(2), m.Q6J("ngForOf", T.submenu);
                }
            }
            function H(b, R) {
                if ((1 & b && (m.TgZ(0, "div", 6)(1, "a", 7)(2, "span", 17), m._UZ(3, "span", 18), m.qZA(), m.TgZ(4, "span", 10), m._uU(5), m.qZA()()()), 2 & b)) {
                    const T = R.submenu;
                    m.xp6(1), m.MGl("routerLink", "/", T.link, ""), m.xp6(4), m.Oqu(T.nama_menu);
                }
            }
            function E(b, R) {
                if ((1 & b && (m.TgZ(0, "div", 22)(1, "a", 23)(2, "span", 17), m._UZ(3, "span", 18), m.qZA(), m.TgZ(4, "span", 10), m._uU(5), m.qZA()()()), 2 & b)) {
                    const T = R.$implicit;
                    m.xp6(1), m.MGl("routerLink", "/", T.link, ""), m.xp6(4), m.Oqu(T.nama_menu);
                }
            }
            function $(b, R) {
                if (
                    (1 & b &&
                        (m.TgZ(0, "div", 19)(1, "span", 12)(2, "span", 17),
                        m._UZ(3, "span", 18),
                        m.qZA(),
                        m.TgZ(4, "span", 10),
                        m._uU(5),
                        m.qZA(),
                        m._UZ(6, "span", 14),
                        m.qZA(),
                        m.TgZ(7, "div", 20),
                        m.YNc(8, E, 6, 2, "div", 21),
                        m.qZA()()),
                    2 & b)
                ) {
                    const T = R.submenu;
                    m.xp6(5), m.Oqu(T.nama_menu), m.xp6(3), m.Q6J("ngForOf", T.submenu);
                }
            }
            let lt = (() => {
                class b {
                    constructor(T, X) {
                        (this.menu = T), (this.change = X), (this.appAngularVersion = W.N.appVersion), (this.appPreviewChangelogUrl = W.N.appPreviewChangelogUrl);
                    }
                    ngOnInit() {}
                    ngAfterViewInit() {
                        this.getMenu();
                    }
                    getMenu() {
                        let T = JSON.parse(localStorage.getItem("v0.0.0-authf649fc9a5f55"));
                        this.menu.getMenu(T).subscribe((X) => {
                            (this.listMenu = X.data), this.change.markForCheck();
                        });
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.Y36(V), m.Y36(m.sBO));
                    }),
                    (b.ɵcmp = m.Xpm({
                        type: b,
                        selectors: [["app-aside-menu"]],
                        decls: 9,
                        vars: 1,
                        consts: [
                            [4, "ngFor", "ngForOf"],
                            ["simpleMenu", ""],
                            ["complexMenu", ""],
                            ["subKosong", ""],
                            ["subMenux", ""],
                            [3, "ngTemplateOutlet", "ngTemplateOutletContext"],
                            [1, "menu-item"],
                            ["routerLinkActive", "active", 1, "menu-link", "without-sub", 3, "routerLink"],
                            [1, "menu-icon"],
                            [1, "svg-icon", "svg-icon-2", 3, "inlineSVG"],
                            [1, "menu-title", "text-white"],
                            ["data-kt-menu-trigger", "click", "routerLinkActive", "here show", 1, "menu-item", "menu-accordion"],
                            [1, "menu-link"],
                            ["data-link", "/master", 1, "menu-title", "text-white"],
                            [1, "menu-arrow"],
                            ["class", "menu-sub menu-sub-accordion", "routerLinkActive", "menu-active-bg", 4, "ngFor", "ngForOf"],
                            ["routerLinkActive", "menu-active-bg", 1, "menu-sub", "menu-sub-accordion"],
                            [1, "menu-bullet"],
                            [1, "bullet", "bullet-dot"],
                            ["data-kt-menu-trigger", "click", 1, "menu-item", "menu-accordion", "mb-1"],
                            ["kt-hidden-height", "81", "routerLinkActive", "menu-active-bg", 1, "menu-sub", "menu-sub-accordion", 2, "display", "none", "overflow", "hidden"],
                            ["class", "menu-item", "routerLinkActive", "menu-active-bg", 4, "ngFor", "ngForOf"],
                            ["routerLinkActive", "menu-active-bg", 1, "menu-item"],
                            ["routerLinkActive", "menu-active-bg", 1, "menu-link", 3, "routerLink"],
                        ],
                        template: function (T, X) {
                            1 & T &&
                                (m.YNc(0, G, 2, 4, "ng-container", 0),
                                m.YNc(1, rt, 6, 3, "ng-template", null, 1, m.W1O),
                                m.YNc(3, j, 8, 3, "ng-template", null, 2, m.W1O),
                                m.YNc(5, H, 6, 2, "ng-template", null, 3, m.W1O),
                                m.YNc(7, $, 9, 2, "ng-template", null, 4, m.W1O)),
                                2 & T && m.Q6J("ngForOf", X.listMenu);
                        },
                        directives: [K.sg, K.tP, F.yS, F.Od, it.d$],
                        styles: [".menu-title[_ngcontent-%COMP%]{color:#fff!important}"],
                    })),
                    b
                );
            })();
            const St = ["ktAsideScroll"];
            function le(b, R) {
                1 & b && (m.ynx(0), m.TgZ(1, "a", 11), m._UZ(2, "img", 12), m.qZA(), m.BQk());
            }
            function he(b, R) {
                1 & b && (m.ynx(0), m.TgZ(1, "a", 11), m._UZ(2, "img", 13), m.qZA(), m.BQk());
            }
            function $t(b, R) {
                1 & b && (m.ynx(0), m.TgZ(1, "div", 14), m._UZ(2, "span", 15), m.qZA(), m.BQk()), 2 & b && (m.xp6(2), m.Q6J("inlineSVG", "./assets/media/icons/duotune/arrows/arr079.svg"));
            }
            let wt = (() => {
                class b {
                    constructor(T, X) {
                        (this.layout = T), (this.router = X), (this.asideTheme = ""), (this.asideMinimize = !1), (this.asideMenuCSSClasses = ""), (this.appPreviewDocsUrl = W.N.appPreviewDocsUrl), (this.unsubscribe = []);
                    }
                    ngOnInit() {
                        (this.asideTheme = this.layout.getProp("aside.theme")), (this.asideMinimize = this.layout.getProp("aside.minimize")), (this.asideMenuCSSClasses = this.layout.getStringCSSClasses("asideMenu")), this.routingChanges();
                    }
                    routingChanges() {
                        const T = this.router.events.subscribe((X) => {
                            (X instanceof F.m2 || X instanceof F.gk) && this.menuReinitialization();
                        });
                        this.unsubscribe.push(T);
                    }
                    menuReinitialization() {
                        setTimeout(() => {
                            U.Mn.reinitialization(), U.hg.reinitialization(), U.n$.reinitialization(), U.lg.reinitialization(), this.ktAsideScroll && this.ktAsideScroll.nativeElement && (this.ktAsideScroll.nativeElement.scrollTop = 0);
                        }, 50);
                    }
                    ngOnDestroy() {
                        this.unsubscribe.forEach((T) => T.unsubscribe());
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.Y36(q.Pb), m.Y36(F.F0));
                    }),
                    (b.ɵcmp = m.Xpm({
                        type: b,
                        selectors: [["app-aside"]],
                        viewQuery: function (T, X) {
                            if ((1 & T && m.Gf(St, 7), 2 & T)) {
                                let J;
                                m.iGM((J = m.CRH())) && (X.ktAsideScroll = J.first);
                            }
                        },
                        decls: 14,
                        vars: 5,
                        consts: [
                            ["id", "kt_aside_logo", 1, "aside-logo", "flex-column-auto", 2, "background-color", "#020138 !important"],
                            [4, "ngIf"],
                            [1, "aside-menu", "flex-column-fluid"],
                            [
                                "id",
                                "kt_aside_menu_wrapper",
                                "data-kt-scroll",
                                "true",
                                "data-kt-scroll-activate",
                                "{default: false, lg: true}",
                                "data-kt-scroll-height",
                                "auto",
                                "data-kt-scroll-dependencies",
                                "#kt_aside_logo, #kt_aside_footer",
                                "data-kt-scroll-wrappers",
                                "#kt_aside_menu",
                                "data-kt-scroll-offset",
                                "0",
                                1,
                                "hover-scroll-overlay-y",
                                "my-5",
                                "my-lg-5",
                            ],
                            ["ktAsideScroll", ""],
                            ["id", "#kt_aside_menu", "data-kt-menu", "true", 1, "menu", "menu-column", "menu-title-gray-800", "menu-state-title-primary", "menu-state-icon-primary", "menu-state-bullet-primary", "menu-arrow-gray-500"],
                            ["id", "asideMenu"],
                            ["id", "kt_aside_footer", 1, "aside-footer", "flex-column-auto", "pt-5", "pb-7", "px-5"],
                            [
                                "data-bs-toggle",
                                "tooltip",
                                "data-bs-trigger",
                                "hover",
                                "data-bs-dismiss-",
                                "click",
                                "ngbDropdown",
                                "Check out the complete documentation with over 100 components",
                                1,
                                "btn",
                                "btn-custom",
                                "btn-primary",
                                "w-100",
                                3,
                                "href",
                            ],
                            [1, "btn-label", "text-white"],
                            [1, "svg-icon", "btn-icon", "svg-icon-2", 3, "inlineSVG"],
                            ["routerLink", "/dashboard"],
                            ["alt", "Logo", "src", "./assets/media/logos/logo-white.png", 1, "h-35px", "logo"],
                            ["alt", "Logo", "src", "./assets/media/logos/logo.png", 1, "h-35px", "logo"],
                            [
                                "id",
                                "kt_aside_toggle",
                                "data-kt-toggle",
                                "true",
                                "data-kt-toggle-state",
                                "active",
                                "data-kt-toggle-target",
                                "body",
                                "data-kt-toggle-name",
                                "aside-minimize",
                                1,
                                "btn",
                                "btn-icon",
                                "w-auto",
                                "px-0",
                                "btn-active-color-primary",
                                "aside-toggle",
                            ],
                            [1, "svg-icon", "svg-icon-1", "rotate-180", 3, "inlineSVG"],
                        ],
                        template: function (T, X) {
                            1 & T &&
                                (m.TgZ(0, "div", 0),
                                m.YNc(1, le, 3, 0, "ng-container", 1),
                                m.YNc(2, he, 3, 0, "ng-container", 1),
                                m.YNc(3, $t, 3, 1, "ng-container", 1),
                                m.qZA(),
                                m.TgZ(4, "div", 2)(5, "div", 3, 4)(7, "div", 5),
                                m._UZ(8, "app-aside-menu", 6),
                                m.qZA()()(),
                                m.TgZ(9, "div", 7)(10, "a", 8)(11, "span", 9),
                                m._uU(12, "Kuesioner Pengguna"),
                                m.qZA(),
                                m._UZ(13, "span", 10),
                                m.qZA()()),
                                2 & T &&
                                    (m.xp6(1),
                                    m.Q6J("ngIf", "dark" === X.asideTheme),
                                    m.xp6(1),
                                    m.Q6J("ngIf", "light" === X.asideTheme),
                                    m.xp6(1),
                                    m.Q6J("ngIf", X.asideMinimize),
                                    m.xp6(7),
                                    m.Q6J("href", "#", m.LSH),
                                    m.xp6(3),
                                    m.Q6J("inlineSVG", "./assets/media/icons/duotune/general/gen005.svg"));
                        },
                        directives: [K.O5, F.yS, it.d$, lt, _.jt],
                        styles: [""],
                    })),
                    b
                );
            })();
            var Wt = h(64942),
                gt = h(38334),
                At = h(93075);
            function Gt(b, R) {
                1 & b && (m.TgZ(0, "div", 5), m._UZ(1, "div", 6), m.qZA());
            }
            function Vt(b, R) {
                if (1 & b) {
                    const T = m.EpF();
                    m.TgZ(0, "div", 7)(1, "div", 8)(2, "form", 9, 10),
                        m.NdJ("ngSubmit", function () {
                            return m.CHM(T), m.oxw().submit();
                        }),
                        m.TgZ(4, "div", 11)(5, "label", 12),
                        m._uU(6, "Jenis"),
                        m.qZA(),
                        m.TgZ(7, "select", 13)(8, "option", 14),
                        m._uU(9, "PERENCANAAN"),
                        m.qZA(),
                        m.TgZ(10, "option", 15),
                        m._uU(11, "PENGANGGARAN"),
                        m.qZA()()(),
                        m.TgZ(12, "div", 16)(13, "button", 17),
                        m.NdJ("click", function () {
                            return m.CHM(T), m.oxw().close();
                        }),
                        m._uU(14, " Tutup "),
                        m.qZA(),
                        m.TgZ(15, "button", 18),
                        m._uU(16, " Masuk "),
                        m.qZA()()()()();
                }
                if (2 & b) {
                    const T = m.MAs(3);
                    m.xp6(15), m.Q6J("disabled", !T.valid);
                }
            }
            let Et = (() => {
                    class b {
                        constructor(T, X, J, ot) {
                            (this.document = T),
                                (this.activeModal = X),
                                (this.konfigurasiMenuService = J),
                                (this.daerahService = ot),
                                (this.id_daerah = ""),
                                (this.tahun = ""),
                                (this.nama_daerah = ""),
                                (this.jenis_data = ""),
                                (this.daerahList = []),
                                (this.daerahIsLoading = !1);
                        }
                        ngOnInit() {
                            this.konfigurasiMenuService.currentKonfigurasi$.subscribe((T) => {
                                T && ((this.id_daerah = String(T.id_daerah)), (this.tahun = String(T.tahun)), (this.nama_daerah = String(T.nama_daerah)), (this.jenis_data = String(T.jenis_data)));
                            }),
                                this.loadDaerah();
                        }
                        ngOnDestroy() {}
                        close() {
                            this.activeModal.close();
                        }
                        onChangeDaerah(T) {
                            var X, J;
                            null === (X = this.daerahSub) || void 0 === X || X.unsubscribe(), (this.id_daerah = T);
                            const ot = null === (J = this.daerahList) || void 0 === J ? void 0 : J.find((ut) => (null == ut ? void 0 : ut.id_daerah) === Number(T));
                            this.nama_daerah = String(null == ot ? void 0 : ot.nama_daerah);
                        }
                        submit() {
                            this.konfigurasiMenuService.setKonfigurasi({ id_daerah: Number(this.id_daerah), tahun: Number(this.tahun), nama_daerah: this.nama_daerah, jenis_data: this.jenis_data }), this.activeModal.close(), this.reload();
                        }
                        loadDaerah() {
                            (this.daerahIsLoading = !0),
                                (this.daerahSub = this.daerahService.all().subscribe({
                                    next: (T) => {
                                        (this.daerahIsLoading = !1), (this.daerahList = T.data.sort((X, J) => X.nama_daerah.localeCompare(J.nama_daerah)));
                                    },
                                    error: (T) => {
                                        this.daerahIsLoading = !1;
                                    },
                                }));
                        }
                        reload() {
                            var T;
                            null === (T = this.document.defaultView) || void 0 === T || T.location.reload();
                        }
                    }
                    return (
                        (b.ɵfac = function (T) {
                            return new (T || b)(m.Y36(K.K0), m.Y36(_.Kz), m.Y36(Wt.W), m.Y36(gt.E));
                        }),
                        (b.ɵcmp = m.Xpm({
                            type: b,
                            selectors: [["app-konfigurasi-modal"]],
                            decls: 6,
                            vars: 2,
                            consts: [
                                [1, "modal-header"],
                                [1, "fw-bolder", "m-0"],
                                ["type", "button", "aria-label", "Close", 1, "btn-close", 3, "click"],
                                ["class", "d-flex justify-content-center mt-20 mb-20", 4, "ngIf"],
                                ["class", "card mb-3", 4, "ngIf"],
                                [1, "d-flex", "justify-content-center", "mt-20", "mb-20"],
                                [1, "spinner-border"],
                                [1, "card", "mb-3"],
                                [1, "card-body", "border-top", "px-9", "py-3"],
                                [3, "ngSubmit"],
                                ["konfigurasiForm", "ngForm"],
                                [1, "d-flex", "flex-wrap", "mb-3"],
                                ["for", "id_daerah", 1, "col-lg-4", "col-form-label", "required", "fw-bold", "fs-6"],
                                ["id", "jenis_data", "name", "jenis_data", "name", "name", "required", "", 1, "form-select"],
                                ["value", "perencanaan"],
                                ["value", "penganggaran"],
                                [1, "d-flex", "flex-wrap", "justify-content-between", "py-4"],
                                ["type", "button", "data-bs-toggle", "modal", "data-bs-target", "#kt_modal_create_project", 1, "btn", "btn-secondary", "btn-sm", 3, "click"],
                                ["type", "submit", "data-bs-toggle", "modal", "data-bs-target", "#kt_modal_create_project", 1, "btn", "btn-primary", "btn-sm", 3, "disabled"],
                            ],
                            template: function (T, X) {
                                1 & T &&
                                    (m.TgZ(0, "div", 0)(1, "h3", 1),
                                    m._uU(2, "Pilih Tahun"),
                                    m.qZA(),
                                    m.TgZ(3, "button", 2),
                                    m.NdJ("click", function () {
                                        return X.activeModal.dismiss("Cross click");
                                    }),
                                    m.qZA()(),
                                    m.YNc(4, Gt, 2, 0, "div", 3),
                                    m.YNc(5, Vt, 17, 1, "div", 4)),
                                    2 & T && (m.xp6(4), m.Q6J("ngIf", X.daerahIsLoading), m.xp6(1), m.Q6J("ngIf", !X.daerahIsLoading));
                            },
                            directives: [K.O5, At._Y, At.JL, At.F, At.YN, At.Kr],
                            styles: [""],
                        })),
                        b
                    );
                })(),
                Xt = (() => {
                    class b {
                        constructor(T, X, J, ot, ut) {
                            (this.router = T), (this.activatedRoute = X), (this.modalService = J), (this.konfigurasiMenuService = ot), (this.location = ut);
                        }
                        get konfigurasiTitle() {
                            return this.konfigurasiMenu ? `TAHUN : ${this.konfigurasiMenu.tahun}` : "Pilih Tahun";
                        }
                        ngOnInit() {
                            this.konfigurasiMenuService.currentKonfigurasi$.subscribe((T) => {
                                this.konfigurasiMenu = T;
                            });
                        }
                        calculateMenuItemCssClass(T) {
                            return de(this.router.url, T) ? "active" : "";
                        }
                        showKonfigurasiModal() {
                            this.modalService.open(Et);
                        }
                    }
                    return (
                        (b.ɵfac = function (T) {
                            return new (T || b)(m.Y36(F.F0), m.Y36(F.gz), m.Y36(_.FF), m.Y36(Wt.W), m.Y36(K.Ye));
                        }),
                        (b.ɵcmp = m.Xpm({
                            type: b,
                            selectors: [["app-header-menu"]],
                            decls: 4,
                            vars: 1,
                            consts: [
                                [1, "menu-item", "me-lg-1"],
                                [1, "menu-link", "py-3", 2, "background-color", "#020138 !important"],
                                [1, "menu-title", "text-white"],
                            ],
                            template: function (T, X) {
                                1 & T && (m.TgZ(0, "div", 0)(1, "span", 1)(2, "span", 2), m._uU(3), m.qZA()()()), 2 & T && (m.xp6(3), m.Oqu(X.konfigurasiTitle));
                            },
                            styles: ["[_nghost-%COMP%]{height:inherit;width:inherit}"],
                        })),
                        b
                    );
                })();
            const de = (b, R) => {
                const T = ((b) => b.split(/[?#]/)[0])(b);
                return !(!T || !R) && (T === R || T.indexOf(R) > -1);
            };
            var vt = h(61135);
            let jt = (() => {
                class b {
                    constructor() {
                        (this.title = new vt.X("Dashboard")), (this.description = new vt.X("")), (this.breadcrumbs = new vt.X([]));
                    }
                    setTitle(T) {
                        this.title.next(T);
                    }
                    updateTitle(T) {
                        setTimeout(() => {
                            this.setTitle(T);
                        }, 1);
                    }
                    setDescription(T) {
                        this.description.next(T);
                    }
                    updateDescription(T) {
                        setTimeout(() => {
                            this.setDescription(T);
                        }, 1);
                    }
                    setBreadcrumbs(T) {
                        this.breadcrumbs.next(T);
                    }
                    updateBreadcrumbs(T) {
                        setTimeout(() => {
                            this.setBreadcrumbs(T);
                        }, 20);
                    }
                    calculateTitle() {
                        const T = this.calculateTitleInMenu("asideMenu"),
                            X = this.calculateTitleInMenu("#kt_header_menu");
                        this.setTitle(T || X || "");
                    }
                    calculateTitleInMenu(T) {
                        const X = document.getElementById(T);
                        if (!X) return;
                        const J = Array.from(X.querySelectorAll("a.menu-link")).filter((ut) => ut.classList.contains("active"));
                        if (!J || 0 === J.length) return;
                        const ot = J[0].querySelector("span.menu-title");
                        return ot ? ot.innerText : void 0;
                    }
                    calculateBreadcrumbs() {
                        const T = this.calculateBreadcrumbsInMenu("asideMenu"),
                            X = this.calculateBreadcrumbsInMenu("#kt_header_menu");
                        this.setBreadcrumbs((T && T.length > 0 ? T : X) || []);
                    }
                    calculateBreadcrumbsInMenu(T) {
                        const X = [],
                            J = document.getElementById(T);
                        if (!J) return;
                        const ot = Array.from(J.querySelectorAll("div.menu-item")).filter((ut) => ut.classList.contains("here"));
                        return ot && 0 !== ot.length
                            ? (ot.forEach((ut) => {
                                  const kt = ut.querySelector("span.menu-title");
                                  if (!kt) return;
                                  const Bt = kt.innerText,
                                      It = kt.getAttribute("data-link");
                                  !It || (X.push({ title: Bt, path: It, isSeparator: !1, isActive: !1 }), X.push({ title: "", path: "", isSeparator: !0, isActive: !1 }));
                              }),
                              X)
                            : void 0;
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)();
                    }),
                    (b.ɵprov = m.Yz7({ token: b, factory: b.ɵfac, providedIn: "root" })),
                    b
                );
            })();
            function Mt(b, R) {
                if ((1 & b && (m.ynx(0), m.TgZ(1, "h1", 1), m._uU(2), m.qZA(), m.BQk()), 2 & b)) {
                    const T = m.oxw().ngIf;
                    m.xp6(2), m.hij(" ", T, " ");
                }
            }
            function bt(b, R) {
                1 & b && (m.ynx(0), m._UZ(1, "span", 5), m.BQk());
            }
            function qt(b, R) {
                if ((1 & b && (m.ynx(0), m.TgZ(1, "a", 7), m._uU(2), m.qZA(), m.BQk()), 2 & b)) {
                    const T = m.oxw().$implicit;
                    m.xp6(1), m.Q6J("routerLink", T.path), m.xp6(1), m.hij(" ", T.title, " ");
                }
            }
            function Pt(b, R) {
                1 & b && (m.ynx(0), m._UZ(1, "span", 8), m.BQk());
            }
            function Rt(b, R) {
                if ((1 & b && (m.TgZ(0, "li", 6), m.YNc(1, qt, 3, 2, "ng-container", 0), m.YNc(2, Pt, 2, 0, "ng-container", 0), m.qZA()), 2 & b)) {
                    const T = R.$implicit;
                    m.Q6J("ngClass", !T.isSeparator && T.isActive ? "text-dark" : "")("ngClass", T.isSeparator || T.isActive ? "" : "text-muted"), m.xp6(1), m.Q6J("ngIf", !T.isSeparator), m.xp6(1), m.Q6J("ngIf", T.isSeparator);
                }
            }
            function Yt(b, R) {
                if ((1 & b && (m.ynx(0), m.YNc(1, bt, 2, 0, "ng-container", 0), m.TgZ(2, "ul", 2), m.YNc(3, Rt, 3, 4, "li", 3), m.TgZ(4, "li", 4), m._uU(5), m.qZA()(), m.BQk()), 2 & b)) {
                    const T = m.oxw().ngIf,
                        X = m.oxw(2).ngIf,
                        J = m.oxw();
                    m.xp6(1), m.Q6J("ngIf", "row" === J.pageTitleDirection), m.xp6(2), m.Q6J("ngForOf", T), m.xp6(2), m.Oqu(X);
                }
            }
            function _t(b, R) {
                if ((1 & b && (m.ynx(0), m.YNc(1, Yt, 6, 3, "ng-container", 0), m.BQk()), 2 & b)) {
                    const T = R.ngIf;
                    m.xp6(1), m.Q6J("ngIf", T.length > 0);
                }
            }
            function Lt(b, R) {
                if ((1 & b && (m.ynx(0), m.YNc(1, _t, 2, 1, "ng-container", 0), m.ALo(2, "async"), m.BQk()), 2 & b)) {
                    const T = m.oxw(2);
                    m.xp6(1), m.Q6J("ngIf", m.lcZ(2, 1, T.bc$));
                }
            }
            function Ut(b, R) {
                if ((1 & b && (m.ynx(0), m.YNc(1, Mt, 3, 1, "ng-container", 0), m.YNc(2, Lt, 3, 3, "ng-container", 0), m.BQk()), 2 & b)) {
                    const T = m.oxw();
                    m.xp6(1), m.Q6J("ngIf", T.showTitle), m.xp6(1), m.Q6J("ngIf", T.showBC);
                }
            }
            let Ht = (() => {
                class b {
                    constructor(T, X) {
                        (this.pageInfo = T), (this.layout = X), (this.unsubscribe = []), (this.showTitle = !0), (this.showBC = !0), (this.pageTitleCssClass = ""), (this.pageTitleDirection = "row");
                    }
                    ngOnInit() {
                        (this.title$ = this.pageInfo.title.asObservable()),
                            (this.description$ = this.pageInfo.description.asObservable()),
                            (this.bc$ = this.pageInfo.breadcrumbs.asObservable()),
                            (this.showTitle = this.layout.getProp("pageTitle.display")),
                            (this.showBC = this.layout.getProp("pageTitle.breadCrumbs")),
                            (this.pageTitleCssClass = this.layout.getStringCSSClasses("pageTitle")),
                            (this.pageTitleDirection = this.layout.getProp("pageTitle.direction"));
                    }
                    ngOnDestroy() {
                        this.unsubscribe.forEach((T) => T.unsubscribe());
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.Y36(jt), m.Y36(q.Pb));
                    }),
                    (b.ɵcmp = m.Xpm({
                        type: b,
                        selectors: [["app-page-title"]],
                        decls: 2,
                        vars: 3,
                        consts: [
                            [4, "ngIf"],
                            [1, "d-flex", "align-items-center", "text-dark", "fw-bolder", "my-1", "fs-3"],
                            [1, "breadcrumb", "breadcrumb-separatorless", "fw-bold", "fs-7", "my-1"],
                            ["class", "breadcrumb-item", 3, "ngClass", 4, "ngFor", "ngForOf"],
                            [1, "breadcrumb-item", "text-dark"],
                            [1, "h-20px", "border-gray-200", "border-start", "mx-4"],
                            [1, "breadcrumb-item", 3, "ngClass"],
                            [1, "text-muted", "text-hover-primary", 3, "routerLink"],
                            [1, "bullet", "bg-gray-200", "w-5px", "h-2px"],
                        ],
                        template: function (T, X) {
                            1 & T && (m.YNc(0, Ut, 3, 2, "ng-container", 0), m.ALo(1, "async")), 2 & T && m.Q6J("ngIf", m.lcZ(1, 1, X.title$));
                        },
                        directives: [K.O5, K.sg, K.mk, F.yS],
                        pipes: [K.Ov],
                        encapsulation: 2,
                    })),
                    b
                );
            })();
            var Zt = h(90089),
                ce = h(35513);
            function ge(b, R) {
                if (1 & b) {
                    const T = m.EpF();
                    m.ynx(0),
                        m.TgZ(1, "div", 1)(2, "div", 2)(3, "div", 3),
                        m._UZ(4, "img", 4),
                        m.qZA(),
                        m.TgZ(5, "div", 5)(6, "div", 6),
                        m._uU(7),
                        m.qZA(),
                        m.TgZ(8, "a", 7),
                        m._uU(9),
                        m.qZA()()()(),
                        m._UZ(10, "div", 8),
                        m.TgZ(11, "div", 9)(12, "a", 10),
                        m._uU(13, " Profil Saya "),
                        m.qZA()(),
                        m.TgZ(14, "div", 9)(15, "a", 11),
                        m.NdJ("click", function () {
                            return m.CHM(T), m.oxw().logout();
                        }),
                        m._uU(16, " Sign Out "),
                        m.qZA()(),
                        m.BQk();
                }
                if (2 & b) {
                    const T = R.ngIf;
                    m.xp6(4), m.Q6J("src", T.pic, m.LSH), m.xp6(3), m.hij(" ", T.fullname, " "), m.xp6(2), m.hij(" ", T.occupation, " ");
                }
            }
            let Jt = (() => {
                class b {
                    constructor(T, X) {
                        (this.auth = T),
                            (this.translationService = X),
                            (this.class = "menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg menu-state-primary fw-bold py-4 fs-6 w-275px"),
                            (this.dataKtMenu = "true"),
                            (this.langs = ue),
                            (this.unsubscribe = []);
                    }
                    ngOnInit() {
                        (this.user$ = this.auth.currentUserSubject.asObservable()), this.setLanguage(this.translationService.getSelectedLanguage());
                    }
                    logout() {
                        this.auth.logout(), document.location.reload();
                    }
                    selectLanguage(T) {
                        this.translationService.setLanguage(T), this.setLanguage(T);
                    }
                    setLanguage(T) {
                        this.langs.forEach((X) => {
                            X.lang === T ? ((X.active = !0), (this.language = X)) : (X.active = !1);
                        });
                    }
                    ngOnDestroy() {
                        this.unsubscribe.forEach((T) => T.unsubscribe());
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.Y36(Zt.e8), m.Y36(ce.D));
                    }),
                    (b.ɵcmp = m.Xpm({
                        type: b,
                        selectors: [["app-user-inner"]],
                        hostVars: 3,
                        hostBindings: function (T, X) {
                            2 & T && (m.uIk("data-kt-menu", X.dataKtMenu), m.Tol(X.class));
                        },
                        decls: 2,
                        vars: 3,
                        consts: [
                            [4, "ngIf"],
                            [1, "menu-item", "px-3"],
                            [1, "menu-content", "d-flex", "align-items-center", "px-3"],
                            [1, "symbol", "symbol-50px", "me-5"],
                            ["alt", "Logo", 3, "src"],
                            [1, "d-flex", "flex-column"],
                            [1, "fw-bolder", "d-flex", "align-items-center", "fs-5"],
                            [1, "fw-bold", "text-muted", "text-hover-primary", "fs-7", "cursor-pointer"],
                            [1, "separator", "my-2"],
                            [1, "menu-item", "px-5"],
                            ["routerLink", "/profile", 1, "menu-link", "px-5"],
                            [1, "menu-link", "px-5", "cursor-pointer", 3, "click"],
                        ],
                        template: function (T, X) {
                            1 & T && (m.YNc(0, ge, 17, 3, "ng-container", 0), m.ALo(1, "async")), 2 & T && m.Q6J("ngIf", m.lcZ(1, 1, X.user$));
                        },
                        directives: [K.O5, F.yS],
                        pipes: [K.Ov],
                        encapsulation: 2,
                    })),
                    b
                );
            })();
            const ue = [
                { lang: "en", name: "English", flag: "./assets/media/flags/united-states.svg" },
                { lang: "zh", name: "Mandarin", flag: "./assets/media/flags/china.svg" },
                { lang: "es", name: "Spanish", flag: "./assets/media/flags/spain.svg" },
                { lang: "ja", name: "Japanese", flag: "./assets/media/flags/japan.svg" },
                { lang: "de", name: "German", flag: "./assets/media/flags/germany.svg" },
                { lang: "fr", name: "French", flag: "./assets/media/flags/france.svg" },
            ];
            function fe(b, R) {
                if ((1 & b && (m.TgZ(0, "div", 3)(1, "div", 4)(2, "div", 5), m._uU(3), m.qZA(), m.TgZ(4, "a", 6), m._uU(5), m.qZA()(), m.TgZ(6, "div", 7), m._UZ(7, "img", 8), m.qZA()()), 2 & b)) {
                    const T = R.ngIf,
                        X = m.oxw();
                    m.Q6J("ngClass", X.toolbarUserAvatarHeightClass), m.xp6(3), m.hij(" ", T.nama_daerah, " "), m.xp6(2), m.hij(" ", T.fullname, " "), m.xp6(2), m.Q6J("src", T.pic, m.LSH);
                }
            }
            function pe(b, R) {
                1 & b && (m.ynx(0), m.TgZ(1, "div", 9)(2, "div", 10), m._UZ(3, "span", 11), m.qZA()(), m.BQk()), 2 & b && (m.xp6(3), m.Q6J("inlineSVG", "./assets/media/icons/duotune/text/txt001.svg"));
            }
            let xe = (() => {
                class b {
                    constructor(T, X) {
                        (this.layout = T),
                            (this.auth = X),
                            (this.toolbarButtonMarginClass = "ms-1 ms-lg-3"),
                            (this.toolbarButtonHeightClass = "w-30px h-30px w-md-40px h-md-40px"),
                            (this.toolbarUserAvatarHeightClass = "symbol-30px symbol-md-40px"),
                            (this.toolbarButtonIconSizeClass = "svg-icon-1"),
                            (this.headerLeft = "menu");
                    }
                    ngOnInit() {
                        (this.headerLeft = this.layout.getProp("header.left")), (this.user$ = this.auth.currentUserSubject.asObservable());
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.Y36(q.Pb), m.Y36(Zt.e8));
                    }),
                    (b.ɵcmp = m.Xpm({
                        type: b,
                        selectors: [["app-topbar"]],
                        decls: 5,
                        vars: 5,
                        consts: [
                            ["id", "kt_header_user_menu_toggle", 1, "d-flex", "align-items-center", 3, "ngClass"],
                            ["class", "cursor-pointer symbol", "data-kt-menu-trigger", "click", "data-kt-menu-attach", "parent", "data-kt-menu-placement", "bottom-end", "data-kt-menu-flip", "bottom", 3, "ngClass", 4, "ngIf"],
                            [4, "ngIf"],
                            ["data-kt-menu-trigger", "click", "data-kt-menu-attach", "parent", "data-kt-menu-placement", "bottom-end", "data-kt-menu-flip", "bottom", 1, "cursor-pointer", "symbol", 3, "ngClass"],
                            [1, "d-inline-block", "me-5", "my-auto", "align-self-center", 2, "vertical-align", "middle"],
                            [1, "fw-bolder", "d-flex", "fs-5", "align-items-center"],
                            [1, "fw-bold", "text-muted", "text-hover-primary", "fs-7", "cursor-pointer"],
                            [1, "d-inline-block", "me-5", "float-right", "symbol"],
                            ["onerror", "this.onerror=null; this.src='./assets/media/users/photo-placeholder.png'", "alt", "", 2, "object-fit", "scale-down", "width", "50px", "height", "50px", 3, "src"],
                            ["title", "Show header menu", 1, "d-flex", "align-items-center", "d-lg-none", "ms-2", "me-n3"],
                            ["id", "kt_header_menu_mobile_toggle", 1, "btn", "btn-icon", "btn-active-light-primary", "w-30px", "h-30px", "w-md-40px", "h-md-40px"],
                            [1, "svg-icon", "svg-icon-1", 3, "inlineSVG"],
                        ],
                        template: function (T, X) {
                            1 & T && (m.TgZ(0, "div", 0), m.YNc(1, fe, 8, 4, "div", 1), m.ALo(2, "async"), m._UZ(3, "app-user-inner"), m.qZA(), m.YNc(4, pe, 4, 1, "ng-container", 2)),
                                2 & T && (m.Q6J("ngClass", X.toolbarButtonMarginClass), m.xp6(1), m.Q6J("ngIf", m.lcZ(2, 3, X.user$)), m.xp6(3), m.Q6J("ngIf", "menu" === X.headerLeft));
                        },
                        directives: [K.mk, K.O5, Jt, it.d$],
                        pipes: [K.Ov],
                        styles: [""],
                    })),
                    b
                );
            })();
            const me = ["ktPageTitle"];
            function ve(b, R) {
                1 & b && (m.ynx(0), m.TgZ(1, "div", 12)(2, "div", 13), m._UZ(3, "span", 14), m.qZA()(), m.BQk()), 2 & b && (m.xp6(3), m.Q6J("inlineSVG", "./assets/media/icons/duotune/abstract/abs015.svg"));
            }
            function be(b, R) {
                1 & b && (m.ynx(0), m.TgZ(1, "div", 15)(2, "div", 16), m._UZ(3, "app-header-menu", 17), m.qZA()(), m.BQk());
            }
            function Nt(b, R) {
                if ((1 & b && (m.ynx(0), m.TgZ(1, "div", 18), m._UZ(2, "app-page-title", 19, 20), m.qZA(), m.BQk()), 2 & b)) {
                    const T = m.oxw();
                    m.xp6(2), m.Q6J("ngClass", T.pageTitleCssClasses);
                }
            }
            let ye = (() => {
                class b {
                    constructor(T, X) {
                        (this.layout = T), (this.router = X), (this.headerContainerCssClasses = ""), (this.asideDisplay = !0), (this.headerLeft = "menu"), (this.pageTitleCssClasses = ""), (this.unsubscribe = []), this.routingChanges();
                    }
                    ngOnInit() {
                        (this.headerContainerCssClasses = this.layout.getStringCSSClasses("headerContainer")),
                            (this.asideDisplay = this.layout.getProp("aside.display")),
                            (this.headerLeft = this.layout.getProp("header.left")),
                            (this.pageTitleCssClasses = this.layout.getStringCSSClasses("pageTitle")),
                            (this.pageTitleAttributes = this.layout.getHTMLAttributes("pageTitle"));
                    }
                    ngAfterViewInit() {
                        if (this.ktPageTitle) for (const T in this.pageTitleAttributes) this.pageTitleAttributes.hasOwnProperty(T) && (this.ktPageTitle.nativeElement.attributes[T] = this.pageTitleAttributes[T]);
                    }
                    routingChanges() {
                        const T = this.router.events.subscribe((X) => {
                            (X instanceof F.m2 || X instanceof F.gk) && U.Mn.reinitialization();
                        });
                        this.unsubscribe.push(T);
                    }
                    ngOnDestroy() {}
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.Y36(q.Pb), m.Y36(F.F0));
                    }),
                    (b.ɵcmp = m.Xpm({
                        type: b,
                        selectors: [["app-header"]],
                        viewQuery: function (T, X) {
                            if ((1 & T && m.Gf(me, 7), 2 & T)) {
                                let J;
                                m.iGM((J = m.CRH())) && (X.ktPageTitle = J.first);
                            }
                        },
                        decls: 16,
                        vars: 4,
                        consts: [
                            [1, "d-flex", "align-items-stretch", "justify-content-between", 3, "ngClass"],
                            [4, "ngIf"],
                            [1, "d-flex", "align-items-center", "flex-grow-1", "flex-lg-grow-0"],
                            ["routerLink", "/dashboard", 1, "d-lg-none"],
                            ["src", "./assets/media/logos/logo.png", 1, "h-30px"],
                            [1, "d-flex", "align-items-stretch", "justify-content-between", "flex-lg-grow-1"],
                            [1, "d-flex", "align-items-stretch", "flex-shrink-0"],
                            [1, "svg-icon", "svg-icon-primary", "svg-icon-3x", 2, "margin-top", "12px", "margin-right", "18px"],
                            ["xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", "width", "24px", "height", "24px", "viewBox", "0 0 24 24", "version", "1.1"],
                            ["stroke", "none", "stroke-width", "1", "fill", "none", "fill-rule", "evenodd"],
                            [
                                "d",
                                "M17,12 L18.5,12 C19.3284271,12 20,12.6715729 20,13.5 C20,14.3284271 19.3284271,15 18.5,15 L5.5,15 C4.67157288,15 4,14.3284271 4,13.5 C4,12.6715729 4.67157288,12 5.5,12 L7,12 L7.5582739,6.97553494 C7.80974924,4.71225688 9.72279394,3 12,3 C14.2772061,3 16.1902508,4.71225688 16.4417261,6.97553494 L17,12 Z",
                                "fill",
                                "#DDDDDD",
                            ],
                            ["fill", "#DDDDDD", "opacity", "0.3", "x", "10", "y", "16", "width", "4", "height", "4", "rx", "2"],
                            ["title", "Show aside menu", 1, "d-flex", "align-items-center", "d-lg-none", "ms-n3", "me-1"],
                            ["id", "kt_aside_mobile_toggle", 1, "btn", "btn-icon", "btn-active-light-primary", "w-30px", "h-30px", "w-md-40px", "h-md-40px"],
                            [1, "svg-icon", "svg-icon-1", 3, "inlineSVG"],
                            ["id", "kt_header_nav", 1, "d-flex", "align-items-stretch"],
                            [
                                "data-kt-drawer",
                                "true",
                                "data-kt-drawer-name",
                                "header-menu",
                                "data-kt-drawer-activate",
                                "{default: true, lg: false}",
                                "data-kt-drawer-overlay",
                                "true",
                                "data-kt-drawer-width",
                                "{default:'200px', '300px': '250px'}",
                                "data-kt-drawer-direction",
                                "end",
                                "data-kt-drawer-toggle",
                                "#kt_header_menu_mobile_toggle",
                                "data-kt-swapper",
                                "true",
                                "data-kt-swapper-mode",
                                "prepend",
                                "data-kt-swapper-parent",
                                "{default: '#kt_body', lg: '#kt_header_nav'}",
                                1,
                                "header-menu",
                                "align-items-stretch",
                            ],
                            [
                                "id",
                                "#kt_header_menu",
                                "data-kt-menu",
                                "true",
                                1,
                                "menu",
                                "menu-lg-rounded",
                                "menu-column",
                                "menu-lg-row",
                                "menu-state-bg",
                                "menu-title-gray-700",
                                "menu-state-title-primary",
                                "menu-state-icon-primary",
                                "menu-state-bullet-primary",
                                "menu-arrow-gray-400",
                                "fw-bold",
                                "my-5",
                                "my-lg-0",
                                "align-items-stretch",
                            ],
                            ["id", "kt_header_nav", 1, "d-flex", "align-items-center"],
                            [1, "page-title", "d-flex", 3, "ngClass"],
                            ["ktPageTitle", ""],
                        ],
                        template: function (T, X) {
                            1 & T &&
                                (m.TgZ(0, "div", 0),
                                m.YNc(1, ve, 4, 1, "ng-container", 1),
                                m.TgZ(2, "div", 2)(3, "a", 3),
                                m._UZ(4, "img", 4),
                                m.qZA()(),
                                m.TgZ(5, "div", 5),
                                m.YNc(6, be, 4, 0, "ng-container", 1),
                                m.YNc(7, Nt, 4, 1, "ng-container", 1),
                                m._UZ(8, "div", 6),
                                m.TgZ(9, "div", 6)(10, "span", 7),
                                m.O4$(),
                                m.TgZ(11, "svg", 8)(12, "g", 9),
                                m._UZ(13, "path", 10)(14, "rect", 11),
                                m.qZA()()(),
                                m.kcU(),
                                m._UZ(15, "app-topbar", 6),
                                m.qZA()()()),
                                2 & T && (m.Q6J("ngClass", X.headerContainerCssClasses), m.xp6(1), m.Q6J("ngIf", X.asideDisplay), m.xp6(5), m.Q6J("ngIf", "menu" === X.headerLeft), m.xp6(1), m.Q6J("ngIf", "page-title" === X.headerLeft));
                        },
                        directives: [K.mk, K.O5, it.d$, F.yS, Xt, Ht, xe],
                        styles: [""],
                    })),
                    b
                );
            })();
            const te = ["ktPageTitle"];
            function ee(b, R) {
                if ((1 & b && (m.TgZ(0, "div")(1, "span", 7)(2, "b"), m._uU(3), m.qZA()()()), 2 & b)) {
                    const T = m.oxw(2);
                    m.xp6(3), m.hij(" ", T.namaSKPD, "");
                }
            }
            function Ce(b, R) {
                if ((1 & b && (m.TgZ(0, "div", 1), m._UZ(1, "app-page-title", 2, 3), m.TgZ(3, "div", 4)(4, "div", 5), m.YNc(5, ee, 4, 1, "div", 6), m.qZA()()()), 2 & b)) {
                    const T = R.ngIf,
                        X = m.oxw();
                    m.Q6J("ngClass", X.toolbarContainerCssClasses), m.xp6(1), m.Q6J("ngClass", X.pageTitleCssClasses), m.xp6(4), m.Q6J("ngIf", T.skpd && X.roleSkpd.includes(T.roles));
                }
            }
            let ie = (() => {
                    class b {
                        constructor(T, X, J) {
                            (this.layout = T), (this.auth = X), (this.konfigurasiService = J), (this.toolbarContainerCssClasses = ""), (this.pageTitleCssClasses = ""), (this.roleSkpd = [5, 9, 13]), (this.namaSKPD = "");
                        }
                        ngOnInit() {
                            let T = localStorage.getItem("sipd-konfigurasi-unit-set");
                            if (T) {
                                const X = JSON.parse(T);
                                this.namaSKPD = X.nama_skpd;
                            } else {
                                let X = this.konfigurasiService.getSession();
                                this.namaSKPD = X.skpd;
                            }
                            (this.toolbarContainerCssClasses = this.layout.getStringCSSClasses("toolbarContainer")),
                                (this.pageTitleCssClasses = this.layout.getStringCSSClasses("pageTitle")),
                                (this.pageTitleAttributes = this.layout.getHTMLAttributes("pageTitle")),
                                (this.user$ = this.auth.currentUserSubject.asObservable());
                        }
                        ngAfterViewInit() {
                            if (this.ktPageTitle)
                                for (const T in this.pageTitleAttributes) this.pageTitleAttributes.hasOwnProperty(T) && this.ktPageTitle.nativeElement && (this.ktPageTitle.nativeElement.attributes[T] = this.pageTitleAttributes[T]);
                        }
                    }
                    return (
                        (b.ɵfac = function (T) {
                            return new (T || b)(m.Y36(q.Pb), m.Y36(Zt.e8), m.Y36(Wt.W));
                        }),
                        (b.ɵcmp = m.Xpm({
                            type: b,
                            selectors: [["app-toolbar"]],
                            viewQuery: function (T, X) {
                                if ((1 & T && m.Gf(te, 7), 2 & T)) {
                                    let J;
                                    m.iGM((J = m.CRH())) && (X.ktPageTitle = J.first);
                                }
                            },
                            decls: 2,
                            vars: 3,
                            consts: [
                                ["id", "kt_toolbar_container", "class", "d-flex flex-stack", 3, "ngClass", 4, "ngIf"],
                                ["id", "kt_toolbar_container", 1, "d-flex", "flex-stack", 3, "ngClass"],
                                [1, "page-title", "d-flex", 3, "ngClass"],
                                ["ktPageTitle", ""],
                                [1, "d-flex", "align-items-center", "py-1"],
                                [1, "me-4"],
                                [4, "ngIf"],
                                [1, "menu-title", "text-dark"],
                            ],
                            template: function (T, X) {
                                1 & T && (m.YNc(0, Ce, 6, 3, "div", 0), m.ALo(1, "async")), 2 & T && m.Q6J("ngIf", m.lcZ(1, 1, X.user$));
                            },
                            directives: [K.O5, K.mk, Ht],
                            pipes: [K.Ov],
                            styles: [""],
                        })),
                        b
                    );
                })(),
                Ae = (() => {
                    class b {
                        constructor(T) {
                            (this.router = T), (this.unsubscribe = []);
                        }
                        ngOnInit() {
                            this.routingChanges();
                        }
                        routingChanges() {
                            const T = this.router.events.subscribe((X) => {});
                            this.unsubscribe.push(T);
                        }
                        ngOnDestroy() {
                            this.unsubscribe.forEach((T) => T.unsubscribe());
                        }
                    }
                    return (
                        (b.ɵfac = function (T) {
                            return new (T || b)(m.Y36(F.F0));
                        }),
                        (b.ɵcmp = m.Xpm({
                            type: b,
                            selectors: [["app-content"]],
                            decls: 1,
                            vars: 0,
                            template: function (T, X) {
                                1 & T && m._UZ(0, "router-outlet");
                            },
                            directives: [F.lC],
                            styles: [""],
                        })),
                        b
                    );
                })(),
                ae = (() => {
                    class b {
                        constructor(T) {
                            (this.layout = T), (this.footerContainerCssClasses = ""), (this.currentDateStr = new Date().getFullYear().toString());
                        }
                        ngOnInit() {
                            this.footerContainerCssClasses = this.layout.getStringCSSClasses("footerContainer");
                        }
                    }
                    return (
                        (b.ɵfac = function (T) {
                            return new (T || b)(m.Y36(q.Pb));
                        }),
                        (b.ɵcmp = m.Xpm({
                            type: b,
                            selectors: [["app-footer"]],
                            decls: 6,
                            vars: 2,
                            consts: [
                                [1, "d-flex", "flex-column", "flex-md-row", "align-items-center", "justify-content-between", 3, "ngClass"],
                                [1, "text-dark", "order-2", "order-md-1"],
                                [1, "text-muted", "fw-bold", "me-2"],
                                [1, "text-gray-800", "text-hover-primary", "cursor-pointer"],
                            ],
                            template: function (T, X) {
                                1 & T && (m.TgZ(0, "div", 0)(1, "div", 1)(2, "span", 2), m._uU(3), m.qZA(), m.TgZ(4, "a", 3), m._uU(5, " SIPD - Kementerian Dalam Negeri Republik Indonesia "), m.qZA()()()),
                                    2 & T && (m.Q6J("ngClass", X.footerContainerCssClasses), m.xp6(3), m.hij("", X.currentDateStr, " \xa9"));
                            },
                            directives: [K.mk],
                            styles: [""],
                        })),
                        b
                    );
                })();
            var Se = h(39300);
            let we = (() => {
                    class b {
                        constructor(T, X, J) {
                            (this.layout = T), (this.pageInfo = X), (this.router = J), (this.unsubscribe = []);
                            const ot = () => {
                                setTimeout(() => {
                                    this.pageInfo.calculateTitle(), this.pageInfo.calculateBreadcrumbs();
                                }, 10);
                            };
                            ot(), this.router.events.pipe((0, Se.h)((ut) => ut instanceof F.Av)).subscribe(ot);
                        }
                        ngOnInit() {
                            this.layoutConfig$ = this.layout.layoutConfigSubject.asObservable();
                            const T = this.layoutConfig$.subscribe(() => {
                                this.pluginsInitialization();
                            });
                            this.unsubscribe.push(T);
                        }
                        pluginsInitialization() {
                            setTimeout(() => {
                                U.n$.bootstrap(), U.nW.bootstrap(), U.hg.bootstrap(), U.bv.bootstrap(), U.Mn.bootstrap(), U.lg.bootstrap();
                            }, 200);
                        }
                        ngOnDestroy() {
                            this.unsubscribe.forEach((T) => T.unsubscribe());
                        }
                    }
                    return (
                        (b.ɵfac = function (T) {
                            return new (T || b)(m.Y36(q.Pb), m.Y36(jt), m.Y36(F.F0));
                        }),
                        (b.ɵcmp = m.Xpm({ type: b, selectors: [["app-scripts-init"]], decls: 0, vars: 0, template: function (T, X) {}, encapsulation: 2 })),
                        b
                    );
                })(),
                Pe = (() => {
                    class b {
                        constructor(T) {
                            (this.router = T), (this.class = "kt_scrolltop"), (this.id = "scrolltop"), (this.dataKtScrolltop = "true"), (this.unsubscribe = []);
                        }
                        ngOnInit() {
                            this.routingChanges();
                        }
                        routingChanges() {
                            const T = this.router.events.subscribe((X) => {
                                (X instanceof F.m2 || X instanceof F.gk) &&
                                    (this.pluginsReinitialization(),
                                    this.updateHeaderSticky(),
                                    setTimeout(() => {
                                        this.scrollTop();
                                    }, 0));
                            });
                            this.unsubscribe.push(T);
                        }
                        updateHeaderSticky() {
                            const T = document.body.querySelectorAll('[data-kt-sticky-name="header"]');
                            if (T && T.length > 0) {
                                const X = U.bv.getInstance(T[0]);
                                X && X.update();
                            }
                        }
                        scrollTop() {
                            U.nW.goTop();
                        }
                        pluginsReinitialization() {
                            setTimeout(() => {
                                U.Mn.reinitialization(),
                                    U.bv.reInitialization(),
                                    setTimeout(() => {
                                        U.n$.reinitialization(), U.hg.reinitialization();
                                    }, 70);
                            }, 140);
                        }
                        ngOnDestroy() {
                            this.unsubscribe.forEach((T) => T.unsubscribe());
                        }
                    }
                    return (
                        (b.ɵfac = function (T) {
                            return new (T || b)(m.Y36(F.F0));
                        }),
                        (b.ɵcmp = m.Xpm({
                            type: b,
                            selectors: [["app-scroll-top"]],
                            hostVars: 4,
                            hostBindings: function (T, X) {
                                2 & T && (m.Ikx("id", X.id), m.uIk("data-kt-scrolltop", X.dataKtScrolltop), m.Tol(X.class));
                            },
                            decls: 1,
                            vars: 1,
                            consts: [[1, "svg-icon", 3, "inlineSVG"]],
                            template: function (T, X) {
                                1 & T && m._UZ(0, "span", 0), 2 & T && m.Q6J("inlineSVG", "./assets/media/icons/duotune/arrows/arr066.svg");
                            },
                            directives: [it.d$],
                            encapsulation: 2,
                        })),
                        b
                    );
                })(),
                se = (() => {
                    class b {
                        constructor() {}
                        ngOnInit() {}
                    }
                    return (
                        (b.ɵfac = function (T) {
                            return new (T || b)();
                        }),
                        (b.ɵcmp = m.Xpm({ type: b, selectors: [["app-main-modal"]], decls: 0, vars: 0, template: function (T, X) {}, encapsulation: 2 })),
                        b
                    );
                })();
            const Me = ["ktAside"],
                Le = ["ktHeaderMobile"],
                Tt = ["ktHeader"];
            function ne(b, R) {
                if ((1 & b && m._UZ(0, "app-aside", 11), 2 & b)) {
                    const T = m.oxw();
                    m.Q6J("ngClass", T.asideCSSClasses);
                }
            }
            function Qt(b, R) {
                1 & b && (m.ynx(0), m._UZ(1, "app-toolbar", 12), m.BQk());
            }
            let oe = (() => {
                class b {
                    constructor(T, X) {
                        (this.initService = T),
                            (this.layout = X),
                            (this.selfLayout = "default"),
                            (this.contentClasses = ""),
                            (this.contentContainerClasses = ""),
                            (this.toolbarDisplay = !0),
                            (this.asideHTMLAttributes = {}),
                            (this.headerMobileClasses = ""),
                            (this.headerMobileAttributes = {}),
                            (this.headerHTMLAttributes = {}),
                            (this.extrasSearchOffcanvasDisplay = !1),
                            (this.extrasNotificationsOffcanvasDisplay = !1),
                            (this.extrasQuickActionsOffcanvasDisplay = !1),
                            (this.extrasCartOffcanvasDisplay = !1),
                            (this.extrasUserOffcanvasDisplay = !1),
                            (this.extrasQuickPanelDisplay = !1),
                            (this.extrasScrollTopDisplay = !1),
                            this.initService.init();
                    }
                    ngOnInit() {
                        (this.asideDisplay = this.layout.getProp("aside.display")),
                            (this.toolbarDisplay = this.layout.getProp("toolbar.display")),
                            (this.contentContainerClasses = this.layout.getStringCSSClasses("contentContainer")),
                            (this.asideCSSClasses = this.layout.getStringCSSClasses("aside")),
                            (this.headerCSSClasses = this.layout.getStringCSSClasses("header")),
                            (this.headerHTMLAttributes = this.layout.getHTMLAttributes("headerMenu"));
                    }
                    ngAfterViewInit() {
                        if (this.ktHeader) for (const T in this.headerHTMLAttributes) this.headerHTMLAttributes.hasOwnProperty(T) && (this.ktHeader.nativeElement.attributes[T] = this.headerHTMLAttributes[T]);
                    }
                }
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)(m.Y36(st), m.Y36(q.Pb));
                    }),
                    (b.ɵcmp = m.Xpm({
                        type: b,
                        selectors: [["app-layout"]],
                        viewQuery: function (T, X) {
                            if ((1 & T && (m.Gf(Me, 7), m.Gf(Le, 7), m.Gf(Tt, 7)), 2 & T)) {
                                let J;
                                m.iGM((J = m.CRH())) && (X.ktAside = J.first), m.iGM((J = m.CRH())) && (X.ktHeaderMobile = J.first), m.iGM((J = m.CRH())) && (X.ktHeader = J.first);
                            }
                        },
                        decls: 14,
                        vars: 4,
                        consts: [
                            [1, "d-flex", "flex-column", "flex-root"],
                            [1, "page", "d-flex", "flex-row", "flex-column-fluid"],
                            [
                                "id",
                                "kt_aside",
                                "data-kt-drawer",
                                "true",
                                "data-kt-drawer-name",
                                "aside",
                                "data-kt-drawer-activate",
                                "{default: true, lg: false}",
                                "data-kt-drawer-overlay",
                                "true",
                                "data-kt-drawer-width",
                                "{default:'200px', '300px': '250px'}",
                                "data-kt-drawer-direction",
                                "start",
                                "data-kt-drawer-toggle",
                                "#kt_aside_mobile_toggle",
                                "class",
                                "aside",
                                "style",
                                "background-image: url('./assets/media/patterns/pattern-1.jpg') !important;",
                                3,
                                "ngClass",
                                4,
                                "ngIf",
                            ],
                            ["id", "kt_wrapper", 1, "wrapper", "d-flex", "flex-column", "flex-row-fluid"],
                            ["id", "kt_header", 1, "header", "align-items-stretch", 3, "ngClass"],
                            ["ktHeader", ""],
                            ["id", "kt_content", 1, "content", "d-flex", "flex-column", "flex-column-fluid"],
                            [4, "ngIf"],
                            ["id", "kt_post", 1, "post", "d-flex", "flex-column-fluid"],
                            ["id", "kt_content_container", 3, "ngClass"],
                            ["id", "kt_footer", 1, "footer", "py-4", "d-flex", "flex-lg-column"],
                            [
                                "id",
                                "kt_aside",
                                "data-kt-drawer",
                                "true",
                                "data-kt-drawer-name",
                                "aside",
                                "data-kt-drawer-activate",
                                "{default: true, lg: false}",
                                "data-kt-drawer-overlay",
                                "true",
                                "data-kt-drawer-width",
                                "{default:'200px', '300px': '250px'}",
                                "data-kt-drawer-direction",
                                "start",
                                "data-kt-drawer-toggle",
                                "#kt_aside_mobile_toggle",
                                1,
                                "aside",
                                2,
                                "background-image",
                                "url('./assets/media/patterns/pattern-1.jpg') !important",
                                3,
                                "ngClass",
                            ],
                            ["id", "kt_toolbar", 1, "toolbar"],
                        ],
                        template: function (T, X) {
                            1 & T &&
                                (m.TgZ(0, "div", 0)(1, "div", 1),
                                m.YNc(2, ne, 1, 1, "app-aside", 2),
                                m.TgZ(3, "div", 3),
                                m._UZ(4, "app-header", 4, 5),
                                m.TgZ(6, "div", 6),
                                m.YNc(7, Qt, 2, 0, "ng-container", 7),
                                m.TgZ(8, "div", 8),
                                m._UZ(9, "app-content", 9),
                                m.qZA()(),
                                m._UZ(10, "app-footer", 10),
                                m.qZA()()(),
                                m._UZ(11, "app-scripts-init")(12, "app-scroll-top")(13, "app-main-modal")),
                                2 & T && (m.xp6(2), m.Q6J("ngIf", X.asideDisplay), m.xp6(2), m.Q6J("ngClass", X.headerCSSClasses), m.xp6(3), m.Q6J("ngIf", X.toolbarDisplay), m.xp6(2), m.Q6J("ngClass", X.contentContainerClasses));
                        },
                        directives: [K.O5, wt, K.mk, ye, ie, Ae, ae, we, Pe, se],
                        styles: [
                            "[_nghost-%COMP%]{height:100%;margin:0}[_nghost-%COMP%]   .flex-root[_ngcontent-%COMP%]{height:100%}.page-loaded[_ngcontent-%COMP%]   app-layout[_ngcontent-%COMP%]{opacity:1;transition:opacity 1s ease-in-out}",
                        ],
                    })),
                    b
                );
            })();
            var Te = h(64189);
            const re = [
                {
                    path: "new-skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(6362)])
                            .then(h.bind(h, 66362))
                            .then((b) => b.NewSkpdModule),
                },
                {
                    path: "new-sub-skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(8393)])
                            .then(h.bind(h, 48393))
                            .then((b) => b.NewSubSkpdModule),
                },
                {
                    path: "dashboard",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(7586)])
                            .then(h.bind(h, 64398))
                            .then((b) => b.DashboardModule),
                },
                {
                    path: "dashboard-sipd",
                    loadChildren: () =>
                        h
                            .e(3395)
                            .then(h.bind(h, 93395))
                            .then((b) => b.Dashboard2Module),
                },
                {
                    path: "sipd-dashboard",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(7586)])
                            .then(h.bind(h, 64398))
                            .then((b) => b.DashboardModule),
                },
                {
                    path: "master/parpol",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8386)])
                            .then(h.bind(h, 48386))
                            .then((b) => b.ParpolModule),
                },
                {
                    path: "master/label_pusat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(4330)])
                            .then(h.bind(h, 24330))
                            .then((b) => b.LabelPusatModule),
                },
                {
                    path: "master/label_provinsi",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(9336)])
                            .then(h.bind(h, 59336))
                            .then((b) => b.LabelProvinsiModule),
                },
                {
                    path: "master/label_kabkot",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(8037)])
                            .then(h.bind(h, 28037))
                            .then((b) => b.LabelKokabModule),
                },
                {
                    path: "master/label_kegiatan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(1686)])
                            .then(h.bind(h, 81686))
                            .then((b) => b.LabelKegiatanModule),
                },
                {
                    path: "master/nasional_akun",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(8089)])
                            .then(h.bind(h, 98089))
                            .then((b) => b.NasionalAkunModule),
                },
                {
                    path: "master/nasional_bidang_urusan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(8592), h.e(7550)])
                            .then(h.bind(h, 67550))
                            .then((b) => b.NasionalBidangUrusanModule),
                },
                {
                    path: "master/nasional_bidang_urusan_skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(8592), h.e(7922)])
                            .then(h.bind(h, 7922))
                            .then((b) => b.NasionalBidangUrusanSkpdModule),
                },
                {
                    path: "master/nasional_giat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(1563)])
                            .then(h.bind(h, 91563))
                            .then((b) => b.NasionalGiatModule),
                },
                {
                    path: "master/nasional_program",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(376)])
                            .then(h.bind(h, 376))
                            .then((b) => b.NasionalProgramModule),
                },
                {
                    path: "master/nasional_sub_giat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(1304)])
                            .then(h.bind(h, 51304))
                            .then((b) => b.NasionalSubGiatModule),
                },
                {
                    path: "master/nasional_sumber_dana",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(8645)])
                            .then(h.bind(h, 88645))
                            .then((b) => b.NasionalSumberDanaModule),
                },
                {
                    path: "master/nasional_urusan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(8592), h.e(6381)])
                            .then(h.bind(h, 36381))
                            .then((b) => b.NasionalUrusanModule),
                },
                {
                    path: "master/nasional_urusan_skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8356), h.e(4474)])
                            .then(h.bind(h, 14474))
                            .then((b) => b.NasionalUrusanSkpdModule),
                },
                {
                    path: "master/nasional_wilayah",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1228)])
                            .then(h.bind(h, 91228))
                            .then((b) => b.NasionalWilayahModule),
                },
                {
                    path: "master/daerah",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8606)])
                            .then(h.bind(h, 8606))
                            .then((b) => b.DaerahModule),
                },
                {
                    path: "master/akun",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(112)])
                            .then(h.bind(h, 80112))
                            .then((b) => b.AkunModule),
                },
                {
                    path: "master/bidang_urusan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(3441)])
                            .then(h.bind(h, 63441))
                            .then((b) => b.BidangUrusanModule),
                },
                {
                    path: "master/bidang_urusan_org",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(7767)])
                            .then(h.bind(h, 7767))
                            .then((b) => b.BidangUrusanOrgModule),
                },
                {
                    path: "master/bidang_urusan_skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(1997)])
                            .then(h.bind(h, 61997))
                            .then((b) => b.BidangUrusanSkpdModule),
                },
                {
                    path: "master/bulan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(3847)])
                            .then(h.bind(h, 33847))
                            .then((b) => b.BulanModule),
                },
                {
                    path: "master/fungsi",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(9834)])
                            .then(h.bind(h, 69834))
                            .then((b) => b.FungsiModule),
                },
                {
                    path: "master/fungsi_giat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(8858)])
                            .then(h.bind(h, 28858))
                            .then((b) => b.FungsiGiatModule),
                },
                {
                    path: "master/giat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(7388)])
                            .then(h.bind(h, 17388))
                            .then((b) => b.GiatModule),
                },
                {
                    path: "master/jenis_barjas",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(4716)])
                            .then(h.bind(h, 64716))
                            .then((b) => b.JenisBarjasModule),
                },
                {
                    path: "master/jenis_usulan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(287)])
                            .then(h.bind(h, 70287))
                            .then((b) => b.JenisUsulanModule),
                },
                {
                    path: "master/kamus_usulan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(8592), h.e(2348)])
                            .then(h.bind(h, 52348))
                            .then((b) => b.KamusUsulanModule),
                },
                {
                    path: "master/kecamatan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(698)])
                            .then(h.bind(h, 90698))
                            .then((b) => b.KecamatanModule),
                },
                {
                    path: "master/kelurahan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1712)])
                            .then(h.bind(h, 51712))
                            .then((b) => b.KelurahanModule),
                },
                {
                    path: "master/kel_standar_harga",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5096)])
                            .then(h.bind(h, 75096))
                            .then((b) => b.KelStandarHargaModule),
                },
                {
                    path: "master/level_user",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(2616)])
                            .then(h.bind(h, 52616))
                            .then((b) => b.LevelUserModule),
                },
                {
                    path: "master/lokasi",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(7754)])
                            .then(h.bind(h, 37754))
                            .then((b) => b.LokasiModule),
                },
                {
                    path: "master/metode_barjas",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1714)])
                            .then(h.bind(h, 21714))
                            .then((b) => b.MetodeBarjasModule),
                },
                {
                    path: "master/misi_daerah",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(412)])
                            .then(h.bind(h, 30412))
                            .then((b) => b.MisiDaerahModule),
                },
                {
                    path: "master/program",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(4392)])
                            .then(h.bind(h, 14392))
                            .then((b) => b.ProgramModule),
                },
                {
                    path: "master/program_sub_giat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(6533)])
                            .then(h.bind(h, 76533))
                            .then((b) => b.ProgramSubGiatModule),
                },
                {
                    path: "master/renstra",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2332)])
                            .then(h.bind(h, 12332))
                            .then((b) => b.RenstraModule),
                },
                {
                    path: "master/rpjmd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(6067)])
                            .then(h.bind(h, 26067))
                            .then((b) => b.RpjmdModule),
                },
                {
                    path: "master/sasaran_daerah",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1422)])
                            .then(h.bind(h, 51422))
                            .then((b) => b.SasaranDaerahModule),
                },
                {
                    path: "master/satuan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(4557)])
                            .then(h.bind(h, 84557))
                            .then((b) => b.SatuanModule),
                },
                {
                    path: "master/setup_tapd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(3632)])
                            .then(h.bind(h, 83632))
                            .then((b) => b.SetupTapdModule),
                },
                {
                    path: "master/skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(1139)])
                            .then(h.bind(h, 11139))
                            .then((b) => b.SkpdModule),
                },
                {
                    path: "master/skpd_pptk",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(5702)])
                            .then(h.bind(h, 5702))
                            .then((b) => b.SkpdPptkModule),
                },
                {
                    path: "master/spm",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1629)])
                            .then(h.bind(h, 21629))
                            .then((b) => b.SpmModule),
                },
                {
                    path: "master/spm_giat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(3329)])
                            .then(h.bind(h, 43329))
                            .then((b) => b.SpmGiatModule),
                },
                {
                    path: "master/status_usulan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(7035)])
                            .then(h.bind(h, 67035))
                            .then((b) => b.StatusUsulanModule),
                },
                {
                    path: "master/strategi_daerah",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(4206)])
                            .then(h.bind(h, 64206))
                            .then((b) => b.StrategiDaerahModule),
                },
                {
                    path: "master/sub_fungsi",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(8672)])
                            .then(h.bind(h, 98672))
                            .then((b) => b.SubFungsiModule),
                },
                {
                    path: "master/sub_giat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(1483)])
                            .then(h.bind(h, 31483))
                            .then((b) => b.SubGiatModule),
                },
                {
                    path: "master/sub_giat_akun",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(9450)])
                            .then(h.bind(h, 59450))
                            .then((b) => b.SubGiatAkunModule),
                },
                {
                    path: "master/sub_giat_skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(7665)])
                            .then(h.bind(h, 57665))
                            .then((b) => b.SubGiatSkpdModule),
                },
                {
                    path: "master/sub_rkpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(4631)])
                            .then(h.bind(h, 24631))
                            .then((b) => b.SubRkpdModule),
                },
                {
                    path: "master/sub_skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(7812)])
                            .then(h.bind(h, 27812))
                            .then((b) => b.SubSkpdModule),
                },
                {
                    path: "master/sumber_dana",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(2392)])
                            .then(h.bind(h, 74330))
                            .then((b) => b.SumberDanaModule),
                },
                {
                    path: "master/tahapan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(4793)])
                            .then(h.bind(h, 14793))
                            .then((b) => b.TahapanModule),
                },
                {
                    path: "master/tolak_usulan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(8040)])
                            .then(h.bind(h, 28040))
                            .then((b) => b.TolakUsulanModule),
                },
                {
                    path: "master/tpp",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(6063)])
                            .then(h.bind(h, 96063))
                            .then((b) => b.TppModule),
                },
                {
                    path: "master/urusan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8934)])
                            .then(h.bind(h, 78934))
                            .then((b) => b.UrusanModule),
                },
                {
                    path: "master/urusan_skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(3408)])
                            .then(h.bind(h, 23408))
                            .then((b) => b.UrusanSkpdModule),
                },
                {
                    path: "master/tujuan_daerah",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(4258)])
                            .then(h.bind(h, 34258))
                            .then((b) => b.TujuanDaerahModule),
                },
                {
                    path: "master/visi_daerah",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(9417)])
                            .then(h.bind(h, 99417))
                            .then((b) => b.VisiDaerahModule),
                },
                {
                    path: "master/xtra_sgt",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(8110)])
                            .then(h.bind(h, 48110))
                            .then((b) => b.XtraSgtModule),
                },
                {
                    path: "master/manajemen-upload",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(6620)])
                            .then(h.bind(h, 86620))
                            .then((b) => b.DokUploadModule),
                },
                {
                    path: "master/xtra_staf_sgt",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(1112)])
                            .then(h.bind(h, 51112))
                            .then((b) => b.XtraStafSgtModule),
                },
                {
                    path: "pengaturan/sipd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(70)])
                            .then(h.bind(h, 90070))
                            .then((b) => b.PengaturanSipdModule),
                },
                {
                    path: "settings/ref_menu",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(3809)])
                            .then(h.bind(h, 13809))
                            .then((b) => b.RefMenuModule),
                },
                {
                    path: "settings/ref_landing_page_menu",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(1776)])
                            .then(h.bind(h, 21776))
                            .then((b) => b.RefLandingPageMenuModule),
                },
                {
                    path: "settings/landing_page_menu_approval",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5587)])
                            .then(h.bind(h, 5587))
                            .then((b) => b.LandingPageMenuApprovalModule),
                },
                {
                    path: "settings/log",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(6041)])
                            .then(h.bind(h, 16041))
                            .then((b) => b.LogModule),
                },
                {
                    path: "settings/kamus_usulan/asmas",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(7286)])
                            .then(h.bind(h, 67286))
                            .then((b) => b.KamusUsulanModule),
                },
                {
                    path: "settings/kamus_usulan/reses",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(7286)])
                            .then(h.bind(h, 67286))
                            .then((b) => b.KamusUsulanModule),
                },
                {
                    path: "settings/setting-pagu-belanja",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(8592), h.e(4944)])
                            .then(h.bind(h, 94944))
                            .then((b) => b.SettingPaguBelanjaModule),
                },
                {
                    path: "user",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(7736), h.e(8592), h.e(3581)])
                            .then(h.bind(h, 53581))
                            .then((b) => b.UserModule),
                },
                {
                    path: "user/masyarakat",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(743)])
                            .then(h.bind(h, 60743))
                            .then((b) => b.UserMasyarakatModule),
                },
                {
                    path: "perencanaan/rpjmd/jadwal",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(3053), h.e(8592), h.e(4649)])
                            .then(h.bind(h, 54649))
                            .then((b) => b.JadwalModule),
                },
                {
                    path: "perencanaan/rpjmd/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(3053), h.e(3340)])
                            .then(h.bind(h, 13340))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "perencanaan/rpjmd/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(3053), h.e(1504)])
                            .then(h.bind(h, 11504))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "perencanaan/rpd/jadwal",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(2899), h.e(8592), h.e(7574)])
                            .then(h.bind(h, 57574))
                            .then((b) => b.JadwalModule),
                },
                {
                    path: "perencanaan/rpd/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(9186), h.e(2899), h.e(5051)])
                            .then(h.bind(h, 75051))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "perencanaan/rpd/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(2899), h.e(3019)])
                            .then(h.bind(h, 73019))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "perencanaan/renstra/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(2371), h.e(3031)])
                            .then(h.bind(h, 83031))
                            .then((b) => b.RenstraCascadingModule),
                },
                {
                    path: "perencanaan/renstra/jadwal",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(2371), h.e(8592), h.e(1340)])
                            .then(h.bind(h, 51340))
                            .then((b) => b.JadwalRenstraModule),
                },
                {
                    path: "perencanaan/renstra/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2371), h.e(9648)])
                            .then(h.bind(h, 19648))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "perencanaan/renja/jadwal",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(9894)])
                            .then(h.bind(h, 84521))
                            .then((b) => b.JadwalRenjaModule),
                },
                {
                    path: "perencanaan/renja/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(5808), h.e(1588), h.e(8592), h.e(8270)])
                            .then(h.bind(h, 38270))
                            .then((b) => b.RenjaCascadingModule),
                },
                {
                    path: "perencanaan/renja/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(7395)])
                            .then(h.bind(h, 2322))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "perencanaan/rpjpd/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(4342)])
                            .then(h.bind(h, 84707))
                            .then((b) => b.RpjpdCascadingModule),
                },
                {
                    path: "perencanaan/rpjpd/jadwal",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(687)])
                            .then(h.bind(h, 49440))
                            .then((b) => b.RpjpdJadwalModule),
                },
                {
                    path: "penganggaran/jadwal",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(9237)])
                            .then(h.bind(h, 59237))
                            .then((b) => b.JadwalPenganggaranModule),
                },
                {
                    path: "penganggaran/anggaran/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(5808), h.e(1588), h.e(8592), h.e(8270)])
                            .then(h.bind(h, 38270))
                            .then((b) => b.RenjaCascadingModule),
                },
                {
                    path: "penganggaran/ba_kesepakatan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8324)])
                            .then(h.bind(h, 8324))
                            .then((b) => b.BaKesepakatanModule),
                },
                {
                    path: "penganggaran/kua_ppas/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(5808), h.e(1588), h.e(8592), h.e(8270)])
                            .then(h.bind(h, 38270))
                            .then((b) => b.RenjaCascadingModule),
                },
                {
                    path: "penganggaran/kua_ppas/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/kua_ppas/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/rapbd/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(5808), h.e(1588), h.e(8592), h.e(8270)])
                            .then(h.bind(h, 38270))
                            .then((b) => b.RenjaCascadingModule),
                },
                {
                    path: "penganggaran/rapbd/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/rapbd/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/evaluasi_rapbd/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(6745)])
                            .then(h.bind(h, 2371))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "penganggaran/evaluasi_rapbd/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/evaluasi_rapbd/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/penetapan_apbd/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(5808), h.e(1588), h.e(8592), h.e(8270)])
                            .then(h.bind(h, 38270))
                            .then((b) => b.RenjaCascadingModule),
                },
                {
                    path: "penganggaran/penetapan_apbd/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/penetapan_apbd/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/apbd_pergeseran/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(6745)])
                            .then(h.bind(h, 2371))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "penganggaran/apbd_pergeseran/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/apbd_pergeseran/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/penetapan_apbd_pergeseran/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(6745)])
                            .then(h.bind(h, 2371))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "penganggaran/penetapan_apbd_pergeseran/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/penetapan_apbd_pergeseran/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/kupa_ppas/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(6745)])
                            .then(h.bind(h, 2371))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "penganggaran/kupa_ppas/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/kupa_ppas/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/rapbd_perubahan/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(6745)])
                            .then(h.bind(h, 2371))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "penganggaran/rapbd_perubahan/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/rapbd_perubahan/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/evaluasi_rapbd_perubahan/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(6745)])
                            .then(h.bind(h, 2371))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "penganggaran/evaluasi_rapbd_perubahan/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/evaluasi_rapbd_perubahan/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "penganggaran/penetapan_apbd_perubahan/cascading",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(6745)])
                            .then(h.bind(h, 2371))
                            .then((b) => b.CascadingModule),
                },
                {
                    path: "penganggaran/penetapan_apbd_perubahan/laporan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5310)])
                            .then(h.bind(h, 58121))
                            .then((b) => b.LaporanModule),
                },
                {
                    path: "penganggaran/penetapan_apbd_perubahan/rincian",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(7382), h.e(8592), h.e(4494)])
                            .then(h.bind(h, 24494))
                            .then((b) => b.RincianBelanjaModule),
                },
                {
                    path: "standar_harga/ssh",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(8592), h.e(199)])
                            .then(h.bind(h, 20199))
                            .then((b) => b.SshModule),
                },
                {
                    path: "standar_harga/hspk",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(8592), h.e(6856)])
                            .then(h.bind(h, 16856))
                            .then((b) => b.HspkModule),
                },
                {
                    path: "standar_harga/asb",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(8592), h.e(6606)])
                            .then(h.bind(h, 26606))
                            .then((b) => b.AsbModule),
                },
                {
                    path: "standar_harga/sbu",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(1470), h.e(9186), h.e(8592), h.e(555)])
                            .then(h.bind(h, 30555))
                            .then((b) => b.SbuModule),
                },
                {
                    path: "usulan/jadwal-aspirasi",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(479)])
                            .then(h.bind(h, 10479))
                            .then((b) => b.JadwalAspirasiModule),
                },
                {
                    path: "usulan/jadwal-pokir",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5001)])
                            .then(h.bind(h, 95001))
                            .then((b) => b.JadwalPokirModule),
                },
                {
                    path: "usulan/jadwal-usulan-komponen",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(6539)])
                            .then(h.bind(h, 56539))
                            .then((b) => b.JadwalUsulanKomponenModule),
                },
                {
                    path: "usulan/usulan-aspirasi",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(9186), h.e(5808), h.e(217), h.e(1588), h.e(5032)])
                            .then(h.bind(h, 98257))
                            .then((b) => b.UsulanAspirasiModule),
                },
                {
                    path: "usulan/usulan-pokir",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(9186), h.e(5808), h.e(217), h.e(11)])
                            .then(h.bind(h, 40011))
                            .then((b) => b.UsulanPokirModule),
                },
                {
                    path: "pendapatan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(9904), h.e(8592), h.e(3920)])
                            .then(h.bind(h, 73920))
                            .then((b) => b.PendapatanModule),
                },
                {
                    path: "pembiayaan/penerimaan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(9904), h.e(8592), h.e(2806)])
                            .then(h.bind(h, 92806))
                            .then((b) => b.PendapatanPembiayaanModule),
                },
                {
                    path: "pembiayaan/pengeluaran",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(1470), h.e(9904), h.e(8592), h.e(2806)])
                            .then(h.bind(h, 92806))
                            .then((b) => b.PendapatanPembiayaanModule),
                },
                {
                    path: "master/penugasan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(9602)])
                            .then(h.bind(h, 69602))
                            .then((b) => b.PenugasanModule),
                },
                {
                    path: "master/peran",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(9904), h.e(1313)])
                            .then(h.bind(h, 91313))
                            .then((b) => b.PeranModule),
                },
                {
                    path: "master/rute",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(9904), h.e(4033)])
                            .then(h.bind(h, 54033))
                            .then((b) => b.RuteModule),
                },
                {
                    path: "master/perizinan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(9904), h.e(2853)])
                            .then(h.bind(h, 82853))
                            .then((b) => b.PerizinanModule),
                },
                {
                    path: "master/menu",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(9904), h.e(3586)])
                            .then(h.bind(h, 33586))
                            .then((b) => b.MenuModule),
                },
                {
                    path: "tpp/pengajuan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(1308)])
                            .then(h.bind(h, 51308))
                            .then((b) => b.PengajuanModule),
                },
                {
                    path: "tpp/jadwal",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(8592), h.e(5157)])
                            .then(h.bind(h, 25157))
                            .then((b) => b.JadwalModule),
                },
                {
                    path: "profile",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(7736), h.e(8592), h.e(5900)])
                            .then(h.bind(h, 5900))
                            .then((b) => b.ProfileSayaModule),
                },
                {
                    path: "laporan/kua_ppas",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(7781)])
                            .then(h.bind(h, 77781))
                            .then((b) => b.LampiranKuaPpasModule),
                },
                {
                    path: "laporan/apbd_perda",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(3670)])
                            .then(h.bind(h, 16614))
                            .then((b) => b.LampiranApbdPerdaModule),
                },
                {
                    path: "laporan/perencanaan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(8738)])
                            .then(h.bind(h, 88738))
                            .then((b) => b.LaporanPerencanaanModule),
                },
                {
                    path: "laporan/analisis",
                    loadChildren: () =>
                        h
                            .e(6871)
                            .then(h.bind(h, 16871))
                            .then((b) => b.AnalisisModule),
                },
                {
                    path: "laporan/rekap",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(9186), h.e(5677)])
                            .then(h.bind(h, 65677))
                            .then((b) => b.LaporanRekapModule),
                },
                {
                    path: "laporan/ringkasan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(9186), h.e(5162)])
                            .then(h.bind(h, 45162))
                            .then((b) => b.RingkasanListModule),
                },
                {
                    path: "dokumen_anggaran/rka_skpd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(2904)])
                            .then(h.bind(h, 43552))
                            .then((b) => b.RkaSKPDModule),
                },
                {
                    path: "dokumen_anggaran/rka_pendapatan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(9712)])
                            .then(h.bind(h, 87539))
                            .then((b) => b.RkaPendapatanModule),
                },
                {
                    path: "dokumen_anggaran/rka_belanja",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(2429)])
                            .then(h.bind(h, 56821))
                            .then((b) => b.RkaBelanjaModule),
                },
                {
                    path: "dokumen_anggaran/rka_rekap_belanja",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(6482)])
                            .then(h.bind(h, 53470))
                            .then((b) => b.RkaRekapBelanjaModule),
                },
                {
                    path: "dokumen_anggaran/rka_pembiayaan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2983), h.e(8592), h.e(2243)])
                            .then(h.bind(h, 74769))
                            .then((b) => b.RkaPembiayaanModule),
                },
                {
                    path: "fasilitasi/form-satu",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(2040), h.e(2934)])
                            .then(h.bind(h, 72934))
                            .then((b) => b.FormSatuModule),
                },
                {
                    path: "builder",
                    loadChildren: () =>
                        h
                            .e(1934)
                            .then(h.bind(h, 91934))
                            .then((b) => b.BuilderModule),
                },
                {
                    path: "crafted/pages/profile",
                    loadChildren: () =>
                        Promise.all([h.e(690), h.e(3680)])
                            .then(h.bind(h, 63680))
                            .then((b) => b.ProfileModule),
                },
                {
                    path: "rak",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(273), h.e(8592), h.e(4398)])
                            .then(h.bind(h, 54398))
                            .then((b) => b.RakModule),
                },
                {
                    path: "spd",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(273), h.e(9826)])
                            .then(h.bind(h, 89826))
                            .then((b) => b.SpdModule),
                },
                {
                    path: "dpa",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(273), h.e(8592), h.e(1438)])
                            .then(h.bind(h, 21438))
                            .then((b) => b.DpaModule),
                },
                {
                    path: "spp",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(273), h.e(8592), h.e(925)])
                            .then(h.bind(h, 90925))
                            .then((b) => b.SppModule),
                },
                {
                    path: "spm",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(273), h.e(8592), h.e(9936)])
                            .then(h.bind(h, 39936))
                            .then((b) => b.SpmPenatausahaanModule),
                },
                {
                    path: "sp2d",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(273), h.e(8592), h.e(6538)])
                            .then(h.bind(h, 26538))
                            .then((b) => b.Sp2dModule),
                },
                {
                    path: "penatausahaan",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(273)])
                            .then(h.bind(h, 40273))
                            .then((b) => b.PenatausahaanModule),
                },
                {
                    path: "aklap",
                    loadChildren: () =>
                        Promise.all([h.e(2866), h.e(273), h.e(9274)])
                            .then(h.bind(h, 79274))
                            .then((b) => b.AklapModule),
                },
                {
                    path: "crafted/account",
                    loadChildren: () =>
                        Promise.all([h.e(6940), h.e(2275)])
                            .then(h.bind(h, 22275))
                            .then((b) => b.AccountModule),
                },
                {
                    path: "crafted/pages/wizards",
                    loadChildren: () =>
                        h
                            .e(3477)
                            .then(h.bind(h, 53477))
                            .then((b) => b.WizardsModule),
                },
                {
                    path: "crafted/widgets",
                    loadChildren: () =>
                        Promise.all([h.e(690), h.e(6940), h.e(7902)])
                            .then(h.bind(h, 67902))
                            .then((b) => b.WidgetsExamplesModule),
                },
                {
                    path: "apps/chat",
                    loadChildren: () =>
                        h
                            .e(1075)
                            .then(h.bind(h, 51075))
                            .then((b) => b.ChatModule),
                },
                { path: "", redirectTo: "/dashboard", pathMatch: "full" },
                { path: "**", redirectTo: "error/404" },
            ];
            var Ot = h(88801);
            const ke = [{ path: "", component: oe, children: re }];
            let Ie = (() => {
                class b {}
                return (
                    (b.ɵfac = function (T) {
                        return new (T || b)();
                    }),
                    (b.ɵmod = m.oAB({ type: b })),
                    (b.ɵinj = m.cJS({ imports: [[K.ez, F.Bz.forChild(ke), pt.q, it.vi, _.XC, _.ZQ, Te.p, Ot._9, Ot._t, Ot.S0, Ot.QX, _.HK, B.aw], F.Bz] })),
                    b
                );
            })();
        },
        88801: (Ct, mt, h) => {
            "use strict";
            h.d(mt, { mH: () => st, CV: () => q, _t: () => dt, QX: () => F, S0: () => V, _9: () => Z, HB: () => m });
            var K = h(69808),
                it = h(5e3);
            let F = (() => {
                class G {}
                return (
                    (G.ɵfac = function (nt) {
                        return new (nt || G)();
                    }),
                    (G.ɵmod = it.oAB({ type: G })),
                    (G.ɵinj = it.cJS({ imports: [[K.ez]] })),
                    G
                );
            })();
            var _ = h(42115),
                B = h(44619),
                pt = h(39483);
            let m = (() => {
                    class G {}
                    return (
                        (G.ɵfac = function (nt) {
                            return new (nt || G)();
                        }),
                        (G.ɵmod = it.oAB({ type: G })),
                        (G.ɵinj = it.cJS({ imports: [[K.ez, F, B.vi, _.X, pt.XC]] })),
                        G
                    );
                })(),
                q = (() => {
                    class G {}
                    return (
                        (G.ɵfac = function (nt) {
                            return new (nt || G)();
                        }),
                        (G.ɵmod = it.oAB({ type: G })),
                        (G.ɵinj = it.cJS({ imports: [[K.ez, B.vi]] })),
                        G
                    );
                })(),
                st = (() => {
                    class G {}
                    return (
                        (G.ɵfac = function (nt) {
                            return new (nt || G)();
                        }),
                        (G.ɵmod = it.oAB({ type: G })),
                        (G.ɵinj = it.cJS({ imports: [[K.ez, B.vi, pt.HK, F]] })),
                        G
                    );
                })();
            h(64189);
            var U = h(4521);
            let dt = (() => {
                    class G {}
                    return (
                        (G.ɵfac = function (nt) {
                            return new (nt || G)();
                        }),
                        (G.ɵmod = it.oAB({ type: G })),
                        (G.ɵinj = it.cJS({ imports: [[K.ez, B.vi, U.Bz, q]] })),
                        G
                    );
                })(),
                V = (() => {
                    class G {}
                    return (
                        (G.ɵfac = function (nt) {
                            return new (nt || G)();
                        }),
                        (G.ɵmod = it.oAB({ type: G })),
                        (G.ɵinj = it.cJS({ imports: [[K.ez, B.vi, U.Bz]] })),
                        G
                    );
                })(),
                Z = (() => {
                    class G {}
                    return (
                        (G.ɵfac = function (nt) {
                            return new (nt || G)();
                        }),
                        (G.ɵmod = it.oAB({ type: G })),
                        (G.ɵinj = it.cJS({ imports: [[K.ez, B.vi, U.Bz]] })),
                        G
                    );
                })();
        },
        64189: (Ct, mt, h) => {
            "use strict";
            h.d(mt, { p: () => q });
            var K = h(69808),
                it = h(4521),
                F = h(44619),
                _ = h(87292),
                B = h(39483),
                pt = h(93075),
                m = h(5e3);
            let q = (() => {
                class st {}
                return (
                    (st.ɵfac = function (U) {
                        return new (U || st)();
                    }),
                    (st.ɵmod = m.oAB({ type: st })),
                    (st.ɵinj = m.cJS({ imports: [[K.ez, pt.u5, F.vi, it.Bz, _.q, B.HK]] })),
                    st
                );
            })();
        },
        33597: (Ct, mt, h) => {
            "use strict";
            var K;
            function it(A, t) {
                var e = Object.keys(A);
                if (Object.getOwnPropertySymbols) {
                    var i = Object.getOwnPropertySymbols(A);
                    t &&
                        (i = i.filter(function (a) {
                            return Object.getOwnPropertyDescriptor(A, a).enumerable;
                        })),
                        e.push.apply(e, i);
                }
                return e;
            }
            function F(A) {
                for (var t = 1; t < arguments.length; t++) {
                    var e = null != arguments[t] ? arguments[t] : {};
                    t % 2
                        ? it(Object(e), !0).forEach(function (i) {
                              q(A, i, e[i]);
                          })
                        : Object.getOwnPropertyDescriptors
                        ? Object.defineProperties(A, Object.getOwnPropertyDescriptors(e))
                        : it(Object(e)).forEach(function (i) {
                              Object.defineProperty(A, i, Object.getOwnPropertyDescriptor(e, i));
                          });
                }
                return A;
            }
            function _(A) {
                return (_ =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(A);
            }
            function B(A, t) {
                if (!(A instanceof t)) throw new TypeError("Cannot call a class as a function");
            }
            function pt(A, t) {
                for (var e = 0; e < t.length; e++) {
                    var i = t[e];
                    (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(A, i.key, i);
                }
            }
            function m(A, t, e) {
                return t && pt(A.prototype, t), e && pt(A, e), A;
            }
            function q(A, t, e) {
                return t in A ? Object.defineProperty(A, t, { value: e, enumerable: !0, configurable: !0, writable: !0 }) : (A[t] = e), A;
            }
            function st(A, t) {
                if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
                (A.prototype = Object.create(t && t.prototype, { constructor: { value: A, writable: !0, configurable: !0 } })), t && U(A, t);
            }
            function W(A) {
                return (W = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (t) {
                          return t.__proto__ || Object.getPrototypeOf(t);
                      })(A);
            }
            function U(A, t) {
                return (U =
                    Object.setPrototypeOf ||
                    function (e, i) {
                        return (e.__proto__ = i), e;
                    })(A, t);
            }
            function dt(A, t) {
                if (t && ("object" == typeof t || "function" == typeof t)) return t;
                if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
                return (function (e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e;
                })(A);
            }
            function V(A) {
                var t = (function () {
                    if ("undefined" == typeof Reflect || !Reflect.construct || Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
                    } catch (e) {
                        return !1;
                    }
                })();
                return function () {
                    var e,
                        i = W(A);
                    if (t) {
                        var a = W(this).constructor;
                        e = Reflect.construct(i, arguments, a);
                    } else e = i.apply(this, arguments);
                    return dt(this, e);
                };
            }
            function Z(A, t) {
                return (
                    (function (e) {
                        if (Array.isArray(e)) return e;
                    })(A) ||
                    (function (e, i) {
                        var a = null == e ? null : ("undefined" != typeof Symbol && e[Symbol.iterator]) || e["@@iterator"];
                        if (null != a) {
                            var s,
                                n,
                                o = [],
                                r = !0,
                                d = !1;
                            try {
                                for (a = a.call(e); !(r = (s = a.next()).done) && (o.push(s.value), !i || o.length !== i); r = !0);
                            } catch (c) {
                                (d = !0), (n = c);
                            } finally {
                                try {
                                    r || null == a.return || a.return();
                                } finally {
                                    if (d) throw n;
                                }
                            }
                            return o;
                        }
                    })(A, t) ||
                    rt(A, t) ||
                    (function () {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    })()
                );
            }
            function G(A) {
                return (
                    (function (t) {
                        if (Array.isArray(t)) return nt(t);
                    })(A) ||
                    (function (t) {
                        if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
                    })(A) ||
                    rt(A) ||
                    (function () {
                        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    })()
                );
            }
            function rt(A, t) {
                if (A) {
                    if ("string" == typeof A) return nt(A, t);
                    var e = Object.prototype.toString.call(A).slice(8, -1);
                    return "Object" === e && A.constructor && (e = A.constructor.name), "Map" === e || "Set" === e ? Array.from(A) : "Arguments" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? nt(A, t) : void 0;
                }
            }
            function nt(A, t) {
                (null == t || t > A.length) && (t = A.length);
                for (var e = 0, i = new Array(t); e < t; e++) i[e] = A[e];
                return i;
            }
            var z = (function () {
                    function A() {
                        B(this, A);
                    }
                    return (
                        m(
                            A,
                            [
                                {
                                    key: "shadeRGBColor",
                                    value: function (t, e) {
                                        var i = e.split(","),
                                            a = t < 0 ? 0 : 255,
                                            s = t < 0 ? -1 * t : t,
                                            n = parseInt(i[0].slice(4), 10),
                                            o = parseInt(i[1], 10),
                                            r = parseInt(i[2], 10);
                                        return "rgb(" + (Math.round((a - n) * s) + n) + "," + (Math.round((a - o) * s) + o) + "," + (Math.round((a - r) * s) + r) + ")";
                                    },
                                },
                                {
                                    key: "shadeHexColor",
                                    value: function (t, e) {
                                        var i = parseInt(e.slice(1), 16),
                                            a = t < 0 ? 0 : 255,
                                            s = t < 0 ? -1 * t : t,
                                            n = i >> 16,
                                            o = (i >> 8) & 255,
                                            r = 255 & i;
                                        return "#" + (16777216 + 65536 * (Math.round((a - n) * s) + n) + 256 * (Math.round((a - o) * s) + o) + (Math.round((a - r) * s) + r)).toString(16).slice(1);
                                    },
                                },
                                {
                                    key: "shadeColor",
                                    value: function (t, e) {
                                        return A.isColorHex(e) ? this.shadeHexColor(t, e) : this.shadeRGBColor(t, e);
                                    },
                                },
                            ],
                            [
                                {
                                    key: "bind",
                                    value: function (t, e) {
                                        return function () {
                                            return t.apply(e, arguments);
                                        };
                                    },
                                },
                                {
                                    key: "isObject",
                                    value: function (t) {
                                        return t && "object" === _(t) && !Array.isArray(t) && null != t;
                                    },
                                },
                                {
                                    key: "is",
                                    value: function (t, e) {
                                        return Object.prototype.toString.call(e) === "[object " + t + "]";
                                    },
                                },
                                {
                                    key: "listToArray",
                                    value: function (t) {
                                        var e,
                                            i = [];
                                        for (e = 0; e < t.length; e++) i[e] = t[e];
                                        return i;
                                    },
                                },
                                {
                                    key: "extend",
                                    value: function (t, e) {
                                        var i = this;
                                        "function" != typeof Object.assign &&
                                            (Object.assign = function (s) {
                                                if (null == s) throw new TypeError("Cannot convert undefined or null to object");
                                                for (var n = Object(s), o = 1; o < arguments.length; o++) {
                                                    var r = arguments[o];
                                                    if (null != r) for (var d in r) r.hasOwnProperty(d) && (n[d] = r[d]);
                                                }
                                                return n;
                                            });
                                        var a = Object.assign({}, t);
                                        return (
                                            this.isObject(t) &&
                                                this.isObject(e) &&
                                                Object.keys(e).forEach(function (s) {
                                                    i.isObject(e[s]) && s in t ? (a[s] = i.extend(t[s], e[s])) : Object.assign(a, q({}, s, e[s]));
                                                }),
                                            a
                                        );
                                    },
                                },
                                {
                                    key: "extendArray",
                                    value: function (t, e) {
                                        var i = [];
                                        return (
                                            t.map(function (a) {
                                                i.push(A.extend(e, a));
                                            }),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "monthMod",
                                    value: function (t) {
                                        return t % 12;
                                    },
                                },
                                {
                                    key: "clone",
                                    value: function (t) {
                                        if (A.is("Array", t)) {
                                            for (var e = [], i = 0; i < t.length; i++) e[i] = this.clone(t[i]);
                                            return e;
                                        }
                                        if (A.is("Null", t)) return null;
                                        if (A.is("Date", t)) return t;
                                        if ("object" === _(t)) {
                                            var a = {};
                                            for (var s in t) t.hasOwnProperty(s) && (a[s] = this.clone(t[s]));
                                            return a;
                                        }
                                        return t;
                                    },
                                },
                                {
                                    key: "log10",
                                    value: function (t) {
                                        return Math.log(t) / Math.LN10;
                                    },
                                },
                                {
                                    key: "roundToBase10",
                                    value: function (t) {
                                        return Math.pow(10, Math.floor(Math.log10(t)));
                                    },
                                },
                                {
                                    key: "roundToBase",
                                    value: function (t, e) {
                                        return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));
                                    },
                                },
                                {
                                    key: "parseNumber",
                                    value: function (t) {
                                        return null === t ? t : parseFloat(t);
                                    },
                                },
                                {
                                    key: "stripNumber",
                                    value: function (t) {
                                        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
                                        return parseFloat(t.toPrecision(e));
                                    },
                                },
                                {
                                    key: "randomId",
                                    value: function () {
                                        return (Math.random() + 1).toString(36).substring(4);
                                    },
                                },
                                {
                                    key: "noExponents",
                                    value: function (t) {
                                        var e = String(t).split(/[eE]/);
                                        if (1 === e.length) return e[0];
                                        var i = "",
                                            a = t < 0 ? "-" : "",
                                            s = e[0].replace(".", ""),
                                            n = Number(e[1]) + 1;
                                        if (n < 0) {
                                            for (i = a + "0."; n++; ) i += "0";
                                            return i + s.replace(/^-/, "");
                                        }
                                        for (n -= s.length; n--; ) i += "0";
                                        return s + i;
                                    },
                                },
                                {
                                    key: "getDimensions",
                                    value: function (t) {
                                        var e = getComputedStyle(t, null),
                                            i = t.clientHeight,
                                            a = t.clientWidth;
                                        return (i -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom)), [(a -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight)), i];
                                    },
                                },
                                {
                                    key: "getBoundingClientRect",
                                    value: function (t) {
                                        var e = t.getBoundingClientRect();
                                        return { top: e.top, right: e.right, bottom: e.bottom, left: e.left, width: t.clientWidth, height: t.clientHeight, x: e.left, y: e.top };
                                    },
                                },
                                {
                                    key: "getLargestStringFromArr",
                                    value: function (t) {
                                        return t.reduce(function (e, i) {
                                            return (
                                                Array.isArray(i) &&
                                                    (i = i.reduce(function (a, s) {
                                                        return a.length > s.length ? a : s;
                                                    })),
                                                e.length > i.length ? e : i
                                            );
                                        }, 0);
                                    },
                                },
                                {
                                    key: "hexToRgba",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999",
                                            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
                                        "#" !== t.substring(0, 1) && (t = "#999999");
                                        var i = t.replace("#", "");
                                        i = i.match(new RegExp("(.{" + i.length / 3 + "})", "g"));
                                        for (var a = 0; a < i.length; a++) i[a] = parseInt(1 === i[a].length ? i[a] + i[a] : i[a], 16);
                                        return void 0 !== e && i.push(e), "rgba(" + i.join(",") + ")";
                                    },
                                },
                                {
                                    key: "getOpacityFromRGBA",
                                    value: function (t) {
                                        return parseFloat(t.replace(/^.*,(.+)\)/, "$1"));
                                    },
                                },
                                {
                                    key: "rgb2hex",
                                    value: function (t) {
                                        return (t = t.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t.length
                                            ? "#" + ("0" + parseInt(t[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t[3], 10).toString(16)).slice(-2)
                                            : "";
                                    },
                                },
                                {
                                    key: "isColorHex",
                                    value: function (t) {
                                        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t);
                                    },
                                },
                                {
                                    key: "getPolygonPos",
                                    value: function (t, e) {
                                        for (var i = [], a = (2 * Math.PI) / e, s = 0; s < e; s++) {
                                            var n = {};
                                            (n.x = t * Math.sin(s * a)), (n.y = -t * Math.cos(s * a)), i.push(n);
                                        }
                                        return i;
                                    },
                                },
                                {
                                    key: "polarToCartesian",
                                    value: function (t, e, i, a) {
                                        var s = ((a - 90) * Math.PI) / 180;
                                        return { x: t + i * Math.cos(s), y: e + i * Math.sin(s) };
                                    },
                                },
                                {
                                    key: "escapeString",
                                    value: function (t) {
                                        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x",
                                            i = t.toString().slice();
                                        return i.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e);
                                    },
                                },
                                {
                                    key: "negToZero",
                                    value: function (t) {
                                        return t < 0 ? 0 : t;
                                    },
                                },
                                {
                                    key: "moveIndexInArray",
                                    value: function (t, e, i) {
                                        if (i >= t.length) for (var a = i - t.length + 1; a--; ) t.push(void 0);
                                        return t.splice(i, 0, t.splice(e, 1)[0]), t;
                                    },
                                },
                                {
                                    key: "extractNumber",
                                    value: function (t) {
                                        return parseFloat(t.replace(/[^\d.]*/g, ""));
                                    },
                                },
                                {
                                    key: "findAncestor",
                                    value: function (t, e) {
                                        for (; (t = t.parentElement) && !t.classList.contains(e); );
                                        return t;
                                    },
                                },
                                {
                                    key: "setELstyles",
                                    value: function (t, e) {
                                        for (var i in e) e.hasOwnProperty(i) && (t.style.key = e[i]);
                                    },
                                },
                                {
                                    key: "isNumber",
                                    value: function (t) {
                                        return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10));
                                    },
                                },
                                {
                                    key: "isFloat",
                                    value: function (t) {
                                        return Number(t) === t && t % 1 != 0;
                                    },
                                },
                                {
                                    key: "isSafari",
                                    value: function () {
                                        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
                                    },
                                },
                                {
                                    key: "isFirefox",
                                    value: function () {
                                        return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
                                    },
                                },
                                {
                                    key: "isIE11",
                                    value: function () {
                                        if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1) return !0;
                                    },
                                },
                                {
                                    key: "isIE",
                                    value: function () {
                                        var t = window.navigator.userAgent,
                                            e = t.indexOf("MSIE ");
                                        if (e > 0) return parseInt(t.substring(e + 5, t.indexOf(".", e)), 10);
                                        if (t.indexOf("Trident/") > 0) {
                                            var i = t.indexOf("rv:");
                                            return parseInt(t.substring(i + 3, t.indexOf(".", i)), 10);
                                        }
                                        var a = t.indexOf("Edge/");
                                        return a > 0 && parseInt(t.substring(a + 5, t.indexOf(".", a)), 10);
                                    },
                                },
                            ]
                        ),
                        A
                    );
                })(),
                j = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), this.setEasingFunctions();
                    }
                    return (
                        m(A, [
                            {
                                key: "setEasingFunctions",
                                value: function () {
                                    var t;
                                    if (!this.w.globals.easing) {
                                        switch (this.w.config.chart.animations.easing) {
                                            case "linear":
                                                t = "-";
                                                break;
                                            case "easein":
                                                t = "<";
                                                break;
                                            case "easeout":
                                                t = ">";
                                                break;
                                            case "easeinout":
                                            default:
                                                t = "<>";
                                                break;
                                            case "swing":
                                                t = function (e) {
                                                    var i = 1.70158;
                                                    return (e -= 1) * e * ((i + 1) * e + i) + 1;
                                                };
                                                break;
                                            case "bounce":
                                                t = function (e) {
                                                    return e < 1 / 2.75
                                                        ? 7.5625 * e * e
                                                        : e < 2 / 2.75
                                                        ? 7.5625 * (e -= 1.5 / 2.75) * e + 0.75
                                                        : e < 2.5 / 2.75
                                                        ? 7.5625 * (e -= 2.25 / 2.75) * e + 0.9375
                                                        : 7.5625 * (e -= 2.625 / 2.75) * e + 0.984375;
                                                };
                                                break;
                                            case "elastic":
                                                t = function (e) {
                                                    return e === !!e ? e : Math.pow(2, -10 * e) * Math.sin(((e - 0.075) * (2 * Math.PI)) / 0.3) + 1;
                                                };
                                        }
                                        this.w.globals.easing = t;
                                    }
                                },
                            },
                            {
                                key: "animateLine",
                                value: function (t, e, i, a) {
                                    t.attr(e).animate(a).attr(i);
                                },
                            },
                            {
                                key: "animateMarker",
                                value: function (t, e, i, a, s, n) {
                                    e || (e = 0),
                                        t
                                            .attr({ r: e, width: e, height: e })
                                            .animate(a, s)
                                            .attr({ r: i, width: i.width, height: i.height })
                                            .afterAll(function () {
                                                n();
                                            });
                                },
                            },
                            {
                                key: "animateCircle",
                                value: function (t, e, i, a, s) {
                                    t.attr({ r: e.r, cx: e.cx, cy: e.cy }).animate(a, s).attr({ r: i.r, cx: i.cx, cy: i.cy });
                                },
                            },
                            {
                                key: "animateRect",
                                value: function (t, e, i, a, s) {
                                    t.attr(e)
                                        .animate(a)
                                        .attr(i)
                                        .afterAll(function () {
                                            return s();
                                        });
                                },
                            },
                            {
                                key: "animatePathsGradually",
                                value: function (t) {
                                    var c = this.w,
                                        g = 0;
                                    c.config.chart.animations.animateGradually.enabled && (g = c.config.chart.animations.animateGradually.delay),
                                        c.config.chart.animations.dynamicAnimation.enabled && c.globals.dataChanged && "bar" !== c.config.chart.type && (g = 0),
                                        this.morphSVG(t.el, t.realIndex, t.j, "line" !== c.config.chart.type || c.globals.comboCharts ? t.fill : "stroke", t.pathFrom, t.pathTo, t.speed, t.delay * g);
                                },
                            },
                            {
                                key: "showDelayedElements",
                                value: function () {
                                    this.w.globals.delayedElements.forEach(function (t) {
                                        var e = t.el;
                                        e.classList.remove("apexcharts-element-hidden"), e.classList.add("apexcharts-hidden-element-shown");
                                    });
                                },
                            },
                            {
                                key: "animationCompleted",
                                value: function (t) {
                                    var e = this.w;
                                    e.globals.animationEnded ||
                                        ((e.globals.animationEnded = !0), this.showDelayedElements(), "function" == typeof e.config.chart.events.animationEnd && e.config.chart.events.animationEnd(this.ctx, { el: t, w: e }));
                                },
                            },
                            {
                                key: "morphSVG",
                                value: function (t, e, i, a, s, n, o, r) {
                                    var d = this,
                                        c = this.w;
                                    s || (s = t.attr("pathFrom")), n || (n = t.attr("pathTo"));
                                    var g = function (u) {
                                        return "radar" === c.config.chart.type && (o = 1), "M 0 ".concat(c.globals.gridHeight);
                                    };
                                    (!s || s.indexOf("undefined") > -1 || s.indexOf("NaN") > -1) && (s = g()),
                                        (!n || n.indexOf("undefined") > -1 || n.indexOf("NaN") > -1) && (n = g()),
                                        c.globals.shouldAnimate || (o = 1),
                                        t
                                            .plot(s)
                                            .animate(1, c.globals.easing, r)
                                            .plot(s)
                                            .animate(o, c.globals.easing, r)
                                            .plot(n)
                                            .afterAll(function () {
                                                z.isNumber(i)
                                                    ? i === c.globals.series[c.globals.maxValsInArrayIndex].length - 2 && c.globals.shouldAnimate && d.animationCompleted(t)
                                                    : "none" !== a && c.globals.shouldAnimate && ((!c.globals.comboCharts && e === c.globals.series.length - 1) || c.globals.comboCharts) && d.animationCompleted(t),
                                                    d.showDelayedElements();
                                            });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                H = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "getDefaultFilter",
                                value: function (t, e) {
                                    var i = this.w;
                                    t.unfilter(!0),
                                        new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"),
                                        "none" !== i.config.states.normal.filter
                                            ? this.applyFilter(t, e, i.config.states.normal.filter.type, i.config.states.normal.filter.value)
                                            : i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);
                                },
                            },
                            {
                                key: "addNormalFilter",
                                value: function (t, e) {
                                    var i = this.w;
                                    i.config.chart.dropShadow.enabled && !t.node.classList.contains("apexcharts-marker") && this.dropShadow(t, i.config.chart.dropShadow, e);
                                },
                            },
                            {
                                key: "addLightenFilter",
                                value: function (t, e, i) {
                                    var a = this,
                                        s = this.w,
                                        n = i.intensity;
                                    t.unfilter(!0),
                                        new window.SVG.Filter(),
                                        t.filter(function (o) {
                                            var r = s.config.chart.dropShadow;
                                            (r.enabled ? a.addShadow(o, e, r) : o).componentTransfer({ rgb: { type: "linear", slope: 1.5, intercept: n } });
                                        }),
                                        t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"),
                                        this._scaleFilterSize(t.filterer.node);
                                },
                            },
                            {
                                key: "addDarkenFilter",
                                value: function (t, e, i) {
                                    var a = this,
                                        s = this.w,
                                        n = i.intensity;
                                    t.unfilter(!0),
                                        new window.SVG.Filter(),
                                        t.filter(function (o) {
                                            var r = s.config.chart.dropShadow;
                                            (r.enabled ? a.addShadow(o, e, r) : o).componentTransfer({ rgb: { type: "linear", slope: n } });
                                        }),
                                        t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"),
                                        this._scaleFilterSize(t.filterer.node);
                                },
                            },
                            {
                                key: "applyFilter",
                                value: function (t, e, i) {
                                    var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
                                    switch (i) {
                                        case "none":
                                            this.addNormalFilter(t, e);
                                            break;
                                        case "lighten":
                                            this.addLightenFilter(t, e, { intensity: a });
                                            break;
                                        case "darken":
                                            this.addDarkenFilter(t, e, { intensity: a });
                                    }
                                },
                            },
                            {
                                key: "addShadow",
                                value: function (t, e, i) {
                                    var a = i.blur,
                                        s = i.top,
                                        n = i.left,
                                        o = i.color,
                                        r = i.opacity,
                                        d = t
                                            .flood(Array.isArray(o) ? o[e] : o, r)
                                            .composite(t.sourceAlpha, "in")
                                            .offset(n, s)
                                            .gaussianBlur(a)
                                            .merge(t.source);
                                    return t.blend(t.source, d);
                                },
                            },
                            {
                                key: "dropShadow",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                                        a = e.top,
                                        s = e.left,
                                        n = e.blur,
                                        o = e.color,
                                        r = e.opacity,
                                        d = e.noUserSpaceOnUse,
                                        c = this.w;
                                    return (
                                        t.unfilter(!0),
                                        (z.isIE() && "radialBar" === c.config.chart.type) ||
                                            ((o = Array.isArray(o) ? o[i] : o),
                                            t.filter(function (g) {
                                                var u;
                                                (u =
                                                    z.isSafari() || z.isFirefox() || z.isIE()
                                                        ? g.flood(o, r).composite(g.sourceAlpha, "in").offset(s, a).gaussianBlur(n)
                                                        : g.flood(o, r).composite(g.sourceAlpha, "in").offset(s, a).gaussianBlur(n).merge(g.source)),
                                                    g.blend(g.source, u);
                                            }),
                                            d || t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"),
                                            this._scaleFilterSize(t.filterer.node)),
                                        t
                                    );
                                },
                            },
                            {
                                key: "setSelectionFilter",
                                value: function (t, e, i) {
                                    var a = this.w;
                                    if (void 0 !== a.globals.selectedDataPoints[e] && a.globals.selectedDataPoints[e].indexOf(i) > -1) {
                                        t.node.setAttribute("selected", !0);
                                        var s = a.config.states.active.filter;
                                        "none" !== s && this.applyFilter(t, e, s.type, s.value);
                                    }
                                },
                            },
                            {
                                key: "_scaleFilterSize",
                                value: function (t) {
                                    !(function (e) {
                                        for (var i in e) e.hasOwnProperty(i) && t.setAttribute(i, e[i]);
                                    })({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                E = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(
                            A,
                            [
                                {
                                    key: "roundPathCorners",
                                    value: function (t, e) {
                                        function i(L, k, I) {
                                            var Y = k.x - L.x,
                                                D = k.y - L.y,
                                                O = Math.sqrt(Y * Y + D * D);
                                            return a(L, k, Math.min(1, I / O));
                                        }
                                        function a(L, k, I) {
                                            return { x: L.x + (k.x - L.x) * I, y: L.y + (k.y - L.y) * I };
                                        }
                                        function s(L, k) {
                                            L.length > 2 && ((L[L.length - 2] = k.x), (L[L.length - 1] = k.y));
                                        }
                                        function n(L) {
                                            return { x: parseFloat(L[L.length - 2]), y: parseFloat(L[L.length - 1]) };
                                        }
                                        t.indexOf("NaN") > -1 && (t = "");
                                        var o = t
                                                .split(/[,\s]/)
                                                .reduce(function (L, k) {
                                                    var I = k.match("([a-zA-Z])(.+)");
                                                    return I ? (L.push(I[1]), L.push(I[2])) : L.push(k), L;
                                                }, [])
                                                .reduce(function (L, k) {
                                                    return parseFloat(k) == k && L.length ? L[L.length - 1].push(k) : L.push([k]), L;
                                                }, []),
                                            r = [];
                                        if (o.length > 1) {
                                            var d = n(o[0]),
                                                c = null;
                                            "Z" == o[o.length - 1][0] && o[0].length > 2 && (o[o.length - 1] = c = ["L", d.x, d.y]), r.push(o[0]);
                                            for (var g = 1; g < o.length; g++) {
                                                var u = r[r.length - 1],
                                                    p = o[g],
                                                    x = p == c ? o[1] : o[g + 1];
                                                if (x && u && u.length > 2 && "L" == p[0] && x.length > 2 && "L" == x[0]) {
                                                    var y,
                                                        C,
                                                        w = n(u),
                                                        P = n(p),
                                                        l = n(x);
                                                    (y = i(P, w, e)), (C = i(P, l, e)), s(p, y), (p.origPoint = P), r.push(p);
                                                    var f = a(y, P, 0.5),
                                                        v = a(P, C, 0.5),
                                                        S = ["C", f.x, f.y, v.x, v.y, C.x, C.y];
                                                    (S.origPoint = P), r.push(S);
                                                } else r.push(p);
                                            }
                                            if (c) {
                                                var M = n(r[r.length - 1]);
                                                r.push(["Z"]), s(r[0], M);
                                            }
                                        } else r = o;
                                        return r.reduce(function (L, k) {
                                            return L + k.join(" ") + " ";
                                        }, "");
                                    },
                                },
                                {
                                    key: "drawLine",
                                    value: function (t, e, i, a) {
                                        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8",
                                            n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,
                                            o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
                                            r = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt";
                                        return this.w.globals.dom.Paper.line().attr({ x1: t, y1: e, x2: i, y2: a, stroke: s, "stroke-dasharray": n, "stroke-width": o, "stroke-linecap": r });
                                    },
                                },
                                {
                                    key: "drawRect",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
                                            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                                            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                                            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
                                            n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe",
                                            o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1,
                                            r = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
                                            d = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,
                                            c = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,
                                            g = this.w.globals.dom.Paper.rect();
                                        return (
                                            g.attr({ x: t, y: e, width: i > 0 ? i : 0, height: a > 0 ? a : 0, rx: s, ry: s, opacity: o, "stroke-width": null !== r ? r : 0, stroke: null !== d ? d : "none", "stroke-dasharray": c }),
                                            g.node.setAttribute("fill", n),
                                            g
                                        );
                                    },
                                },
                                {
                                    key: "drawPolygon",
                                    value: function (t) {
                                        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1",
                                            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,
                                            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none";
                                        return this.w.globals.dom.Paper.polygon(t).attr({ fill: a, stroke: e, "stroke-width": i });
                                    },
                                },
                                {
                                    key: "drawCircle",
                                    value: function (t) {
                                        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                                        t < 0 && (t = 0);
                                        var i = this.w.globals.dom.Paper.circle(2 * t);
                                        return null !== e && i.attr(e), i;
                                    },
                                },
                                {
                                    key: "drawPath",
                                    value: function (t) {
                                        var e = t.d,
                                            i = void 0 === e ? "" : e,
                                            a = t.stroke,
                                            s = void 0 === a ? "#a8a8a8" : a,
                                            n = t.strokeWidth,
                                            o = void 0 === n ? 1 : n,
                                            r = t.fill,
                                            d = t.fillOpacity,
                                            c = void 0 === d ? 1 : d,
                                            g = t.strokeOpacity,
                                            u = void 0 === g ? 1 : g,
                                            p = t.classes,
                                            x = t.strokeLinecap,
                                            y = void 0 === x ? null : x,
                                            C = t.strokeDashArray,
                                            w = void 0 === C ? 0 : C,
                                            P = this.w;
                                        return (
                                            null === y && (y = P.config.stroke.lineCap),
                                            (i.indexOf("undefined") > -1 || i.indexOf("NaN") > -1) && (i = "M 0 ".concat(P.globals.gridHeight)),
                                            P.globals.dom.Paper.path(i).attr({ fill: r, "fill-opacity": c, stroke: s, "stroke-opacity": u, "stroke-linecap": y, "stroke-width": o, "stroke-dasharray": w, class: p })
                                        );
                                    },
                                },
                                {
                                    key: "group",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                            e = this.w.globals.dom.Paper.group();
                                        return null !== t && e.attr(t), e;
                                    },
                                },
                                {
                                    key: "move",
                                    value: function (t, e) {
                                        return ["M", t, e].join(" ");
                                    },
                                },
                                {
                                    key: "line",
                                    value: function (t, e) {
                                        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                            a = null;
                                        return null === i ? (a = [" L", t, e].join(" ")) : "H" === i ? (a = [" H", t].join(" ")) : "V" === i && (a = [" V", e].join(" ")), a;
                                    },
                                },
                                {
                                    key: "curve",
                                    value: function (t, e, i, a, s, n) {
                                        return ["C", t, e, i, a, s, n].join(" ");
                                    },
                                },
                                {
                                    key: "quadraticCurve",
                                    value: function (t, e, i, a) {
                                        return ["Q", t, e, i, a].join(" ");
                                    },
                                },
                                {
                                    key: "arc",
                                    value: function (t, e, i, a, s, n, o) {
                                        var r = "A";
                                        arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (r = "a");
                                        var d = [r, t, e, i, a, s, n, o].join(" ");
                                        return d;
                                    },
                                },
                                {
                                    key: "renderPaths",
                                    value: function (t) {
                                        var e,
                                            i = t.j,
                                            a = t.realIndex,
                                            s = t.pathFrom,
                                            n = t.pathTo,
                                            o = t.stroke,
                                            r = t.strokeWidth,
                                            d = t.strokeLinecap,
                                            c = t.fill,
                                            g = t.animationDelay,
                                            u = t.initialSpeed,
                                            p = t.dataChangeSpeed,
                                            x = t.className,
                                            y = t.shouldClipToGrid,
                                            C = void 0 === y || y,
                                            w = t.bindEventsOnPaths,
                                            P = void 0 === w || w,
                                            l = t.drawShadow,
                                            f = void 0 === l || l,
                                            v = this.w,
                                            S = new H(this.ctx),
                                            M = new j(this.ctx),
                                            L = this.w.config.chart.animations.enabled,
                                            k = L && this.w.config.chart.animations.dynamicAnimation.enabled,
                                            I = !!((L && !v.globals.resized) || (k && v.globals.dataChanged && v.globals.shouldAnimate));
                                        I ? (e = s) : ((e = n), (v.globals.animationEnded = !0));
                                        var D,
                                            Y = v.config.stroke.dashArray;
                                        D = Array.isArray(Y) ? Y[a] : v.config.stroke.dashArray;
                                        var O = this.drawPath({ d: e, stroke: o, strokeWidth: r, fill: c, fillOpacity: 1, classes: x, strokeLinecap: d, strokeDashArray: D });
                                        O.attr("index", a),
                                            C && O.attr({ "clip-path": "url(#gridRectMask".concat(v.globals.cuid, ")") }),
                                            "none" !== v.config.states.normal.filter.type
                                                ? S.getDefaultFilter(O, a)
                                                : v.config.chart.dropShadow.enabled &&
                                                  f &&
                                                  (!v.config.chart.dropShadow.enabledOnSeries || (v.config.chart.dropShadow.enabledOnSeries && -1 !== v.config.chart.dropShadow.enabledOnSeries.indexOf(a))) &&
                                                  S.dropShadow(O, v.config.chart.dropShadow, a),
                                            P &&
                                                (O.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, O)),
                                                O.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, O)),
                                                O.node.addEventListener("mousedown", this.pathMouseDown.bind(this, O))),
                                            O.attr({ pathTo: n, pathFrom: s });
                                        var Q = { el: O, j: i, realIndex: a, pathFrom: s, pathTo: n, fill: c, strokeWidth: r, delay: g };
                                        return (
                                            !L || v.globals.resized || v.globals.dataChanged ? (!v.globals.resized && v.globals.dataChanged) || M.showDelayedElements() : M.animatePathsGradually(F(F({}, Q), {}, { speed: u })),
                                            v.globals.dataChanged && k && I && M.animatePathsGradually(F(F({}, Q), {}, { speed: p })),
                                            O
                                        );
                                    },
                                },
                                {
                                    key: "drawPattern",
                                    value: function (t, e, i) {
                                        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8",
                                            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                                        return this.w.globals.dom.Paper.pattern(e, i, function (n) {
                                            "horizontalLines" === t
                                                ? n.line(0, 0, i, 0).stroke({ color: a, width: s + 1 })
                                                : "verticalLines" === t
                                                ? n.line(0, 0, 0, e).stroke({ color: a, width: s + 1 })
                                                : "slantedLines" === t
                                                ? n.line(0, 0, e, i).stroke({ color: a, width: s })
                                                : "squares" === t
                                                ? n.rect(e, i).fill("none").stroke({ color: a, width: s })
                                                : "circles" === t && n.circle(e).fill("none").stroke({ color: a, width: s });
                                        });
                                    },
                                },
                                {
                                    key: "drawGradient",
                                    value: function (t, e, i, a, s) {
                                        var n,
                                            o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
                                            r = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
                                            d = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
                                            c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,
                                            g = this.w;
                                        e.length < 9 && 0 === e.indexOf("#") && (e = z.hexToRgba(e, a)), i.length < 9 && 0 === i.indexOf("#") && (i = z.hexToRgba(i, s));
                                        var u = 0,
                                            p = 1,
                                            x = 1,
                                            y = null;
                                        null !== r && ((u = void 0 !== r[0] ? r[0] / 100 : 0), (p = void 0 !== r[1] ? r[1] / 100 : 1), (x = void 0 !== r[2] ? r[2] / 100 : 1), (y = void 0 !== r[3] ? r[3] / 100 : null));
                                        var C = !("donut" !== g.config.chart.type && "pie" !== g.config.chart.type && "polarArea" !== g.config.chart.type && "bubble" !== g.config.chart.type);
                                        if (
                                            ((n = g.globals.dom.Paper.gradient(
                                                C ? "radial" : "linear",
                                                null === d || 0 === d.length
                                                    ? function (l) {
                                                          l.at(u, e, a), l.at(p, i, s), l.at(x, i, s), null !== y && l.at(y, e, a);
                                                      }
                                                    : function (l) {
                                                          (Array.isArray(d[c]) ? d[c] : d).forEach(function (f) {
                                                              l.at(f.offset / 100, f.color, f.opacity);
                                                          });
                                                      }
                                            )),
                                            C)
                                        ) {
                                            var w = g.globals.gridWidth / 2,
                                                P = g.globals.gridHeight / 2;
                                            n.attr("bubble" !== g.config.chart.type ? { gradientUnits: "userSpaceOnUse", cx: w, cy: P, r: o } : { cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
                                        } else "vertical" === t ? n.from(0, 0).to(0, 1) : "diagonal" === t ? n.from(0, 0).to(1, 1) : "horizontal" === t ? n.from(0, 1).to(1, 1) : "diagonal2" === t && n.from(1, 0).to(0, 1);
                                        return n;
                                    },
                                },
                                {
                                    key: "getTextBasedOnMaxWidth",
                                    value: function (t) {
                                        var e = t.text,
                                            i = t.maxWidth,
                                            n = this.getTextRects(e, t.fontSize, t.fontFamily),
                                            r = Math.floor(i / (n.width / e.length));
                                        return i < n.width ? e.slice(0, r - 3) + "..." : e;
                                    },
                                },
                                {
                                    key: "drawText",
                                    value: function (t) {
                                        var e = this,
                                            i = t.x,
                                            a = t.y,
                                            s = t.text,
                                            n = t.textAnchor,
                                            o = t.fontSize,
                                            r = t.fontFamily,
                                            d = t.fontWeight,
                                            c = t.foreColor,
                                            g = t.opacity,
                                            u = t.maxWidth,
                                            p = t.cssClass,
                                            x = void 0 === p ? "" : p,
                                            y = t.isPlainText,
                                            C = void 0 === y || y,
                                            w = this.w;
                                        void 0 === s && (s = "");
                                        var P = s;
                                        n || (n = "start"), (c && c.length) || (c = w.config.chart.foreColor), (d = d || "regular");
                                        var l,
                                            f = { maxWidth: u, fontSize: (o = o || "11px"), fontFamily: (r = r || w.config.chart.fontFamily) };
                                        return (
                                            Array.isArray(s)
                                                ? (l = w.globals.dom.Paper.text(function (v) {
                                                      for (var S = 0; S < s.length; S++) (P = s[S]), u && (P = e.getTextBasedOnMaxWidth(F({ text: s[S] }, f))), 0 === S ? v.tspan(P) : v.tspan(P).newLine();
                                                  }))
                                                : (u && (P = this.getTextBasedOnMaxWidth(F({ text: s }, f))),
                                                  (l = C
                                                      ? w.globals.dom.Paper.plain(s)
                                                      : w.globals.dom.Paper.text(function (v) {
                                                            return v.tspan(P);
                                                        }))),
                                            l.attr({ x: i, y: a, "text-anchor": n, "dominant-baseline": "auto", "font-size": o, "font-family": r, "font-weight": d, fill: c, class: "apexcharts-text " + x }),
                                            (l.node.style.fontFamily = r),
                                            (l.node.style.opacity = g),
                                            l
                                        );
                                    },
                                },
                                {
                                    key: "drawMarker",
                                    value: function (t, e, i) {
                                        t = t || 0;
                                        var a = i.pSize || 0,
                                            s = null;
                                        if ("square" === i.shape || "rect" === i.shape) {
                                            var n = void 0 === i.pRadius ? a / 2 : i.pRadius;
                                            (null !== e && a) || ((a = 0), (n = 0));
                                            var o = 1.2 * a + n,
                                                r = this.drawRect(o, o, o, o, n);
                                            r.attr({
                                                x: t - o / 2,
                                                y: e - o / 2,
                                                cx: t,
                                                cy: e,
                                                class: i.class ? i.class : "",
                                                fill: i.pointFillColor,
                                                "fill-opacity": i.pointFillOpacity ? i.pointFillOpacity : 1,
                                                stroke: i.pointStrokeColor,
                                                "stroke-width": i.pointStrokeWidth ? i.pointStrokeWidth : 0,
                                                "stroke-opacity": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1,
                                            }),
                                                (s = r);
                                        } else
                                            ("circle" !== i.shape && i.shape) ||
                                                (z.isNumber(e) || ((a = 0), (e = 0)),
                                                (s = this.drawCircle(a, {
                                                    cx: t,
                                                    cy: e,
                                                    class: i.class ? i.class : "",
                                                    stroke: i.pointStrokeColor,
                                                    fill: i.pointFillColor,
                                                    "fill-opacity": i.pointFillOpacity ? i.pointFillOpacity : 1,
                                                    "stroke-width": i.pointStrokeWidth ? i.pointStrokeWidth : 0,
                                                    "stroke-opacity": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1,
                                                })));
                                        return s;
                                    },
                                },
                                {
                                    key: "pathMouseEnter",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new H(this.ctx),
                                            s = parseInt(t.node.getAttribute("index"), 10),
                                            n = parseInt(t.node.getAttribute("j"), 10);
                                        if (
                                            ("function" == typeof i.config.chart.events.dataPointMouseEnter && i.config.chart.events.dataPointMouseEnter(e, this.ctx, { seriesIndex: s, dataPointIndex: n, w: i }),
                                            this.ctx.events.fireEvent("dataPointMouseEnter", [e, this.ctx, { seriesIndex: s, dataPointIndex: n, w: i }]),
                                            ("none" === i.config.states.active.filter.type || "true" !== t.node.getAttribute("selected")) && "none" !== i.config.states.hover.filter.type && !i.globals.isTouchDevice)
                                        ) {
                                            var o = i.config.states.hover.filter;
                                            a.applyFilter(t, s, o.type, o.value);
                                        }
                                    },
                                },
                                {
                                    key: "pathMouseLeave",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new H(this.ctx),
                                            s = parseInt(t.node.getAttribute("index"), 10),
                                            n = parseInt(t.node.getAttribute("j"), 10);
                                        "function" == typeof i.config.chart.events.dataPointMouseLeave && i.config.chart.events.dataPointMouseLeave(e, this.ctx, { seriesIndex: s, dataPointIndex: n, w: i }),
                                            this.ctx.events.fireEvent("dataPointMouseLeave", [e, this.ctx, { seriesIndex: s, dataPointIndex: n, w: i }]),
                                            ("none" !== i.config.states.active.filter.type && "true" === t.node.getAttribute("selected")) || ("none" !== i.config.states.hover.filter.type && a.getDefaultFilter(t, s));
                                    },
                                },
                                {
                                    key: "pathMouseDown",
                                    value: function (t, e) {
                                        var i = this.w,
                                            a = new H(this.ctx),
                                            s = parseInt(t.node.getAttribute("index"), 10),
                                            n = parseInt(t.node.getAttribute("j"), 10),
                                            o = "false";
                                        if ("true" === t.node.getAttribute("selected")) {
                                            if ((t.node.setAttribute("selected", "false"), i.globals.selectedDataPoints[s].indexOf(n) > -1)) {
                                                var r = i.globals.selectedDataPoints[s].indexOf(n);
                                                i.globals.selectedDataPoints[s].splice(r, 1);
                                            }
                                        } else {
                                            if (!i.config.states.active.allowMultipleDataPointsSelection && i.globals.selectedDataPoints.length > 0) {
                                                i.globals.selectedDataPoints = [];
                                                var d = i.globals.dom.Paper.select(".apexcharts-series path").members,
                                                    c = i.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members,
                                                    g = function (x) {
                                                        Array.prototype.forEach.call(x, function (y) {
                                                            y.node.setAttribute("selected", "false"), a.getDefaultFilter(y, s);
                                                        });
                                                    };
                                                g(d), g(c);
                                            }
                                            t.node.setAttribute("selected", "true"), (o = "true"), void 0 === i.globals.selectedDataPoints[s] && (i.globals.selectedDataPoints[s] = []), i.globals.selectedDataPoints[s].push(n);
                                        }
                                        if ("true" === o) {
                                            var u = i.config.states.active.filter;
                                            if ("none" !== u) a.applyFilter(t, s, u.type, u.value);
                                            else if ("none" !== i.config.states.hover.filter && !i.globals.isTouchDevice) {
                                                var p = i.config.states.hover.filter;
                                                a.applyFilter(t, s, p.type, p.value);
                                            }
                                        } else
                                            "none" !== i.config.states.active.filter.type &&
                                                ("none" === i.config.states.hover.filter.type || i.globals.isTouchDevice ? a.getDefaultFilter(t, s) : a.applyFilter(t, s, (p = i.config.states.hover.filter).type, p.value));
                                        "function" == typeof i.config.chart.events.dataPointSelection &&
                                            i.config.chart.events.dataPointSelection(e, this.ctx, { selectedDataPoints: i.globals.selectedDataPoints, seriesIndex: s, dataPointIndex: n, w: i }),
                                            e && this.ctx.events.fireEvent("dataPointSelection", [e, this.ctx, { selectedDataPoints: i.globals.selectedDataPoints, seriesIndex: s, dataPointIndex: n, w: i }]);
                                    },
                                },
                                {
                                    key: "rotateAroundCenter",
                                    value: function (t) {
                                        var e = {};
                                        return t && "function" == typeof t.getBBox && (e = t.getBBox()), { x: e.x + e.width / 2, y: e.y + e.height / 2 };
                                    },
                                },
                                {
                                    key: "getTextRects",
                                    value: function (t, e, i, a) {
                                        var s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
                                            n = this.w,
                                            o = this.drawText({ x: -200, y: -200, text: t, textAnchor: "start", fontSize: e, fontFamily: i, foreColor: "#fff", opacity: 0 });
                                        a && o.attr("transform", a), n.globals.dom.Paper.add(o);
                                        var r = o.bbox();
                                        return s || (r = o.node.getBoundingClientRect()), o.remove(), { width: r.width, height: r.height };
                                    },
                                },
                                {
                                    key: "placeTextWithEllipsis",
                                    value: function (t, e, i) {
                                        if ("function" == typeof t.getComputedTextLength && ((t.textContent = e), e.length > 0 && t.getComputedTextLength() >= i / 1.1)) {
                                            for (var a = e.length - 3; a > 0; a -= 3) if (t.getSubStringLength(0, a) <= i / 1.1) return void (t.textContent = e.substring(0, a) + "...");
                                            t.textContent = ".";
                                        }
                                    },
                                },
                            ],
                            [
                                {
                                    key: "setAttrs",
                                    value: function (t, e) {
                                        for (var i in e) e.hasOwnProperty(i) && t.setAttribute(i, e[i]);
                                    },
                                },
                            ]
                        ),
                        A
                    );
                })(),
                $ = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(
                            A,
                            [
                                {
                                    key: "getStackedSeriesTotals",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                            e = this.w,
                                            i = [];
                                        if (0 === e.globals.series.length) return i;
                                        for (var a = 0; a < e.globals.series[e.globals.maxValsInArrayIndex].length; a++) {
                                            for (var s = 0, n = 0; n < e.globals.series.length; n++) void 0 !== e.globals.series[n][a] && -1 === t.indexOf(n) && (s += e.globals.series[n][a]);
                                            i.push(s);
                                        }
                                        return i;
                                    },
                                },
                                {
                                    key: "getSeriesTotalByIndex",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                                        return null === t
                                            ? this.w.config.series.reduce(function (e, i) {
                                                  return e + i;
                                              }, 0)
                                            : this.w.globals.series[t].reduce(function (e, i) {
                                                  return e + i;
                                              }, 0);
                                    },
                                },
                                {
                                    key: "isSeriesNull",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                                        return (
                                            0 ===
                                            (null === t
                                                ? this.w.config.series.filter(function (e) {
                                                      return null !== e;
                                                  })
                                                : this.w.config.series[t].data.filter(function (e) {
                                                      return null !== e;
                                                  })
                                            ).length
                                        );
                                    },
                                },
                                {
                                    key: "seriesHaveSameValues",
                                    value: function (t) {
                                        return this.w.globals.series[t].every(function (e, i, a) {
                                            return e === a[0];
                                        });
                                    },
                                },
                                {
                                    key: "getCategoryLabels",
                                    value: function (t) {
                                        var e = this.w,
                                            i = t.slice();
                                        return (
                                            e.config.xaxis.convertedCatToNumeric &&
                                                (i = t.map(function (a, s) {
                                                    return e.config.xaxis.labels.formatter(a - e.globals.minX + 1);
                                                })),
                                            i
                                        );
                                    },
                                },
                                {
                                    key: "getLargestSeries",
                                    value: function () {
                                        var t = this.w;
                                        t.globals.maxValsInArrayIndex = t.globals.series
                                            .map(function (e) {
                                                return e.length;
                                            })
                                            .indexOf(
                                                Math.max.apply(
                                                    Math,
                                                    t.globals.series.map(function (e) {
                                                        return e.length;
                                                    })
                                                )
                                            );
                                    },
                                },
                                {
                                    key: "getLargestMarkerSize",
                                    value: function () {
                                        var t = this.w,
                                            e = 0;
                                        return (
                                            t.globals.markers.size.forEach(function (i) {
                                                e = Math.max(e, i);
                                            }),
                                            t.config.markers.discrete &&
                                                t.config.markers.discrete.length &&
                                                t.config.markers.discrete.forEach(function (i) {
                                                    e = Math.max(e, i.size);
                                                }),
                                            e > 0 && (e += t.config.markers.hover.sizeOffset + 1),
                                            (t.globals.markers.largestSize = e),
                                            e
                                        );
                                    },
                                },
                                {
                                    key: "getSeriesTotals",
                                    value: function () {
                                        var t = this.w;
                                        t.globals.seriesTotals = t.globals.series.map(function (e, i) {
                                            var a = 0;
                                            if (Array.isArray(e)) for (var s = 0; s < e.length; s++) a += e[s];
                                            else a += e;
                                            return a;
                                        });
                                    },
                                },
                                {
                                    key: "getSeriesTotalsXRange",
                                    value: function (t, e) {
                                        var i = this.w;
                                        return i.globals.series.map(function (a, s) {
                                            for (var n = 0, o = 0; o < a.length; o++) i.globals.seriesX[s][o] > t && i.globals.seriesX[s][o] < e && (n += a[o]);
                                            return n;
                                        });
                                    },
                                },
                                {
                                    key: "getPercentSeries",
                                    value: function () {
                                        var t = this.w;
                                        t.globals.seriesPercent = t.globals.series.map(function (e, i) {
                                            var a = [];
                                            if (Array.isArray(e))
                                                for (var s = 0; s < e.length; s++) {
                                                    var n = t.globals.stackedSeriesTotals[s],
                                                        o = 0;
                                                    n && (o = (100 * e[s]) / n), a.push(o);
                                                }
                                            else {
                                                var r =
                                                    (100 * e) /
                                                    t.globals.seriesTotals.reduce(function (d, c) {
                                                        return d + c;
                                                    }, 0);
                                                a.push(r);
                                            }
                                            return a;
                                        });
                                    },
                                },
                                {
                                    key: "getCalculatedRatios",
                                    value: function () {
                                        var t,
                                            e,
                                            i,
                                            a,
                                            s = this.w.globals,
                                            n = [],
                                            o = 0,
                                            r = [],
                                            d = 0.1,
                                            c = 0;
                                        if (((s.yRange = []), s.isMultipleYAxis)) for (var g = 0; g < s.minYArr.length; g++) s.yRange.push(Math.abs(s.minYArr[g] - s.maxYArr[g])), r.push(0);
                                        else s.yRange.push(Math.abs(s.minY - s.maxY));
                                        (s.xRange = Math.abs(s.maxX - s.minX)), (s.zRange = Math.abs(s.maxZ - s.minZ));
                                        for (var u = 0; u < s.yRange.length; u++) n.push(s.yRange[u] / s.gridHeight);
                                        if (
                                            ((e = s.xRange / s.gridWidth),
                                            (i = Math.abs(s.initialMaxX - s.initialMinX) / s.gridWidth),
                                            (t = s.yRange / s.gridWidth),
                                            (a = s.xRange / s.gridHeight),
                                            (o = (s.zRange / s.gridHeight) * 16) || (o = 1),
                                            s.minY !== Number.MIN_VALUE && 0 !== Math.abs(s.minY) && (s.hasNegs = !0),
                                            s.isMultipleYAxis)
                                        ) {
                                            r = [];
                                            for (var p = 0; p < n.length; p++) r.push(-s.minYArr[p] / n[p]);
                                        } else r.push(-s.minY / n[0]), s.minY !== Number.MIN_VALUE && 0 !== Math.abs(s.minY) && ((d = -s.minY / t), (c = s.minX / e));
                                        return { yRatio: n, invertedYRatio: t, zRatio: o, xRatio: e, initialXRatio: i, invertedXRatio: a, baseLineInvertedY: d, baseLineY: r, baseLineX: c };
                                    },
                                },
                                {
                                    key: "getLogSeries",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w;
                                        return (
                                            (i.globals.seriesLog = t.map(function (a, s) {
                                                return i.config.yaxis[s] && i.config.yaxis[s].logarithmic
                                                    ? a.map(function (n) {
                                                          return null === n ? null : e.getLogVal(i.config.yaxis[s].logBase, n, s);
                                                      })
                                                    : a;
                                            })),
                                            i.globals.invalidLogScale ? t : i.globals.seriesLog
                                        );
                                    },
                                },
                                {
                                    key: "getBaseLog",
                                    value: function (t, e) {
                                        return Math.log(e) / Math.log(t);
                                    },
                                },
                                {
                                    key: "getLogVal",
                                    value: function (t, e, i) {
                                        if (0 === e) return 0;
                                        var a = this.w,
                                            s = 0 === a.globals.minYArr[i] ? -1 : this.getBaseLog(t, a.globals.minYArr[i]),
                                            n = (0 === a.globals.maxYArr[i] ? 0 : this.getBaseLog(t, a.globals.maxYArr[i])) - s;
                                        return e < 1 ? e / n : (this.getBaseLog(t, e) - s) / n;
                                    },
                                },
                                {
                                    key: "getLogYRatios",
                                    value: function (t) {
                                        var e = this,
                                            i = this.w,
                                            a = this.w.globals;
                                        return (
                                            (a.yLogRatio = t.slice()),
                                            (a.logYRange = a.yRange.map(function (s, n) {
                                                if (i.config.yaxis[n] && e.w.config.yaxis[n].logarithmic) {
                                                    var o,
                                                        r = -Number.MAX_VALUE,
                                                        d = Number.MIN_VALUE;
                                                    return (
                                                        a.seriesLog.forEach(function (c, g) {
                                                            c.forEach(function (u) {
                                                                i.config.yaxis[g] && i.config.yaxis[g].logarithmic && ((r = Math.max(u, r)), (d = Math.min(u, d)));
                                                            });
                                                        }),
                                                        (o = Math.pow(a.yRange[n], Math.abs(d - r) / a.yRange[n])),
                                                        (a.yLogRatio[n] = o / a.gridHeight),
                                                        o
                                                    );
                                                }
                                            })),
                                            a.invalidLogScale ? t.slice() : a.yLogRatio
                                        );
                                    },
                                },
                            ],
                            [
                                {
                                    key: "checkComboSeries",
                                    value: function (t) {
                                        var e = !1,
                                            i = 0,
                                            a = 0;
                                        return (
                                            t.length &&
                                                void 0 !== t[0].type &&
                                                t.forEach(function (s) {
                                                    ("bar" !== s.type && "column" !== s.type && "candlestick" !== s.type && "boxPlot" !== s.type) || i++, void 0 !== s.type && a++;
                                                }),
                                            a > 0 && (e = !0),
                                            { comboBarCount: i, comboCharts: e }
                                        );
                                    },
                                },
                                {
                                    key: "extendArrayProps",
                                    value: function (t, e, i) {
                                        return (
                                            e.yaxis && (e = t.extendYAxis(e, i)),
                                            e.annotations && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), e.annotations.xaxis && (e = t.extendXAxisAnnotations(e)), e.annotations.points && (e = t.extendPointAnnotations(e))),
                                            e
                                        );
                                    },
                                },
                            ]
                        ),
                        A
                    );
                })(),
                lt = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.annoCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "setOrientations",
                                value: function (t) {
                                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                        i = this.w;
                                    if ("vertical" === t.label.orientation) {
                                        var a = null !== e ? e : 0,
                                            s = i.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a, "']"));
                                        if (null !== s) {
                                            var n = s.getBoundingClientRect();
                                            s.setAttribute("x", parseFloat(s.getAttribute("x")) - n.height + 4),
                                                s.setAttribute("y", "top" === t.label.position ? parseFloat(s.getAttribute("y")) + n.width : parseFloat(s.getAttribute("y")) - n.width);
                                            var o = this.annoCtx.graphics.rotateAroundCenter(s),
                                                r = o.x,
                                                d = o.y;
                                            s.setAttribute("transform", "rotate(-90 ".concat(r, " ").concat(d, ")"));
                                        }
                                    }
                                },
                            },
                            {
                                key: "addBackgroundToAnno",
                                value: function (t, e) {
                                    var i = this.w;
                                    if (!t || void 0 === e.label.text || (void 0 !== e.label.text && !String(e.label.text).trim())) return null;
                                    var a = i.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(),
                                        s = t.getBoundingClientRect(),
                                        n = e.label.style.padding.left,
                                        o = e.label.style.padding.right,
                                        r = e.label.style.padding.top,
                                        d = e.label.style.padding.bottom;
                                    "vertical" === e.label.orientation && ((r = e.label.style.padding.left), (d = e.label.style.padding.right), (n = e.label.style.padding.top), (o = e.label.style.padding.bottom));
                                    var u = this.annoCtx.graphics.drawRect(
                                        s.left - a.left - n - i.globals.barPadForNumericAxis,
                                        s.top - a.top - r,
                                        s.width + n + o,
                                        s.height + r + d,
                                        e.label.borderRadius,
                                        e.label.style.background,
                                        1,
                                        e.label.borderWidth,
                                        e.label.borderColor,
                                        0
                                    );
                                    return e.id && u.node.classList.add(e.id), u;
                                },
                            },
                            {
                                key: "annotationsBackground",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = function (a, s, n) {
                                            var o = e.globals.dom.baseEl.querySelector(".apexcharts-".concat(n, "-annotations .apexcharts-").concat(n, "-annotation-label[rel='").concat(s, "']"));
                                            if (o) {
                                                var r = o.parentNode,
                                                    d = t.addBackgroundToAnno(o, a);
                                                d &&
                                                    (r.insertBefore(d.node, o),
                                                    a.label.mouseEnter && d.node.addEventListener("mouseenter", a.label.mouseEnter.bind(t, a)),
                                                    a.label.mouseLeave && d.node.addEventListener("mouseleave", a.label.mouseLeave.bind(t, a)),
                                                    a.label.click && d.node.addEventListener("click", a.label.click.bind(t, a)));
                                            }
                                        };
                                    e.config.annotations.xaxis.map(function (a, s) {
                                        i(a, s, "xaxis");
                                    }),
                                        e.config.annotations.yaxis.map(function (a, s) {
                                            i(a, s, "yaxis");
                                        }),
                                        e.config.annotations.points.map(function (a, s) {
                                            i(a, s, "point");
                                        });
                                },
                            },
                            {
                                key: "getY1Y2",
                                value: function (t, e) {
                                    var i,
                                        a = "y1" === t ? e.y : e.y2,
                                        s = this.w;
                                    if (this.annoCtx.invertAxis) {
                                        var n = s.globals.labels.indexOf(a);
                                        s.config.xaxis.convertedCatToNumeric && (n = s.globals.categoryLabels.indexOf(a));
                                        var o = s.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (n + 1) + ")");
                                        o && (i = parseFloat(o.getAttribute("y")));
                                    } else {
                                        var r;
                                        (r = s.config.yaxis[e.yAxisIndex].logarithmic
                                            ? (a = new $(this.annoCtx.ctx).getLogVal(a, e.yAxisIndex)) / s.globals.yLogRatio[e.yAxisIndex]
                                            : (a - s.globals.minYArr[e.yAxisIndex]) / (s.globals.yRange[e.yAxisIndex] / s.globals.gridHeight)),
                                            (i = s.globals.gridHeight - r),
                                            !e.marker || null != e.y || (i = 0),
                                            s.config.yaxis[e.yAxisIndex] && s.config.yaxis[e.yAxisIndex].reversed && (i = r);
                                    }
                                    return "string" == typeof a && a.indexOf("px") > -1 && (i = parseFloat(a)), i;
                                },
                            },
                            {
                                key: "getX1X2",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = this.annoCtx.invertAxis ? i.globals.minY : i.globals.minX,
                                        s = this.annoCtx.invertAxis ? i.globals.maxY : i.globals.maxX,
                                        n = this.annoCtx.invertAxis ? i.globals.yRange[0] : i.globals.xRange,
                                        o = (e.x - a) / (n / i.globals.gridWidth);
                                    this.annoCtx.inversedReversedAxis && (o = (s - e.x) / (n / i.globals.gridWidth)),
                                        ("category" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric) || this.annoCtx.invertAxis || i.globals.dataFormatXNumeric || (o = this.getStringX(e.x));
                                    var r = (e.x2 - a) / (n / i.globals.gridWidth);
                                    return (
                                        this.annoCtx.inversedReversedAxis && (r = (s - e.x2) / (n / i.globals.gridWidth)),
                                        ("category" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric) || this.annoCtx.invertAxis || i.globals.dataFormatXNumeric || (r = this.getStringX(e.x2)),
                                        null != e.x || !e.marker || (o = i.globals.gridWidth),
                                        "x1" === t && "string" == typeof e.x && e.x.indexOf("px") > -1 && (o = parseFloat(e.x)),
                                        "x2" === t && "string" == typeof e.x2 && e.x2.indexOf("px") > -1 && (r = parseFloat(e.x2)),
                                        "x1" === t ? o : r
                                    );
                                },
                            },
                            {
                                key: "getStringX",
                                value: function (t) {
                                    var e = this.w,
                                        i = t;
                                    e.config.xaxis.convertedCatToNumeric && e.globals.categoryLabels.length && (t = e.globals.categoryLabels.indexOf(t) + 1);
                                    var a = e.globals.labels.indexOf(t),
                                        s = e.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a + 1) + ")");
                                    return s && (i = parseFloat(s.getAttribute("x"))), i;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                St = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.annoCtx = t), (this.invertAxis = this.annoCtx.invertAxis), (this.helpers = new lt(this.annoCtx));
                    }
                    return (
                        m(A, [
                            {
                                key: "addXaxisAnnotation",
                                value: function (t, e, i) {
                                    var a,
                                        s = this.w,
                                        n = this.helpers.getX1X2("x1", t),
                                        o = t.label.text,
                                        r = t.strokeDashArray;
                                    if (z.isNumber(n)) {
                                        if (null == t.x2) {
                                            var d = this.annoCtx.graphics.drawLine(n + t.offsetX, 0 + t.offsetY, n + t.offsetX, s.globals.gridHeight + t.offsetY, t.borderColor, r, t.borderWidth);
                                            e.appendChild(d.node), t.id && d.node.classList.add(t.id);
                                        } else {
                                            if ((a = this.helpers.getX1X2("x2", t)) < n) {
                                                var c = n;
                                                (n = a), (a = c);
                                            }
                                            var g = this.annoCtx.graphics.drawRect(n + t.offsetX, 0 + t.offsetY, a - n, s.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, r);
                                            g.node.classList.add("apexcharts-annotation-rect"), g.attr("clip-path", "url(#gridRectMask".concat(s.globals.cuid, ")")), e.appendChild(g.node), t.id && g.node.classList.add(t.id);
                                        }
                                        var u = this.annoCtx.graphics.getTextRects(o, parseFloat(t.label.style.fontSize)),
                                            x = this.annoCtx.graphics.drawText({
                                                x: n + t.label.offsetX,
                                                y:
                                                    ("top" === t.label.position ? 4 : "center" === t.label.position ? s.globals.gridHeight / 2 + ("vertical" === t.label.orientation ? u.width / 2 : 0) : s.globals.gridHeight) +
                                                    t.label.offsetY -
                                                    ("vertical" === t.label.orientation ? ("top" === t.label.position ? u.width / 2 - 12 : -u.width / 2) : 0),
                                                text: o,
                                                textAnchor: t.label.textAnchor,
                                                fontSize: t.label.style.fontSize,
                                                fontFamily: t.label.style.fontFamily,
                                                fontWeight: t.label.style.fontWeight,
                                                foreColor: t.label.style.color,
                                                cssClass: "apexcharts-xaxis-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : ""),
                                            });
                                        x.attr({ rel: i }), e.appendChild(x.node), this.annoCtx.helpers.setOrientations(t, i);
                                    }
                                },
                            },
                            {
                                key: "drawXAxisAnnotations",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = this.annoCtx.graphics.group({ class: "apexcharts-xaxis-annotations" });
                                    return (
                                        e.config.annotations.xaxis.map(function (a, s) {
                                            t.addXaxisAnnotation(a, i.node, s);
                                        }),
                                        i
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                le = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.annoCtx = t), (this.helpers = new lt(this.annoCtx));
                    }
                    return (
                        m(A, [
                            {
                                key: "addYaxisAnnotation",
                                value: function (t, e, i) {
                                    var a,
                                        s = this.w,
                                        n = t.strokeDashArray,
                                        o = this.helpers.getY1Y2("y1", t),
                                        r = t.label.text;
                                    if (null == t.y2) {
                                        var d = this.annoCtx.graphics.drawLine(0 + t.offsetX, o + t.offsetY, this._getYAxisAnnotationWidth(t), o + t.offsetY, t.borderColor, n, t.borderWidth);
                                        e.appendChild(d.node), t.id && d.node.classList.add(t.id);
                                    } else {
                                        if ((a = this.helpers.getY1Y2("y2", t)) > o) {
                                            var c = o;
                                            (o = a), (a = c);
                                        }
                                        var g = this.annoCtx.graphics.drawRect(0 + t.offsetX, a + t.offsetY, this._getYAxisAnnotationWidth(t), o - a, 0, t.fillColor, t.opacity, 1, t.borderColor, n);
                                        g.node.classList.add("apexcharts-annotation-rect"), g.attr("clip-path", "url(#gridRectMask".concat(s.globals.cuid, ")")), e.appendChild(g.node), t.id && g.node.classList.add(t.id);
                                    }
                                    var p = this.annoCtx.graphics.drawText({
                                        x: ("right" === t.label.position ? s.globals.gridWidth : "center" === t.label.position ? s.globals.gridWidth / 2 : 0) + t.label.offsetX,
                                        y: (null != a ? a : o) + t.label.offsetY - 3,
                                        text: r,
                                        textAnchor: t.label.textAnchor,
                                        fontSize: t.label.style.fontSize,
                                        fontFamily: t.label.style.fontFamily,
                                        fontWeight: t.label.style.fontWeight,
                                        foreColor: t.label.style.color,
                                        cssClass: "apexcharts-yaxis-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : ""),
                                    });
                                    p.attr({ rel: i }), e.appendChild(p.node);
                                },
                            },
                            {
                                key: "_getYAxisAnnotationWidth",
                                value: function (t) {
                                    var e = this.w;
                                    return (t.width.indexOf("%") > -1 ? (e.globals.gridWidth * parseInt(t.width, 10)) / 100 : parseInt(t.width, 10)) + t.offsetX;
                                },
                            },
                            {
                                key: "drawYAxisAnnotations",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = this.annoCtx.graphics.group({ class: "apexcharts-yaxis-annotations" });
                                    return (
                                        e.config.annotations.yaxis.map(function (a, s) {
                                            t.addYaxisAnnotation(a, i.node, s);
                                        }),
                                        i
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                he = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.annoCtx = t), (this.helpers = new lt(this.annoCtx));
                    }
                    return (
                        m(A, [
                            {
                                key: "addPointAnnotation",
                                value: function (t, e, i) {
                                    var a = this.helpers.getX1X2("x1", t),
                                        s = this.helpers.getY1Y2("y1", t);
                                    if (z.isNumber(a)) {
                                        var n = {
                                                pSize: t.marker.size,
                                                pointStrokeWidth: t.marker.strokeWidth,
                                                pointFillColor: t.marker.fillColor,
                                                pointStrokeColor: t.marker.strokeColor,
                                                shape: t.marker.shape,
                                                pRadius: t.marker.radius,
                                                class: "apexcharts-point-annotation-marker ".concat(t.marker.cssClass, " ").concat(t.id ? t.id : ""),
                                            },
                                            o = this.annoCtx.graphics.drawMarker(a + t.marker.offsetX, s + t.marker.offsetY, n);
                                        e.appendChild(o.node);
                                        var r = t.label.text ? t.label.text : "",
                                            d = this.annoCtx.graphics.drawText({
                                                x: a + t.label.offsetX,
                                                y: s + t.label.offsetY - t.marker.size - parseFloat(t.label.style.fontSize) / 1.6,
                                                text: r,
                                                textAnchor: t.label.textAnchor,
                                                fontSize: t.label.style.fontSize,
                                                fontFamily: t.label.style.fontFamily,
                                                fontWeight: t.label.style.fontWeight,
                                                foreColor: t.label.style.color,
                                                cssClass: "apexcharts-point-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : ""),
                                            });
                                        if ((d.attr({ rel: i }), e.appendChild(d.node), t.customSVG.SVG)) {
                                            var c = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations-custom-svg " + t.customSVG.cssClass });
                                            c.attr({ transform: "translate(".concat(a + t.customSVG.offsetX, ", ").concat(s + t.customSVG.offsetY, ")") }), (c.node.innerHTML = t.customSVG.SVG), e.appendChild(c.node);
                                        }
                                        if (t.image.path) {
                                            var g = t.image.width ? t.image.width : 20,
                                                u = t.image.height ? t.image.height : 20;
                                            o = this.annoCtx.addImage({ x: a + t.image.offsetX - g / 2, y: s + t.image.offsetY - u / 2, width: g, height: u, path: t.image.path, appendTo: ".apexcharts-point-annotations" });
                                        }
                                        t.mouseEnter && o.node.addEventListener("mouseenter", t.mouseEnter.bind(this, t)),
                                            t.mouseLeave && o.node.addEventListener("mouseleave", t.mouseLeave.bind(this, t)),
                                            t.click && o.node.addEventListener("click", t.click.bind(this, t));
                                    }
                                },
                            },
                            {
                                key: "drawPointAnnotations",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations" });
                                    return (
                                        e.config.annotations.points.map(function (a, s) {
                                            t.addPointAnnotation(a, i.node, s);
                                        }),
                                        i
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                $t = {
                    name: "en",
                    options: {
                        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                        shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                        days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                        shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                        toolbar: {
                            exportToSVG: "Download SVG",
                            exportToPNG: "Download PNG",
                            exportToCSV: "Download CSV",
                            menu: "Menu",
                            selection: "Selection",
                            selectionZoom: "Selection Zoom",
                            zoomIn: "Zoom In",
                            zoomOut: "Zoom Out",
                            pan: "Panning",
                            reset: "Reset Zoom",
                        },
                    },
                },
                wt = (function () {
                    function A() {
                        B(this, A),
                            (this.yAxis = {
                                show: !0,
                                showAlways: !1,
                                showForNullSeries: !0,
                                seriesName: void 0,
                                opposite: !1,
                                reversed: !1,
                                logarithmic: !1,
                                logBase: 10,
                                tickAmount: void 0,
                                forceNiceScale: !1,
                                max: void 0,
                                min: void 0,
                                floating: !1,
                                decimalsInFloat: void 0,
                                labels: {
                                    show: !0,
                                    minWidth: 0,
                                    maxWidth: 160,
                                    offsetX: 0,
                                    offsetY: 0,
                                    align: void 0,
                                    rotate: 0,
                                    padding: 20,
                                    style: { colors: [], fontSize: "11px", fontWeight: 400, fontFamily: void 0, cssClass: "" },
                                    formatter: void 0,
                                },
                                axisBorder: { show: !1, color: "#e0e0e0", width: 1, offsetX: 0, offsetY: 0 },
                                axisTicks: { show: !1, color: "#e0e0e0", width: 6, offsetX: 0, offsetY: 0 },
                                title: { text: void 0, rotate: -90, offsetY: 0, offsetX: 0, style: { color: void 0, fontSize: "11px", fontWeight: 900, fontFamily: void 0, cssClass: "" } },
                                tooltip: { enabled: !1, offsetX: 0 },
                                crosshairs: { show: !0, position: "front", stroke: { color: "#b6b6b6", width: 1, dashArray: 0 } },
                            }),
                            (this.pointAnnotation = {
                                id: void 0,
                                x: 0,
                                y: null,
                                yAxisIndex: 0,
                                seriesIndex: 0,
                                mouseEnter: void 0,
                                mouseLeave: void 0,
                                click: void 0,
                                marker: { size: 4, fillColor: "#fff", strokeWidth: 2, strokeColor: "#333", shape: "circle", offsetX: 0, offsetY: 0, radius: 2, cssClass: "" },
                                label: {
                                    borderColor: "#c2c2c2",
                                    borderWidth: 1,
                                    borderRadius: 2,
                                    text: void 0,
                                    textAnchor: "middle",
                                    offsetX: 0,
                                    offsetY: 0,
                                    mouseEnter: void 0,
                                    mouseLeave: void 0,
                                    click: void 0,
                                    style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } },
                                },
                                customSVG: { SVG: void 0, cssClass: void 0, offsetX: 0, offsetY: 0 },
                                image: { path: void 0, width: 20, height: 20, offsetX: 0, offsetY: 0 },
                            }),
                            (this.yAxisAnnotation = {
                                id: void 0,
                                y: 0,
                                y2: null,
                                strokeDashArray: 1,
                                fillColor: "#c2c2c2",
                                borderColor: "#c2c2c2",
                                borderWidth: 1,
                                opacity: 0.3,
                                offsetX: 0,
                                offsetY: 0,
                                width: "100%",
                                yAxisIndex: 0,
                                label: {
                                    borderColor: "#c2c2c2",
                                    borderWidth: 1,
                                    borderRadius: 2,
                                    text: void 0,
                                    textAnchor: "end",
                                    position: "right",
                                    offsetX: 0,
                                    offsetY: -3,
                                    mouseEnter: void 0,
                                    mouseLeave: void 0,
                                    click: void 0,
                                    style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } },
                                },
                            }),
                            (this.xAxisAnnotation = {
                                id: void 0,
                                x: 0,
                                x2: null,
                                strokeDashArray: 1,
                                fillColor: "#c2c2c2",
                                borderColor: "#c2c2c2",
                                borderWidth: 1,
                                opacity: 0.3,
                                offsetX: 0,
                                offsetY: 0,
                                label: {
                                    borderColor: "#c2c2c2",
                                    borderWidth: 1,
                                    borderRadius: 2,
                                    text: void 0,
                                    textAnchor: "middle",
                                    orientation: "vertical",
                                    position: "top",
                                    offsetX: 0,
                                    offsetY: 0,
                                    mouseEnter: void 0,
                                    mouseLeave: void 0,
                                    click: void 0,
                                    style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } },
                                },
                            }),
                            (this.text = {
                                x: 0,
                                y: 0,
                                text: "",
                                textAnchor: "start",
                                foreColor: void 0,
                                fontSize: "13px",
                                fontFamily: void 0,
                                fontWeight: 400,
                                appendTo: ".apexcharts-annotations",
                                backgroundColor: "transparent",
                                borderColor: "#c2c2c2",
                                borderRadius: 0,
                                borderWidth: 0,
                                paddingLeft: 4,
                                paddingRight: 4,
                                paddingTop: 2,
                                paddingBottom: 2,
                            });
                    }
                    return (
                        m(A, [
                            {
                                key: "init",
                                value: function () {
                                    return {
                                        annotations: { yaxis: [this.yAxisAnnotation], xaxis: [this.xAxisAnnotation], points: [this.pointAnnotation], texts: [], images: [], shapes: [] },
                                        chart: {
                                            animations: { enabled: !0, easing: "easeinout", speed: 800, animateGradually: { delay: 150, enabled: !0 }, dynamicAnimation: { enabled: !0, speed: 350 } },
                                            background: "transparent",
                                            locales: [$t],
                                            defaultLocale: "en",
                                            dropShadow: { enabled: !1, enabledOnSeries: void 0, top: 2, left: 2, blur: 4, color: "#000", opacity: 0.35 },
                                            events: {
                                                animationEnd: void 0,
                                                beforeMount: void 0,
                                                mounted: void 0,
                                                updated: void 0,
                                                click: void 0,
                                                mouseMove: void 0,
                                                mouseLeave: void 0,
                                                xAxisLabelClick: void 0,
                                                legendClick: void 0,
                                                markerClick: void 0,
                                                selection: void 0,
                                                dataPointSelection: void 0,
                                                dataPointMouseEnter: void 0,
                                                dataPointMouseLeave: void 0,
                                                beforeZoom: void 0,
                                                beforeResetZoom: void 0,
                                                zoomed: void 0,
                                                scrolled: void 0,
                                                brushScrolled: void 0,
                                            },
                                            foreColor: "#373d3f",
                                            fontFamily: "Helvetica, Arial, sans-serif",
                                            height: "auto",
                                            parentHeightOffset: 15,
                                            redrawOnParentResize: !0,
                                            redrawOnWindowResize: !0,
                                            id: void 0,
                                            group: void 0,
                                            offsetX: 0,
                                            offsetY: 0,
                                            selection: {
                                                enabled: !1,
                                                type: "x",
                                                fill: { color: "#24292e", opacity: 0.1 },
                                                stroke: { width: 1, color: "#24292e", opacity: 0.4, dashArray: 3 },
                                                xaxis: { min: void 0, max: void 0 },
                                                yaxis: { min: void 0, max: void 0 },
                                            },
                                            sparkline: { enabled: !1 },
                                            brush: { enabled: !1, autoScaleYaxis: !0, target: void 0, targets: void 0 },
                                            stacked: !1,
                                            stackType: "normal",
                                            toolbar: {
                                                show: !0,
                                                offsetX: 0,
                                                offsetY: 0,
                                                tools: { download: !0, selection: !0, zoom: !0, zoomin: !0, zoomout: !0, pan: !0, reset: !0, customIcons: [] },
                                                export: {
                                                    csv: {
                                                        filename: void 0,
                                                        columnDelimiter: ",",
                                                        headerCategory: "category",
                                                        headerValue: "value",
                                                        dateFormatter: function (t) {
                                                            return new Date(t).toDateString();
                                                        },
                                                    },
                                                    png: { filename: void 0 },
                                                    svg: { filename: void 0 },
                                                },
                                                autoSelected: "zoom",
                                            },
                                            type: "line",
                                            width: "100%",
                                            zoom: { enabled: !0, type: "x", autoScaleYaxis: !1, zoomedArea: { fill: { color: "#90CAF9", opacity: 0.4 }, stroke: { color: "#0D47A1", opacity: 0.4, width: 1 } } },
                                        },
                                        plotOptions: {
                                            area: { fillTo: "origin" },
                                            bar: {
                                                horizontal: !1,
                                                columnWidth: "70%",
                                                barHeight: "70%",
                                                distributed: !1,
                                                borderRadius: 0,
                                                borderRadiusApplication: "around",
                                                borderRadiusWhenStacked: "last",
                                                rangeBarOverlap: !0,
                                                rangeBarGroupRows: !1,
                                                hideZeroBarsWhenGrouped: !1,
                                                isDumbbell: !1,
                                                dumbbellColors: void 0,
                                                isFunnel: !1,
                                                isFunnel3d: !0,
                                                colors: { ranges: [], backgroundBarColors: [], backgroundBarOpacity: 1, backgroundBarRadius: 0 },
                                                dataLabels: {
                                                    position: "top",
                                                    maxItems: 100,
                                                    hideOverflowingLabels: !0,
                                                    orientation: "horizontal",
                                                    total: { enabled: !1, formatter: void 0, offsetX: 0, offsetY: 0, style: { color: "#373d3f", fontSize: "12px", fontFamily: void 0, fontWeight: 600 } },
                                                },
                                            },
                                            bubble: { zScaling: !0, minBubbleRadius: void 0, maxBubbleRadius: void 0 },
                                            candlestick: { colors: { upward: "#00B746", downward: "#EF403C" }, wick: { useFillColor: !0 } },
                                            boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } },
                                            heatmap: {
                                                radius: 2,
                                                enableShades: !0,
                                                shadeIntensity: 0.5,
                                                reverseNegativeShade: !1,
                                                distributed: !1,
                                                useFillColorAsStroke: !1,
                                                colorScale: { inverse: !1, ranges: [], min: void 0, max: void 0 },
                                            },
                                            treemap: {
                                                enableShades: !0,
                                                shadeIntensity: 0.5,
                                                distributed: !1,
                                                reverseNegativeShade: !1,
                                                useFillColorAsStroke: !1,
                                                dataLabels: { format: "scale" },
                                                colorScale: { inverse: !1, ranges: [], min: void 0, max: void 0 },
                                            },
                                            radialBar: {
                                                inverseOrder: !1,
                                                startAngle: 0,
                                                endAngle: 360,
                                                offsetX: 0,
                                                offsetY: 0,
                                                hollow: {
                                                    margin: 5,
                                                    size: "50%",
                                                    background: "transparent",
                                                    image: void 0,
                                                    imageWidth: 150,
                                                    imageHeight: 150,
                                                    imageOffsetX: 0,
                                                    imageOffsetY: 0,
                                                    imageClipped: !0,
                                                    position: "front",
                                                    dropShadow: { enabled: !1, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 },
                                                },
                                                track: {
                                                    show: !0,
                                                    startAngle: void 0,
                                                    endAngle: void 0,
                                                    background: "#f2f2f2",
                                                    strokeWidth: "97%",
                                                    opacity: 1,
                                                    margin: 5,
                                                    dropShadow: { enabled: !1, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 },
                                                },
                                                dataLabels: {
                                                    show: !0,
                                                    name: {
                                                        show: !0,
                                                        fontSize: "16px",
                                                        fontFamily: void 0,
                                                        fontWeight: 600,
                                                        color: void 0,
                                                        offsetY: 0,
                                                        formatter: function (t) {
                                                            return t;
                                                        },
                                                    },
                                                    value: {
                                                        show: !0,
                                                        fontSize: "14px",
                                                        fontFamily: void 0,
                                                        fontWeight: 400,
                                                        color: void 0,
                                                        offsetY: 16,
                                                        formatter: function (t) {
                                                            return t + "%";
                                                        },
                                                    },
                                                    total: {
                                                        show: !1,
                                                        label: "Total",
                                                        fontSize: "16px",
                                                        fontWeight: 600,
                                                        fontFamily: void 0,
                                                        color: void 0,
                                                        formatter: function (t) {
                                                            return (
                                                                t.globals.seriesTotals.reduce(function (e, i) {
                                                                    return e + i;
                                                                }, 0) /
                                                                    t.globals.series.length +
                                                                "%"
                                                            );
                                                        },
                                                    },
                                                },
                                            },
                                            pie: {
                                                customScale: 1,
                                                offsetX: 0,
                                                offsetY: 0,
                                                startAngle: 0,
                                                endAngle: 360,
                                                expandOnClick: !0,
                                                dataLabels: { offset: 0, minAngleToShowLabel: 10 },
                                                donut: {
                                                    size: "65%",
                                                    background: "transparent",
                                                    labels: {
                                                        show: !1,
                                                        name: {
                                                            show: !0,
                                                            fontSize: "16px",
                                                            fontFamily: void 0,
                                                            fontWeight: 600,
                                                            color: void 0,
                                                            offsetY: -10,
                                                            formatter: function (t) {
                                                                return t;
                                                            },
                                                        },
                                                        value: {
                                                            show: !0,
                                                            fontSize: "20px",
                                                            fontFamily: void 0,
                                                            fontWeight: 400,
                                                            color: void 0,
                                                            offsetY: 10,
                                                            formatter: function (t) {
                                                                return t;
                                                            },
                                                        },
                                                        total: {
                                                            show: !1,
                                                            showAlways: !1,
                                                            label: "Total",
                                                            fontSize: "16px",
                                                            fontWeight: 400,
                                                            fontFamily: void 0,
                                                            color: void 0,
                                                            formatter: function (t) {
                                                                return t.globals.seriesTotals.reduce(function (e, i) {
                                                                    return e + i;
                                                                }, 0);
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                            polarArea: { rings: { strokeWidth: 1, strokeColor: "#e8e8e8" }, spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" } },
                                            radar: { size: void 0, offsetX: 0, offsetY: 0, polygons: { strokeWidth: 1, strokeColors: "#e8e8e8", connectorColors: "#e8e8e8", fill: { colors: void 0 } } },
                                        },
                                        colors: void 0,
                                        dataLabels: {
                                            enabled: !0,
                                            enabledOnSeries: void 0,
                                            formatter: function (t) {
                                                return null !== t ? t : "";
                                            },
                                            textAnchor: "middle",
                                            distributed: !1,
                                            offsetX: 0,
                                            offsetY: 0,
                                            style: { fontSize: "12px", fontFamily: void 0, fontWeight: 600, colors: void 0 },
                                            background: {
                                                enabled: !0,
                                                foreColor: "#fff",
                                                borderRadius: 2,
                                                padding: 4,
                                                opacity: 0.9,
                                                borderWidth: 1,
                                                borderColor: "#fff",
                                                dropShadow: { enabled: !1, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 },
                                            },
                                            dropShadow: { enabled: !1, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 },
                                        },
                                        fill: {
                                            type: "solid",
                                            colors: void 0,
                                            opacity: 0.85,
                                            gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: !0, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] },
                                            image: { src: [], width: void 0, height: void 0 },
                                            pattern: { style: "squares", width: 6, height: 6, strokeWidth: 2 },
                                        },
                                        forecastDataPoints: { count: 0, fillOpacity: 0.5, strokeWidth: void 0, dashArray: 4 },
                                        grid: {
                                            show: !0,
                                            borderColor: "#e0e0e0",
                                            strokeDashArray: 0,
                                            position: "back",
                                            xaxis: { lines: { show: !1 } },
                                            yaxis: { lines: { show: !0 } },
                                            row: { colors: void 0, opacity: 0.5 },
                                            column: { colors: void 0, opacity: 0.5 },
                                            padding: { top: 0, right: 10, bottom: 0, left: 12 },
                                        },
                                        labels: [],
                                        legend: {
                                            show: !0,
                                            showForSingleSeries: !1,
                                            showForNullSeries: !0,
                                            showForZeroSeries: !0,
                                            floating: !1,
                                            position: "bottom",
                                            horizontalAlign: "center",
                                            inverseOrder: !1,
                                            fontSize: "12px",
                                            fontFamily: void 0,
                                            fontWeight: 400,
                                            width: void 0,
                                            height: void 0,
                                            formatter: void 0,
                                            tooltipHoverFormatter: void 0,
                                            offsetX: -20,
                                            offsetY: 4,
                                            customLegendItems: [],
                                            labels: { colors: void 0, useSeriesColors: !1 },
                                            markers: { width: 12, height: 12, strokeWidth: 0, fillColors: void 0, strokeColor: "#fff", radius: 12, customHTML: void 0, offsetX: 0, offsetY: 0, onClick: void 0 },
                                            itemMargin: { horizontal: 5, vertical: 2 },
                                            onItemClick: { toggleDataSeries: !0 },
                                            onItemHover: { highlightDataSeries: !0 },
                                        },
                                        markers: {
                                            discrete: [],
                                            size: 0,
                                            colors: void 0,
                                            strokeColors: "#fff",
                                            strokeWidth: 2,
                                            strokeOpacity: 0.9,
                                            strokeDashArray: 0,
                                            fillOpacity: 1,
                                            shape: "circle",
                                            width: 8,
                                            height: 8,
                                            radius: 2,
                                            offsetX: 0,
                                            offsetY: 0,
                                            onClick: void 0,
                                            onDblClick: void 0,
                                            showNullDataPoints: !0,
                                            hover: { size: void 0, sizeOffset: 3 },
                                        },
                                        noData: { text: void 0, align: "center", verticalAlign: "middle", offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "14px", fontFamily: void 0 } },
                                        responsive: [],
                                        series: void 0,
                                        states: {
                                            normal: { filter: { type: "none", value: 0 } },
                                            hover: { filter: { type: "lighten", value: 0.1 } },
                                            active: { allowMultipleDataPointsSelection: !1, filter: { type: "darken", value: 0.5 } },
                                        },
                                        title: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 0, floating: !1, style: { fontSize: "14px", fontWeight: 900, fontFamily: void 0, color: void 0 } },
                                        subtitle: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 30, floating: !1, style: { fontSize: "12px", fontWeight: 400, fontFamily: void 0, color: void 0 } },
                                        stroke: {
                                            show: !0,
                                            curve: "smooth",
                                            lineCap: "butt",
                                            width: 2,
                                            colors: void 0,
                                            dashArray: 0,
                                            fill: {
                                                type: "solid",
                                                colors: void 0,
                                                opacity: 0.85,
                                                gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: !0, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] },
                                            },
                                        },
                                        tooltip: {
                                            enabled: !0,
                                            enabledOnSeries: void 0,
                                            shared: !0,
                                            followCursor: !1,
                                            intersect: !1,
                                            inverseOrder: !1,
                                            custom: void 0,
                                            fillSeriesColor: !1,
                                            theme: "light",
                                            cssClass: "",
                                            style: { fontSize: "12px", fontFamily: void 0 },
                                            onDatasetHover: { highlightDataSeries: !1 },
                                            x: { show: !0, format: "dd MMM", formatter: void 0 },
                                            y: {
                                                formatter: void 0,
                                                title: {
                                                    formatter: function (t) {
                                                        return t ? t + ": " : "";
                                                    },
                                                },
                                            },
                                            z: { formatter: void 0, title: "Size: " },
                                            marker: { show: !0, fillColors: void 0 },
                                            items: { display: "flex" },
                                            fixed: { enabled: !1, position: "topRight", offsetX: 0, offsetY: 0 },
                                        },
                                        xaxis: {
                                            type: "category",
                                            categories: [],
                                            convertedCatToNumeric: !1,
                                            offsetX: 0,
                                            offsetY: 0,
                                            overwriteCategories: void 0,
                                            labels: {
                                                show: !0,
                                                rotate: -45,
                                                rotateAlways: !1,
                                                hideOverlappingLabels: !0,
                                                trim: !1,
                                                minHeight: void 0,
                                                maxHeight: 120,
                                                showDuplicates: !0,
                                                style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" },
                                                offsetX: 0,
                                                offsetY: 0,
                                                format: void 0,
                                                formatter: void 0,
                                                datetimeUTC: !0,
                                                datetimeFormatter: { year: "yyyy", month: "MMM 'yy", day: "dd MMM", hour: "HH:mm", minute: "HH:mm:ss", second: "HH:mm:ss" },
                                            },
                                            group: { groups: [], style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" } },
                                            axisBorder: { show: !0, color: "#e0e0e0", width: "100%", height: 1, offsetX: 0, offsetY: 0 },
                                            axisTicks: { show: !0, color: "#e0e0e0", height: 6, offsetX: 0, offsetY: 0 },
                                            tickAmount: void 0,
                                            tickPlacement: "on",
                                            min: void 0,
                                            max: void 0,
                                            range: void 0,
                                            floating: !1,
                                            decimalsInFloat: void 0,
                                            position: "bottom",
                                            title: { text: void 0, offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "12px", fontWeight: 900, fontFamily: void 0, cssClass: "" } },
                                            crosshairs: {
                                                show: !0,
                                                width: 1,
                                                position: "back",
                                                opacity: 0.9,
                                                stroke: { color: "#b6b6b6", width: 1, dashArray: 3 },
                                                fill: { type: "solid", color: "#B1B9C4", gradient: { colorFrom: "#D8E3F0", colorTo: "#BED1E6", stops: [0, 100], opacityFrom: 0.4, opacityTo: 0.5 } },
                                                dropShadow: { enabled: !1, left: 0, top: 0, blur: 1, opacity: 0.4 },
                                            },
                                            tooltip: { enabled: !0, offsetY: 0, formatter: void 0, style: { fontSize: "12px", fontFamily: void 0 } },
                                        },
                                        yaxis: this.yAxis,
                                        theme: { mode: "light", palette: "palette1", monochrome: { enabled: !1, color: "#008FFB", shadeTo: "light", shadeIntensity: 0.65 } },
                                    };
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Wt = (function () {
                    function A(t) {
                        B(this, A),
                            (this.ctx = t),
                            (this.w = t.w),
                            (this.graphics = new E(this.ctx)),
                            this.w.globals.isBarHorizontal && (this.invertAxis = !0),
                            (this.helpers = new lt(this)),
                            (this.xAxisAnnotations = new St(this)),
                            (this.yAxisAnnotations = new le(this)),
                            (this.pointsAnnotations = new he(this)),
                            this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0),
                            (this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints);
                    }
                    return (
                        m(A, [
                            {
                                key: "drawAxesAnnotations",
                                value: function () {
                                    var t = this.w;
                                    if (t.globals.axisCharts) {
                                        for (
                                            var e = this.yAxisAnnotations.drawYAxisAnnotations(),
                                                i = this.xAxisAnnotations.drawXAxisAnnotations(),
                                                a = this.pointsAnnotations.drawPointAnnotations(),
                                                s = t.config.chart.animations.enabled,
                                                n = [e, i, a],
                                                o = [i.node, e.node, a.node],
                                                r = 0;
                                            r < 3;
                                            r++
                                        )
                                            t.globals.dom.elGraphical.add(n[r]),
                                                !s ||
                                                    t.globals.resized ||
                                                    t.globals.dataChanged ||
                                                    ("scatter" !== t.config.chart.type && "bubble" !== t.config.chart.type && t.globals.dataPoints > 1 && o[r].classList.add("apexcharts-element-hidden")),
                                                t.globals.delayedElements.push({ el: o[r], index: 0 });
                                        this.helpers.annotationsBackground();
                                    }
                                },
                            },
                            {
                                key: "drawImageAnnos",
                                value: function () {
                                    var t = this;
                                    this.w.config.annotations.images.map(function (e, i) {
                                        t.addImage(e, i);
                                    });
                                },
                            },
                            {
                                key: "drawTextAnnos",
                                value: function () {
                                    var t = this;
                                    this.w.config.annotations.texts.map(function (e, i) {
                                        t.addText(e, i);
                                    });
                                },
                            },
                            {
                                key: "addXaxisAnnotation",
                                value: function (t, e, i) {
                                    this.xAxisAnnotations.addXaxisAnnotation(t, e, i);
                                },
                            },
                            {
                                key: "addYaxisAnnotation",
                                value: function (t, e, i) {
                                    this.yAxisAnnotations.addYaxisAnnotation(t, e, i);
                                },
                            },
                            {
                                key: "addPointAnnotation",
                                value: function (t, e, i) {
                                    this.pointsAnnotations.addPointAnnotation(t, e, i);
                                },
                            },
                            {
                                key: "addText",
                                value: function (t, e) {
                                    var s = t.text,
                                        u = t.backgroundColor,
                                        p = t.borderWidth,
                                        x = t.strokeDashArray,
                                        y = t.borderRadius,
                                        C = t.borderColor,
                                        w = t.appendTo,
                                        P = void 0 === w ? ".apexcharts-annotations" : w,
                                        l = t.paddingLeft,
                                        f = void 0 === l ? 4 : l,
                                        v = t.paddingRight,
                                        S = void 0 === v ? 4 : v,
                                        M = t.paddingBottom,
                                        L = void 0 === M ? 2 : M,
                                        k = t.paddingTop,
                                        I = void 0 === k ? 2 : k,
                                        Y = this.w,
                                        D = this.graphics.drawText({
                                            x: t.x,
                                            y: t.y,
                                            text: s,
                                            textAnchor: t.textAnchor || "start",
                                            fontSize: t.fontSize || "12px",
                                            fontWeight: t.fontWeight || "regular",
                                            fontFamily: t.fontFamily || Y.config.chart.fontFamily,
                                            foreColor: t.foreColor || Y.config.chart.foreColor,
                                            cssClass: t.cssClass,
                                        }),
                                        O = Y.globals.dom.baseEl.querySelector(P);
                                    O && O.appendChild(D.node);
                                    var N = D.bbox();
                                    if (s) {
                                        var Q = this.graphics.drawRect(N.x - f, N.y - I, N.width + f + S, N.height + L + I, y, u || "transparent", 1, p, C, x);
                                        O.insertBefore(Q.node, D.node);
                                    }
                                },
                            },
                            {
                                key: "addImage",
                                value: function (t, e) {
                                    var i = this.w,
                                        s = t.x,
                                        n = void 0 === s ? 0 : s,
                                        o = t.y,
                                        r = void 0 === o ? 0 : o,
                                        d = t.width,
                                        c = void 0 === d ? 20 : d,
                                        g = t.height,
                                        u = void 0 === g ? 20 : g,
                                        p = t.appendTo,
                                        x = void 0 === p ? ".apexcharts-annotations" : p,
                                        y = i.globals.dom.Paper.image(t.path);
                                    y.size(c, u).move(n, r);
                                    var C = i.globals.dom.baseEl.querySelector(x);
                                    return C && C.appendChild(y.node), y;
                                },
                            },
                            {
                                key: "addXaxisAnnotationExternal",
                                value: function (t, e, i) {
                                    return this.addAnnotationExternal({ params: t, pushToMemory: e, context: i, type: "xaxis", contextMethod: i.addXaxisAnnotation }), i;
                                },
                            },
                            {
                                key: "addYaxisAnnotationExternal",
                                value: function (t, e, i) {
                                    return this.addAnnotationExternal({ params: t, pushToMemory: e, context: i, type: "yaxis", contextMethod: i.addYaxisAnnotation }), i;
                                },
                            },
                            {
                                key: "addPointAnnotationExternal",
                                value: function (t, e, i) {
                                    return (
                                        void 0 === this.invertAxis && (this.invertAxis = i.w.globals.isBarHorizontal),
                                        this.addAnnotationExternal({ params: t, pushToMemory: e, context: i, type: "point", contextMethod: i.addPointAnnotation }),
                                        i
                                    );
                                },
                            },
                            {
                                key: "addAnnotationExternal",
                                value: function (t) {
                                    var e = t.params,
                                        i = t.pushToMemory,
                                        a = t.context,
                                        s = t.type,
                                        n = t.contextMethod,
                                        o = a,
                                        r = o.w,
                                        d = r.globals.dom.baseEl.querySelector(".apexcharts-".concat(s, "-annotations")),
                                        c = d.childNodes.length + 1,
                                        g = new wt(),
                                        u = Object.assign({}, "xaxis" === s ? g.xAxisAnnotation : "yaxis" === s ? g.yAxisAnnotation : g.pointAnnotation),
                                        p = z.extend(u, e);
                                    switch (s) {
                                        case "xaxis":
                                            this.addXaxisAnnotation(p, d, c);
                                            break;
                                        case "yaxis":
                                            this.addYaxisAnnotation(p, d, c);
                                            break;
                                        case "point":
                                            this.addPointAnnotation(p, d, c);
                                    }
                                    var x = r.globals.dom.baseEl.querySelector(".apexcharts-".concat(s, "-annotations .apexcharts-").concat(s, "-annotation-label[rel='").concat(c, "']")),
                                        y = this.helpers.addBackgroundToAnno(x, p);
                                    return y && d.insertBefore(y.node, x), i && r.globals.memory.methodsToExec.push({ context: o, id: p.id ? p.id : z.randomId(), method: n, label: "addAnnotation", params: e }), a;
                                },
                            },
                            {
                                key: "clearAnnotations",
                                value: function (t) {
                                    var e = t.w,
                                        i = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
                                    e.globals.memory.methodsToExec.map(function (a, s) {
                                        ("addText" !== a.label && "addAnnotation" !== a.label) || e.globals.memory.methodsToExec.splice(s, 1);
                                    }),
                                        (i = z.listToArray(i)),
                                        Array.prototype.forEach.call(i, function (a) {
                                            for (; a.firstChild; ) a.removeChild(a.firstChild);
                                        });
                                },
                            },
                            {
                                key: "removeAnnotation",
                                value: function (t, e) {
                                    var i = t.w,
                                        a = i.globals.dom.baseEl.querySelectorAll(".".concat(e));
                                    a &&
                                        (i.globals.memory.methodsToExec.map(function (s, n) {
                                            s.id === e && i.globals.memory.methodsToExec.splice(n, 1);
                                        }),
                                        Array.prototype.forEach.call(a, function (s) {
                                            s.parentElement.removeChild(s);
                                        }));
                                },
                            },
                        ]),
                        A
                    );
                })(),
                gt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.months31 = [1, 3, 5, 7, 8, 10, 12]), (this.months30 = [2, 4, 6, 9, 11]), (this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]);
                    }
                    return (
                        m(A, [
                            {
                                key: "isValidDate",
                                value: function (t) {
                                    return !isNaN(this.parseDate(t));
                                },
                            },
                            {
                                key: "getTimeStamp",
                                value: function (t) {
                                    return Date.parse(t) ? (this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : new Date(t).getTime()) : t;
                                },
                            },
                            {
                                key: "getDate",
                                value: function (t) {
                                    return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toUTCString()) : new Date(t);
                                },
                            },
                            {
                                key: "parseDate",
                                value: function (t) {
                                    var e = Date.parse(t);
                                    if (!isNaN(e)) return this.getTimeStamp(t);
                                    var i = Date.parse(t.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
                                    return this.getTimeStamp(i);
                                },
                            },
                            {
                                key: "parseDateWithTimezone",
                                value: function (t) {
                                    return Date.parse(t.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
                                },
                            },
                            {
                                key: "formatDate",
                                value: function (t, e) {
                                    var i = this.w.globals.locale,
                                        a = this.w.config.xaxis.labels.datetimeUTC,
                                        s = ["\0"].concat(G(i.months)),
                                        n = ["\x01"].concat(G(i.shortMonths)),
                                        o = ["\x02"].concat(G(i.days)),
                                        r = ["\x03"].concat(G(i.shortDays));
                                    function d(L, k) {
                                        var I = L + "";
                                        for (k = k || 2; I.length < k; ) I = "0" + I;
                                        return I;
                                    }
                                    var c = a ? t.getUTCFullYear() : t.getFullYear();
                                    e = (e = (e = e.replace(/(^|[^\\])yyyy+/g, "$1" + c)).replace(/(^|[^\\])yy/g, "$1" + c.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + c);
                                    var g = (a ? t.getUTCMonth() : t.getMonth()) + 1;
                                    e = (e = (e = (e = e.replace(/(^|[^\\])MMMM+/g, "$1" + s[0])).replace(/(^|[^\\])MMM/g, "$1" + n[0])).replace(/(^|[^\\])MM/g, "$1" + d(g))).replace(/(^|[^\\])M/g, "$1" + g);
                                    var u = a ? t.getUTCDate() : t.getDate();
                                    e = (e = (e = (e = e.replace(/(^|[^\\])dddd+/g, "$1" + o[0])).replace(/(^|[^\\])ddd/g, "$1" + r[0])).replace(/(^|[^\\])dd/g, "$1" + d(u))).replace(/(^|[^\\])d/g, "$1" + u);
                                    var p = a ? t.getUTCHours() : t.getHours(),
                                        x = p > 12 ? p - 12 : 0 === p ? 12 : p;
                                    e = (e = (e = (e = e.replace(/(^|[^\\])HH+/g, "$1" + d(p))).replace(/(^|[^\\])H/g, "$1" + p)).replace(/(^|[^\\])hh+/g, "$1" + d(x))).replace(/(^|[^\\])h/g, "$1" + x);
                                    var y = a ? t.getUTCMinutes() : t.getMinutes();
                                    e = (e = e.replace(/(^|[^\\])mm+/g, "$1" + d(y))).replace(/(^|[^\\])m/g, "$1" + y);
                                    var C = a ? t.getUTCSeconds() : t.getSeconds();
                                    e = (e = e.replace(/(^|[^\\])ss+/g, "$1" + d(C))).replace(/(^|[^\\])s/g, "$1" + C);
                                    var w = a ? t.getUTCMilliseconds() : t.getMilliseconds();
                                    (e = e.replace(/(^|[^\\])fff+/g, "$1" + d(w, 3))), (w = Math.round(w / 10)), (e = e.replace(/(^|[^\\])ff/g, "$1" + d(w))), (w = Math.round(w / 10));
                                    var P = p < 12 ? "AM" : "PM";
                                    e = (e = (e = e.replace(/(^|[^\\])f/g, "$1" + w)).replace(/(^|[^\\])TT+/g, "$1" + P)).replace(/(^|[^\\])T/g, "$1" + P.charAt(0));
                                    var l = P.toLowerCase();
                                    e = (e = e.replace(/(^|[^\\])tt+/g, "$1" + l)).replace(/(^|[^\\])t/g, "$1" + l.charAt(0));
                                    var f = -t.getTimezoneOffset(),
                                        v = a || !f ? "Z" : f > 0 ? "+" : "-";
                                    if (!a) {
                                        var S = (f = Math.abs(f)) % 60;
                                        v += d(Math.floor(f / 60)) + ":" + d(S);
                                    }
                                    e = e.replace(/(^|[^\\])K/g, "$1" + v);
                                    var M = (a ? t.getUTCDay() : t.getDay()) + 1;
                                    return (e = (e = (e = (e = e.replace(new RegExp(o[0], "g"), o[M])).replace(new RegExp(r[0], "g"), r[M])).replace(new RegExp(s[0], "g"), s[g])).replace(new RegExp(n[0], "g"), n[g])).replace(
                                        /\\(.)/g,
                                        "$1"
                                    );
                                },
                            },
                            {
                                key: "getTimeUnitsfromTimestamp",
                                value: function (t, e, i) {
                                    var a = this.w;
                                    void 0 !== a.config.xaxis.min && (t = a.config.xaxis.min), void 0 !== a.config.xaxis.max && (e = a.config.xaxis.max);
                                    var s = this.getDate(t),
                                        n = this.getDate(e),
                                        o = this.formatDate(s, "yyyy MM dd HH mm ss fff").split(" "),
                                        r = this.formatDate(n, "yyyy MM dd HH mm ss fff").split(" ");
                                    return {
                                        minMillisecond: parseInt(o[6], 10),
                                        maxMillisecond: parseInt(r[6], 10),
                                        minSecond: parseInt(o[5], 10),
                                        maxSecond: parseInt(r[5], 10),
                                        minMinute: parseInt(o[4], 10),
                                        maxMinute: parseInt(r[4], 10),
                                        minHour: parseInt(o[3], 10),
                                        maxHour: parseInt(r[3], 10),
                                        minDate: parseInt(o[2], 10),
                                        maxDate: parseInt(r[2], 10),
                                        minMonth: parseInt(o[1], 10) - 1,
                                        maxMonth: parseInt(r[1], 10) - 1,
                                        minYear: parseInt(o[0], 10),
                                        maxYear: parseInt(r[0], 10),
                                    };
                                },
                            },
                            {
                                key: "isLeapYear",
                                value: function (t) {
                                    return (t % 4 == 0 && t % 100 != 0) || t % 400 == 0;
                                },
                            },
                            {
                                key: "calculcateLastDaysOfMonth",
                                value: function (t, e, i) {
                                    return this.determineDaysOfMonths(t, e) - i;
                                },
                            },
                            {
                                key: "determineDaysOfYear",
                                value: function (t) {
                                    var e = 365;
                                    return this.isLeapYear(t) && (e = 366), e;
                                },
                            },
                            {
                                key: "determineRemainingDaysOfYear",
                                value: function (t, e, i) {
                                    var a = this.daysCntOfYear[e] + i;
                                    return e > 1 && this.isLeapYear() && a++, a;
                                },
                            },
                            {
                                key: "determineDaysOfMonths",
                                value: function (t, e) {
                                    var i = 30;
                                    switch (((t = z.monthMod(t)), !0)) {
                                        case this.months30.indexOf(t) > -1:
                                            2 === t && (i = this.isLeapYear(e) ? 29 : 28);
                                            break;
                                        case this.months31.indexOf(t) > -1:
                                        default:
                                            i = 31;
                                    }
                                    return i;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                At = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.tooltipKeyFormat = "dd MMM");
                    }
                    return (
                        m(A, [
                            {
                                key: "xLabelFormat",
                                value: function (t, e, i, a) {
                                    var s = this.w;
                                    if ("datetime" === s.config.xaxis.type && void 0 === s.config.xaxis.labels.formatter && void 0 === s.config.tooltip.x.formatter) {
                                        var n = new gt(this.ctx);
                                        return n.formatDate(n.getDate(e), s.config.tooltip.x.format);
                                    }
                                    return t(e, i, a);
                                },
                            },
                            {
                                key: "defaultGeneralFormatter",
                                value: function (t) {
                                    return Array.isArray(t)
                                        ? t.map(function (e) {
                                              return e;
                                          })
                                        : t;
                                },
                            },
                            {
                                key: "defaultYFormatter",
                                value: function (t, e, i) {
                                    var a = this.w;
                                    return (
                                        z.isNumber(t) &&
                                            (t = t.toFixed(0 !== a.globals.yValueDecimal ? (void 0 !== e.decimalsInFloat ? e.decimalsInFloat : a.globals.yValueDecimal) : a.globals.maxYArr[i] - a.globals.minYArr[i] < 5 ? 1 : 0)),
                                        t
                                    );
                                },
                            },
                            {
                                key: "setLabelFormatters",
                                value: function () {
                                    var t = this,
                                        e = this.w;
                                    return (
                                        (e.globals.xaxisTooltipFormatter = function (i) {
                                            return t.defaultGeneralFormatter(i);
                                        }),
                                        (e.globals.ttKeyFormatter = function (i) {
                                            return t.defaultGeneralFormatter(i);
                                        }),
                                        (e.globals.ttZFormatter = function (i) {
                                            return i;
                                        }),
                                        (e.globals.legendFormatter = function (i) {
                                            return t.defaultGeneralFormatter(i);
                                        }),
                                        (e.globals.xLabelFormatter =
                                            void 0 !== e.config.xaxis.labels.formatter
                                                ? e.config.xaxis.labels.formatter
                                                : function (i) {
                                                      if (z.isNumber(i)) {
                                                          if (!e.config.xaxis.convertedCatToNumeric && "numeric" === e.config.xaxis.type) {
                                                              if (z.isNumber(e.config.xaxis.decimalsInFloat)) return i.toFixed(e.config.xaxis.decimalsInFloat);
                                                              var a = e.globals.maxX - e.globals.minX;
                                                              return i.toFixed(a > 0 && a < 100 ? 1 : 0);
                                                          }
                                                          return i.toFixed(e.globals.isBarHorizontal && e.globals.maxY - e.globals.minYArr < 4 ? 1 : 0);
                                                      }
                                                      return i;
                                                  }),
                                        (e.globals.ttKeyFormatter = "function" == typeof e.config.tooltip.x.formatter ? e.config.tooltip.x.formatter : e.globals.xLabelFormatter),
                                        "function" == typeof e.config.xaxis.tooltip.formatter && (e.globals.xaxisTooltipFormatter = e.config.xaxis.tooltip.formatter),
                                        (Array.isArray(e.config.tooltip.y) || void 0 !== e.config.tooltip.y.formatter) && (e.globals.ttVal = e.config.tooltip.y),
                                        void 0 !== e.config.tooltip.z.formatter && (e.globals.ttZFormatter = e.config.tooltip.z.formatter),
                                        void 0 !== e.config.legend.formatter && (e.globals.legendFormatter = e.config.legend.formatter),
                                        e.config.yaxis.forEach(function (i, a) {
                                            e.globals.yLabelFormatters[a] =
                                                void 0 !== i.labels.formatter
                                                    ? i.labels.formatter
                                                    : function (s) {
                                                          return e.globals.xyCharts
                                                              ? Array.isArray(s)
                                                                  ? s.map(function (n) {
                                                                        return t.defaultYFormatter(n, i, a);
                                                                    })
                                                                  : t.defaultYFormatter(s, i, a)
                                                              : s;
                                                      };
                                        }),
                                        e.globals
                                    );
                                },
                            },
                            {
                                key: "heatmapLabelFormatters",
                                value: function () {
                                    var t = this.w;
                                    if ("heatmap" === t.config.chart.type) {
                                        t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();
                                        var e = t.globals.seriesNames.reduce(function (i, a) {
                                            return i.length > a.length ? i : a;
                                        }, 0);
                                        (t.globals.yAxisScale[0].niceMax = e), (t.globals.yAxisScale[0].niceMin = e);
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Gt = function (A) {
                    var t,
                        e = A.isTimeline,
                        i = A.ctx,
                        a = A.seriesIndex,
                        s = A.dataPointIndex,
                        n = A.y1,
                        o = A.y2,
                        r = A.w,
                        d = r.globals.seriesRangeStart[a][s],
                        c = r.globals.seriesRangeEnd[a][s],
                        g = r.globals.labels[s],
                        u = r.config.series[a].name ? r.config.series[a].name : "",
                        p = r.globals.ttKeyFormatter,
                        x = r.config.tooltip.y.title.formatter,
                        y = { w: r, seriesIndex: a, dataPointIndex: s, start: d, end: c };
                    "function" == typeof x && (u = x(u, y)),
                        null !== (t = r.config.series[a].data[s]) && void 0 !== t && t.x && (g = r.config.series[a].data[s].x),
                        e || ("datetime" === r.config.xaxis.type && (g = new At(i).xLabelFormat(r.globals.ttKeyFormatter, g, g, { i: void 0, dateFormatter: new gt(i).formatDate, w: r }))),
                        "function" == typeof p && (g = p(g, y)),
                        Number.isFinite(n) && Number.isFinite(o) && ((d = n), (c = o));
                    var C = "",
                        w = "",
                        P = r.globals.colors[a];
                    if (void 0 === r.config.tooltip.x.formatter)
                        if ("datetime" === r.config.xaxis.type) {
                            var l = new gt(i);
                            (C = l.formatDate(l.getDate(d), r.config.tooltip.x.format)), (w = l.formatDate(l.getDate(c), r.config.tooltip.x.format));
                        } else (C = d), (w = c);
                    else (C = r.config.tooltip.x.formatter(d)), (w = r.config.tooltip.x.formatter(c));
                    return { start: d, end: c, startVal: C, endVal: w, ylabel: g, color: P, seriesName: u };
                },
                Vt = function (A) {
                    var t = A.color,
                        e = A.seriesName,
                        i = A.ylabel,
                        a = A.start,
                        s = A.end,
                        n = A.seriesIndex,
                        o = A.dataPointIndex,
                        r = A.ctx.tooltip.tooltipLabels.getFormatters(n);
                    (a = r.yLbFormatter(a)), (s = r.yLbFormatter(s));
                    var d = r.yLbFormatter(A.w.globals.series[n][o]),
                        c = '<span class="value start-value">\n  '.concat(a, '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  ').concat(s, "\n  </span>");
                    return (
                        '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' +
                        t +
                        '">' +
                        (e || "") +
                        '</span></div><div> <span class="category">' +
                        i +
                        ": </span> " +
                        (A.w.globals.comboCharts ? ("rangeArea" === A.w.config.series[n].type || "rangeBar" === A.w.config.series[n].type ? c : "<span>".concat(d, "</span>")) : c) +
                        " </div></div>"
                    );
                },
                Et = (function () {
                    function A(t) {
                        B(this, A), (this.opts = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "hideYAxis",
                                value: function () {
                                    (this.opts.yaxis[0].show = !1), (this.opts.yaxis[0].title.text = ""), (this.opts.yaxis[0].axisBorder.show = !1), (this.opts.yaxis[0].axisTicks.show = !1), (this.opts.yaxis[0].floating = !0);
                                },
                            },
                            {
                                key: "line",
                                value: function () {
                                    return {
                                        chart: { animations: { easing: "swing" } },
                                        dataLabels: { enabled: !1 },
                                        stroke: { width: 5, curve: "straight" },
                                        markers: { size: 0, hover: { sizeOffset: 6 } },
                                        xaxis: { crosshairs: { width: 1 } },
                                    };
                                },
                            },
                            {
                                key: "sparkline",
                                value: function (t) {
                                    return (
                                        this.hideYAxis(),
                                        z.extend(t, {
                                            grid: { show: !1, padding: { left: 0, right: 0, top: 0, bottom: 0 } },
                                            legend: { show: !1 },
                                            xaxis: { labels: { show: !1 }, tooltip: { enabled: !1 }, axisBorder: { show: !1 }, axisTicks: { show: !1 } },
                                            chart: { toolbar: { show: !1 }, zoom: { enabled: !1 } },
                                            dataLabels: { enabled: !1 },
                                        })
                                    );
                                },
                            },
                            {
                                key: "bar",
                                value: function () {
                                    return {
                                        chart: { stacked: !1, animations: { easing: "swing" } },
                                        plotOptions: { bar: { dataLabels: { position: "center" } } },
                                        dataLabels: { style: { colors: ["#fff"] }, background: { enabled: !1 } },
                                        stroke: { width: 0, lineCap: "round" },
                                        fill: { opacity: 0.85 },
                                        legend: { markers: { shape: "square", radius: 2, size: 8 } },
                                        tooltip: { shared: !1, intersect: !0 },
                                        xaxis: { tooltip: { enabled: !1 }, tickPlacement: "between", crosshairs: { width: "barWidth", position: "back", fill: { type: "gradient" }, dropShadow: { enabled: !1 }, stroke: { width: 0 } } },
                                    };
                                },
                            },
                            {
                                key: "funnel",
                                value: function () {
                                    return (
                                        this.hideYAxis(),
                                        F(
                                            F({}, this.bar()),
                                            {},
                                            {
                                                chart: { animations: { easing: "linear", speed: 800, animateGradually: { enabled: !1 } } },
                                                plotOptions: { bar: { horizontal: !0, borderRadiusApplication: "around", borderRadius: 0, dataLabels: { position: "center" } } },
                                                grid: { show: !1, padding: { left: 0, right: 0 } },
                                                xaxis: { labels: { show: !1 }, tooltip: { enabled: !1 }, axisBorder: { show: !1 }, axisTicks: { show: !1 } },
                                            }
                                        )
                                    );
                                },
                            },
                            {
                                key: "candlestick",
                                value: function () {
                                    var t = this;
                                    return {
                                        stroke: { width: 1, colors: ["#333"] },
                                        fill: { opacity: 1 },
                                        dataLabels: { enabled: !1 },
                                        tooltip: {
                                            shared: !0,
                                            custom: function (e) {
                                                return t._getBoxTooltip(e.w, e.seriesIndex, e.dataPointIndex, ["Open", "High", "", "Low", "Close"], "candlestick");
                                            },
                                        },
                                        states: { active: { filter: { type: "none" } } },
                                        xaxis: { crosshairs: { width: 1 } },
                                    };
                                },
                            },
                            {
                                key: "boxPlot",
                                value: function () {
                                    var t = this;
                                    return {
                                        chart: { animations: { dynamicAnimation: { enabled: !1 } } },
                                        stroke: { width: 1, colors: ["#24292e"] },
                                        dataLabels: { enabled: !1 },
                                        tooltip: {
                                            shared: !0,
                                            custom: function (e) {
                                                return t._getBoxTooltip(e.w, e.seriesIndex, e.dataPointIndex, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot");
                                            },
                                        },
                                        markers: { size: 5, strokeWidth: 1, strokeColors: "#111" },
                                        xaxis: { crosshairs: { width: 1 } },
                                    };
                                },
                            },
                            {
                                key: "rangeBar",
                                value: function () {
                                    return {
                                        chart: { animations: { animateGradually: !1 } },
                                        stroke: { width: 0, lineCap: "square" },
                                        plotOptions: { bar: { borderRadius: 0, dataLabels: { position: "center" } } },
                                        dataLabels: {
                                            enabled: !1,
                                            formatter: function (t, e) {
                                                var i = e.seriesIndex,
                                                    a = e.dataPointIndex,
                                                    s = e.w,
                                                    n = function () {
                                                        return s.globals.seriesRangeEnd[i][a] - s.globals.seriesRangeStart[i][a];
                                                    };
                                                return s.globals.comboCharts ? ("rangeBar" === s.config.series[i].type || "rangeArea" === s.config.series[i].type ? n() : t) : n();
                                            },
                                            background: { enabled: !1 },
                                            style: { colors: ["#fff"] },
                                        },
                                        markers: { size: 10 },
                                        tooltip: {
                                            shared: !1,
                                            followCursor: !0,
                                            custom: function (t) {
                                                return t.w.config.plotOptions && t.w.config.plotOptions.bar && t.w.config.plotOptions.bar.horizontal
                                                    ? ((a = (i = Gt(F(F({}, (e = t)), {}, { isTimeline: !0 }))).color),
                                                      (s = i.seriesName),
                                                      (n = i.ylabel),
                                                      (o = i.startVal),
                                                      (r = i.endVal),
                                                      Vt(F(F({}, e), {}, { color: a, seriesName: s, ylabel: n, start: o, end: r })))
                                                    : (function (e) {
                                                          var i = Gt(e),
                                                              a = i.color,
                                                              s = i.seriesName,
                                                              n = i.ylabel,
                                                              o = i.start,
                                                              r = i.end;
                                                          return Vt(F(F({}, e), {}, { color: a, seriesName: s, ylabel: n, start: o, end: r }));
                                                      })(t);
                                                var e, i, a, s, n, o, r;
                                            },
                                        },
                                        xaxis: { tickPlacement: "between", tooltip: { enabled: !1 }, crosshairs: { stroke: { width: 0 } } },
                                    };
                                },
                            },
                            {
                                key: "dumbbell",
                                value: function (t) {
                                    var e, i;
                                    return (
                                        (null !== (e = t.plotOptions.bar) && void 0 !== e && e.barHeight) || (t.plotOptions.bar.barHeight = 2),
                                        (null !== (i = t.plotOptions.bar) && void 0 !== i && i.columnWidth) || (t.plotOptions.bar.columnWidth = 2),
                                        t
                                    );
                                },
                            },
                            {
                                key: "area",
                                value: function () {
                                    return {
                                        stroke: { width: 4, fill: { type: "solid", gradient: { inverseColors: !1, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } } },
                                        fill: { type: "gradient", gradient: { inverseColors: !1, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } },
                                        markers: { size: 0, hover: { sizeOffset: 6 } },
                                        tooltip: { followCursor: !1 },
                                    };
                                },
                            },
                            {
                                key: "rangeArea",
                                value: function () {
                                    return {
                                        stroke: { curve: "straight", width: 0 },
                                        fill: { type: "solid", opacity: 0.6 },
                                        markers: { size: 0 },
                                        states: { hover: { filter: { type: "none" } }, active: { filter: { type: "none" } } },
                                        tooltip: {
                                            intersect: !1,
                                            shared: !0,
                                            followCursor: !0,
                                            custom: function (t) {
                                                return (a = (i = Gt((e = t))).color), (s = i.seriesName), (n = i.ylabel), (o = i.start), (r = i.end), Vt(F(F({}, e), {}, { color: a, seriesName: s, ylabel: n, start: o, end: r }));
                                                var e, i, a, s, n, o, r;
                                            },
                                        },
                                    };
                                },
                            },
                            {
                                key: "brush",
                                value: function (t) {
                                    return z.extend(t, {
                                        chart: { toolbar: { autoSelected: "selection", show: !1 }, zoom: { enabled: !1 } },
                                        dataLabels: { enabled: !1 },
                                        stroke: { width: 1 },
                                        tooltip: { enabled: !1 },
                                        xaxis: { tooltip: { enabled: !1 } },
                                    });
                                },
                            },
                            {
                                key: "stacked100",
                                value: function (t) {
                                    (t.dataLabels = t.dataLabels || {}), (t.dataLabels.formatter = t.dataLabels.formatter || void 0);
                                    var e = t.dataLabels.formatter;
                                    return (
                                        t.yaxis.forEach(function (i, a) {
                                            (t.yaxis[a].min = 0), (t.yaxis[a].max = 100);
                                        }),
                                        "bar" === t.chart.type &&
                                            (t.dataLabels.formatter =
                                                e ||
                                                function (i) {
                                                    return "number" == typeof i && i ? i.toFixed(0) + "%" : i;
                                                }),
                                        t
                                    );
                                },
                            },
                            {
                                key: "stackedBars",
                                value: function () {
                                    var t = this.bar();
                                    return F(F({}, t), {}, { plotOptions: F(F({}, t.plotOptions), {}, { bar: F(F({}, t.plotOptions.bar), {}, { borderRadiusApplication: "end", borderRadiusWhenStacked: "last" }) }) });
                                },
                            },
                            {
                                key: "convertCatToNumeric",
                                value: function (t) {
                                    return (t.xaxis.convertedCatToNumeric = !0), t;
                                },
                            },
                            {
                                key: "convertCatToNumericXaxis",
                                value: function (t, e, i) {
                                    (t.xaxis.type = "numeric"),
                                        (t.xaxis.labels = t.xaxis.labels || {}),
                                        (t.xaxis.labels.formatter =
                                            t.xaxis.labels.formatter ||
                                            function (n) {
                                                return z.isNumber(n) ? Math.floor(n) : n;
                                            });
                                    var a = t.xaxis.labels.formatter,
                                        s = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;
                                    return (
                                        i &&
                                            i.length &&
                                            (s = i.map(function (n) {
                                                return Array.isArray(n) ? n : String(n);
                                            })),
                                        s &&
                                            s.length &&
                                            (t.xaxis.labels.formatter = function (n) {
                                                return z.isNumber(n) ? a(s[Math.floor(n) - 1]) : a(n);
                                            }),
                                        (t.xaxis.categories = []),
                                        (t.labels = []),
                                        (t.xaxis.tickAmount = t.xaxis.tickAmount || "dataPoints"),
                                        t
                                    );
                                },
                            },
                            {
                                key: "bubble",
                                value: function () {
                                    return {
                                        dataLabels: { style: { colors: ["#fff"] } },
                                        tooltip: { shared: !1, intersect: !0 },
                                        xaxis: { crosshairs: { width: 0 } },
                                        fill: { type: "solid", gradient: { shade: "light", inverse: !0, shadeIntensity: 0.55, opacityFrom: 0.4, opacityTo: 0.8 } },
                                    };
                                },
                            },
                            {
                                key: "scatter",
                                value: function () {
                                    return { dataLabels: { enabled: !1 }, tooltip: { shared: !1, intersect: !0 }, markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } } };
                                },
                            },
                            {
                                key: "heatmap",
                                value: function () {
                                    return {
                                        chart: { stacked: !1 },
                                        fill: { opacity: 1 },
                                        dataLabels: { style: { colors: ["#fff"] } },
                                        stroke: { colors: ["#fff"] },
                                        tooltip: { followCursor: !0, marker: { show: !1 }, x: { show: !1 } },
                                        legend: { position: "top", markers: { shape: "square", size: 10, offsetY: 2 } },
                                        grid: { padding: { right: 20 } },
                                    };
                                },
                            },
                            {
                                key: "treemap",
                                value: function () {
                                    return {
                                        chart: { zoom: { enabled: !1 } },
                                        dataLabels: { style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] } },
                                        stroke: { show: !0, width: 2, colors: ["#fff"] },
                                        legend: { show: !1 },
                                        fill: { gradient: { stops: [0, 100] } },
                                        tooltip: { followCursor: !0, x: { show: !1 } },
                                        grid: { padding: { left: 0, right: 0 } },
                                        xaxis: { crosshairs: { show: !1 }, tooltip: { enabled: !1 } },
                                    };
                                },
                            },
                            {
                                key: "pie",
                                value: function () {
                                    return {
                                        chart: { toolbar: { show: !1 } },
                                        plotOptions: { pie: { donut: { labels: { show: !1 } } } },
                                        dataLabels: {
                                            formatter: function (t) {
                                                return t.toFixed(1) + "%";
                                            },
                                            style: { colors: ["#fff"] },
                                            background: { enabled: !1 },
                                            dropShadow: { enabled: !0 },
                                        },
                                        stroke: { colors: ["#fff"] },
                                        fill: { opacity: 1, gradient: { shade: "light", stops: [0, 100] } },
                                        tooltip: { theme: "dark", fillSeriesColor: !0 },
                                        legend: { position: "right" },
                                    };
                                },
                            },
                            {
                                key: "donut",
                                value: function () {
                                    return {
                                        chart: { toolbar: { show: !1 } },
                                        dataLabels: {
                                            formatter: function (t) {
                                                return t.toFixed(1) + "%";
                                            },
                                            style: { colors: ["#fff"] },
                                            background: { enabled: !1 },
                                            dropShadow: { enabled: !0 },
                                        },
                                        stroke: { colors: ["#fff"] },
                                        fill: { opacity: 1, gradient: { shade: "light", shadeIntensity: 0.35, stops: [80, 100], opacityFrom: 1, opacityTo: 1 } },
                                        tooltip: { theme: "dark", fillSeriesColor: !0 },
                                        legend: { position: "right" },
                                    };
                                },
                            },
                            {
                                key: "polarArea",
                                value: function () {
                                    return (
                                        (this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6),
                                        {
                                            chart: { toolbar: { show: !1 } },
                                            dataLabels: {
                                                formatter: function (t) {
                                                    return t.toFixed(1) + "%";
                                                },
                                                enabled: !1,
                                            },
                                            stroke: { show: !0, width: 2 },
                                            fill: { opacity: 0.7 },
                                            tooltip: { theme: "dark", fillSeriesColor: !0 },
                                            legend: { position: "right" },
                                        }
                                    );
                                },
                            },
                            {
                                key: "radar",
                                value: function () {
                                    return (
                                        (this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6),
                                        {
                                            dataLabels: { enabled: !1, style: { fontSize: "11px" } },
                                            stroke: { width: 2 },
                                            markers: { size: 3, strokeWidth: 1, strokeOpacity: 1 },
                                            fill: { opacity: 0.2 },
                                            tooltip: { shared: !1, intersect: !0, followCursor: !0 },
                                            grid: { show: !1 },
                                            xaxis: {
                                                labels: {
                                                    formatter: function (t) {
                                                        return t;
                                                    },
                                                    style: { colors: ["#a8a8a8"], fontSize: "11px" },
                                                },
                                                tooltip: { enabled: !1 },
                                                crosshairs: { show: !1 },
                                            },
                                        }
                                    );
                                },
                            },
                            {
                                key: "radialBar",
                                value: function () {
                                    return {
                                        chart: { animations: { dynamicAnimation: { enabled: !0, speed: 800 } }, toolbar: { show: !1 } },
                                        fill: { gradient: { shade: "dark", shadeIntensity: 0.4, inverseColors: !1, type: "diagonal2", opacityFrom: 1, opacityTo: 1, stops: [70, 98, 100] } },
                                        legend: { show: !1, position: "right" },
                                        tooltip: { enabled: !1, fillSeriesColor: !0 },
                                    };
                                },
                            },
                            {
                                key: "_getBoxTooltip",
                                value: function (t, e, i, a, s) {
                                    var n = t.globals.seriesCandleO[e][i],
                                        o = t.globals.seriesCandleH[e][i],
                                        r = t.globals.seriesCandleM[e][i],
                                        d = t.globals.seriesCandleL[e][i],
                                        c = t.globals.seriesCandleC[e][i];
                                    return t.config.series[e].type && t.config.series[e].type !== s
                                        ? '<div class="apexcharts-custom-tooltip">\n          '
                                              .concat(t.config.series[e].name ? t.config.series[e].name : "series-" + (e + 1), ": <strong>")
                                              .concat(t.globals.series[e][i], "</strong>\n        </div>")
                                        : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t.config.chart.type, '">') +
                                              "<div>".concat(a[0], ': <span class="value">') +
                                              n +
                                              "</span></div>" +
                                              "<div>".concat(a[1], ': <span class="value">') +
                                              o +
                                              "</span></div>" +
                                              (r ? "<div>".concat(a[2], ': <span class="value">') + r + "</span></div>" : "") +
                                              "<div>".concat(a[3], ': <span class="value">') +
                                              d +
                                              "</span></div>" +
                                              "<div>".concat(a[4], ': <span class="value">') +
                                              c +
                                              "</span></div></div>";
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Xt = (function () {
                    function A(t) {
                        B(this, A), (this.opts = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "init",
                                value: function (t) {
                                    var e = t.responsiveOverride,
                                        i = this.opts,
                                        a = new wt(),
                                        s = new Et(i);
                                    (this.chartType = i.chart.type), (i = this.extendYAxis(i)), (i = this.extendAnnotations(i));
                                    var n = a.init(),
                                        o = {};
                                    if (i && "object" === _(i)) {
                                        var r,
                                            d,
                                            c,
                                            g,
                                            u,
                                            p,
                                            x,
                                            y,
                                            C = {};
                                        (C =
                                            -1 !==
                                            ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "rangeArea", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(i.chart.type)
                                                ? s[i.chart.type]()
                                                : s.line()),
                                            null !== (r = i.plotOptions) && void 0 !== r && null !== (d = r.bar) && void 0 !== d && d.isFunnel && (C = s.funnel()),
                                            i.chart.stacked && "bar" === i.chart.type && (C = s.stackedBars()),
                                            null !== (c = i.chart.brush) && void 0 !== c && c.enabled && (C = s.brush(C)),
                                            i.chart.stacked && "100%" === i.chart.stackType && (i = s.stacked100(i)),
                                            null !== (g = i.plotOptions) && void 0 !== g && null !== (u = g.bar) && void 0 !== u && u.isDumbbell && (i = s.dumbbell(i)),
                                            this.checkForDarkTheme(window.Apex),
                                            this.checkForDarkTheme(i),
                                            (i.xaxis = i.xaxis || window.Apex.xaxis || {}),
                                            e || (i.xaxis.convertedCatToNumeric = !1),
                                            ((null !== (p = (i = this.checkForCatToNumericXAxis(this.chartType, C, i)).chart.sparkline) && void 0 !== p && p.enabled) ||
                                                (null !== (x = window.Apex.chart) && void 0 !== x && null !== (y = x.sparkline) && void 0 !== y && y.enabled)) &&
                                                (C = s.sparkline(C)),
                                            (o = z.extend(n, C));
                                    }
                                    var w = z.extend(o, window.Apex);
                                    return (n = z.extend(w, i)), this.handleUserInputErrors(n);
                                },
                            },
                            {
                                key: "checkForCatToNumericXAxis",
                                value: function (t, e, i) {
                                    var a,
                                        s,
                                        n = new Et(i);
                                    return (
                                        (("bar" === t || "boxPlot" === t) && (null === (a = i.plotOptions) || void 0 === a || null === (s = a.bar) || void 0 === s ? void 0 : s.horizontal)) ||
                                            "pie" === t ||
                                            "polarArea" === t ||
                                            "donut" === t ||
                                            "radar" === t ||
                                            "radialBar" === t ||
                                            "heatmap" === t ||
                                            !("datetime" !== i.xaxis.type && "numeric" !== i.xaxis.type) ||
                                            "between" === (i.xaxis.tickPlacement ? i.xaxis.tickPlacement : e.xaxis && e.xaxis.tickPlacement) ||
                                            (i = n.convertCatToNumeric(i)),
                                        i
                                    );
                                },
                            },
                            {
                                key: "extendYAxis",
                                value: function (t, e) {
                                    var i = new wt();
                                    (void 0 === t.yaxis || !t.yaxis || (Array.isArray(t.yaxis) && 0 === t.yaxis.length)) && (t.yaxis = {}),
                                        t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = z.extend(t.yaxis, window.Apex.yaxis)),
                                        (t.yaxis = t.yaxis.constructor !== Array ? [z.extend(i.yAxis, t.yaxis)] : z.extendArray(t.yaxis, i.yAxis));
                                    var a = !1;
                                    t.yaxis.forEach(function (n) {
                                        n.logarithmic && (a = !0);
                                    });
                                    var s = t.series;
                                    return (
                                        e && !s && (s = e.config.series),
                                        a &&
                                            s.length !== t.yaxis.length &&
                                            s.length &&
                                            (t.yaxis = s.map(function (n, o) {
                                                if ((n.name || (s[o].name = "series-".concat(o + 1)), t.yaxis[o])) return (t.yaxis[o].seriesName = s[o].name), t.yaxis[o];
                                                var r = z.extend(i.yAxis, t.yaxis[0]);
                                                return (r.show = !1), r;
                                            })),
                                        a && s.length > 1 && s.length !== t.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."),
                                        t
                                    );
                                },
                            },
                            {
                                key: "extendAnnotations",
                                value: function (t) {
                                    return (
                                        void 0 === t.annotations && ((t.annotations = {}), (t.annotations.yaxis = []), (t.annotations.xaxis = []), (t.annotations.points = [])),
                                        (t = this.extendYAxisAnnotations(t)),
                                        (t = this.extendXAxisAnnotations(t)),
                                        this.extendPointAnnotations(t)
                                    );
                                },
                            },
                            {
                                key: "extendYAxisAnnotations",
                                value: function (t) {
                                    var e = new wt();
                                    return (t.annotations.yaxis = z.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation)), t;
                                },
                            },
                            {
                                key: "extendXAxisAnnotations",
                                value: function (t) {
                                    var e = new wt();
                                    return (t.annotations.xaxis = z.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation)), t;
                                },
                            },
                            {
                                key: "extendPointAnnotations",
                                value: function (t) {
                                    var e = new wt();
                                    return (t.annotations.points = z.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation)), t;
                                },
                            },
                            {
                                key: "checkForDarkTheme",
                                value: function (t) {
                                    t.theme &&
                                        "dark" === t.theme.mode &&
                                        (t.tooltip || (t.tooltip = {}),
                                        "light" !== t.tooltip.theme && (t.tooltip.theme = "dark"),
                                        t.chart.foreColor || (t.chart.foreColor = "#f6f7f8"),
                                        t.chart.background || (t.chart.background = "#424242"),
                                        t.theme.palette || (t.theme.palette = "palette4"));
                                },
                            },
                            {
                                key: "handleUserInputErrors",
                                value: function (t) {
                                    var e = t;
                                    if (e.tooltip.shared && e.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
                                    if ("bar" === e.chart.type && e.plotOptions.bar.horizontal) {
                                        if (e.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
                                        e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), (e.xaxis.tooltip.enabled = !1), (e.yaxis[0].tooltip.enabled = !1), (e.chart.zoom.enabled = !1);
                                    }
                                    return (
                                        ("bar" !== e.chart.type && "rangeBar" !== e.chart.type) || (e.tooltip.shared && "barWidth" === e.xaxis.crosshairs.width && e.series.length > 1 && (e.xaxis.crosshairs.width = "tickWidth")),
                                        ("candlestick" !== e.chart.type && "boxPlot" !== e.chart.type) ||
                                            (e.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e.chart.type, " chart is not supported.")), (e.yaxis[0].reversed = !1))),
                                        e
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Kt = (function () {
                    function A() {
                        B(this, A);
                    }
                    return (
                        m(A, [
                            {
                                key: "initGlobalVars",
                                value: function (t) {
                                    (t.series = []),
                                        (t.seriesCandleO = []),
                                        (t.seriesCandleH = []),
                                        (t.seriesCandleM = []),
                                        (t.seriesCandleL = []),
                                        (t.seriesCandleC = []),
                                        (t.seriesRangeStart = []),
                                        (t.seriesRangeEnd = []),
                                        (t.seriesRange = []),
                                        (t.seriesPercent = []),
                                        (t.seriesGoals = []),
                                        (t.seriesX = []),
                                        (t.seriesZ = []),
                                        (t.seriesNames = []),
                                        (t.seriesTotals = []),
                                        (t.seriesLog = []),
                                        (t.seriesColors = []),
                                        (t.stackedSeriesTotals = []),
                                        (t.seriesXvalues = []),
                                        (t.seriesYvalues = []),
                                        (t.labels = []),
                                        (t.hasXaxisGroups = !1),
                                        (t.groups = []),
                                        (t.hasSeriesGroups = !1),
                                        (t.seriesGroups = []),
                                        (t.categoryLabels = []),
                                        (t.timescaleLabels = []),
                                        (t.noLabelsProvided = !1),
                                        (t.resizeTimer = null),
                                        (t.selectionResizeTimer = null),
                                        (t.delayedElements = []),
                                        (t.pointsArray = []),
                                        (t.dataLabelsRects = []),
                                        (t.isXNumeric = !1),
                                        (t.skipLastTimelinelabel = !1),
                                        (t.skipFirstTimelinelabel = !1),
                                        (t.isDataXYZ = !1),
                                        (t.isMultiLineX = !1),
                                        (t.isMultipleYAxis = !1),
                                        (t.maxY = -Number.MAX_VALUE),
                                        (t.minY = Number.MIN_VALUE),
                                        (t.minYArr = []),
                                        (t.maxYArr = []),
                                        (t.maxX = -Number.MAX_VALUE),
                                        (t.minX = Number.MAX_VALUE),
                                        (t.initialMaxX = -Number.MAX_VALUE),
                                        (t.initialMinX = Number.MAX_VALUE),
                                        (t.maxDate = 0),
                                        (t.minDate = Number.MAX_VALUE),
                                        (t.minZ = Number.MAX_VALUE),
                                        (t.maxZ = -Number.MAX_VALUE),
                                        (t.minXDiff = Number.MAX_VALUE),
                                        (t.yAxisScale = []),
                                        (t.xAxisScale = null),
                                        (t.xAxisTicksPositions = []),
                                        (t.yLabelsCoords = []),
                                        (t.yTitleCoords = []),
                                        (t.barPadForNumericAxis = 0),
                                        (t.padHorizontal = 0),
                                        (t.xRange = 0),
                                        (t.yRange = []),
                                        (t.zRange = 0),
                                        (t.dataPoints = 0),
                                        (t.xTickAmount = 0);
                                },
                            },
                            {
                                key: "globalVars",
                                value: function (t) {
                                    return {
                                        chartID: null,
                                        cuid: null,
                                        events: { beforeMount: [], mounted: [], updated: [], clicked: [], selection: [], dataPointSelection: [], zoomed: [], scrolled: [] },
                                        colors: [],
                                        clientX: null,
                                        clientY: null,
                                        fill: { colors: [] },
                                        stroke: { colors: [] },
                                        dataLabels: { style: { colors: [] } },
                                        radarPolygons: { fill: { colors: [] } },
                                        markers: { colors: [], size: t.markers.size, largestSize: 0 },
                                        animationEnded: !1,
                                        isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints,
                                        isDirty: !1,
                                        isExecCalled: !1,
                                        initialConfig: null,
                                        initialSeries: [],
                                        lastXAxis: [],
                                        lastYAxis: [],
                                        columnSeries: null,
                                        labels: [],
                                        timescaleLabels: [],
                                        noLabelsProvided: !1,
                                        allSeriesCollapsed: !1,
                                        collapsedSeries: [],
                                        collapsedSeriesIndices: [],
                                        ancillaryCollapsedSeries: [],
                                        ancillaryCollapsedSeriesIndices: [],
                                        risingSeries: [],
                                        dataFormatXNumeric: !1,
                                        capturedSeriesIndex: -1,
                                        capturedDataPointIndex: -1,
                                        selectedDataPoints: [],
                                        goldenPadding: 35,
                                        invalidLogScale: !1,
                                        ignoreYAxisIndexes: [],
                                        yAxisSameScaleIndices: [],
                                        maxValsInArrayIndex: 0,
                                        radialSize: 0,
                                        selection: void 0,
                                        zoomEnabled: "zoom" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,
                                        panEnabled: "pan" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,
                                        selectionEnabled: "selection" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,
                                        yaxis: null,
                                        mousedown: !1,
                                        lastClientPosition: {},
                                        visibleXRange: void 0,
                                        yValueDecimal: 0,
                                        total: 0,
                                        SVGNS: "http://www.w3.org/2000/svg",
                                        svgWidth: 0,
                                        svgHeight: 0,
                                        noData: !1,
                                        locale: {},
                                        dom: {},
                                        memory: { methodsToExec: [] },
                                        shouldAnimate: !0,
                                        skipLastTimelinelabel: !1,
                                        skipFirstTimelinelabel: !1,
                                        delayedElements: [],
                                        axisCharts: !0,
                                        isDataXYZ: !1,
                                        resized: !1,
                                        resizeTimer: null,
                                        comboCharts: !1,
                                        dataChanged: !1,
                                        previousPaths: [],
                                        allSeriesHasEqualX: !0,
                                        pointsArray: [],
                                        dataLabelsRects: [],
                                        lastDrawnDataLabelsIndexes: [],
                                        hasNullValues: !1,
                                        easing: null,
                                        zoomed: !1,
                                        gridWidth: 0,
                                        gridHeight: 0,
                                        rotateXLabels: !1,
                                        defaultLabels: !1,
                                        xLabelFormatter: void 0,
                                        yLabelFormatters: [],
                                        xaxisTooltipFormatter: void 0,
                                        ttKeyFormatter: void 0,
                                        ttVal: void 0,
                                        ttZFormatter: void 0,
                                        LINE_HEIGHT_RATIO: 1.618,
                                        xAxisLabelsHeight: 0,
                                        xAxisGroupLabelsHeight: 0,
                                        xAxisLabelsWidth: 0,
                                        yAxisLabelsWidth: 0,
                                        scaleX: 1,
                                        scaleY: 1,
                                        translateX: 0,
                                        translateY: 0,
                                        translateYAxisX: [],
                                        yAxisWidths: [],
                                        translateXAxisY: 0,
                                        translateXAxisX: 0,
                                        tooltip: null,
                                    };
                                },
                            },
                            {
                                key: "init",
                                value: function (t) {
                                    var e = this.globalVars(t);
                                    return (
                                        this.initGlobalVars(e), (e.initialConfig = z.extend({}, t)), (e.initialSeries = z.clone(t.series)), (e.lastXAxis = z.clone(e.initialConfig.xaxis)), (e.lastYAxis = z.clone(e.initialConfig.yaxis)), e
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                de = (function () {
                    function A(t) {
                        B(this, A), (this.opts = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "init",
                                value: function () {
                                    var t = new Xt(this.opts).init({ responsiveOverride: !1 });
                                    return { config: t, globals: new Kt().init(t) };
                                },
                            },
                        ]),
                        A
                    );
                })(),
                vt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.opts = null), (this.seriesIndex = 0);
                    }
                    return (
                        m(A, [
                            {
                                key: "clippedImgArea",
                                value: function (t) {
                                    var e = this.w,
                                        i = e.config,
                                        a = parseInt(e.globals.gridWidth, 10),
                                        s = parseInt(e.globals.gridHeight, 10),
                                        n = a > s ? a : s,
                                        o = t.image,
                                        r = 0,
                                        d = 0;
                                    void 0 === t.width && void 0 === t.height
                                        ? void 0 !== i.fill.image.width && void 0 !== i.fill.image.height
                                            ? ((r = i.fill.image.width + 1), (d = i.fill.image.height))
                                            : ((r = n + 1), (d = n))
                                        : ((r = t.width), (d = t.height));
                                    var c = document.createElementNS(e.globals.SVGNS, "pattern");
                                    E.setAttrs(c, { id: t.patternID, patternUnits: t.patternUnits ? t.patternUnits : "userSpaceOnUse", width: r + "px", height: d + "px" });
                                    var g = document.createElementNS(e.globals.SVGNS, "image");
                                    c.appendChild(g),
                                        g.setAttributeNS(window.SVG.xlink, "href", o),
                                        E.setAttrs(g, { x: 0, y: 0, preserveAspectRatio: "none", width: r + "px", height: d + "px" }),
                                        (g.style.opacity = t.opacity),
                                        e.globals.dom.elDefs.node.appendChild(c);
                                },
                            },
                            {
                                key: "getSeriesIndex",
                                value: function (t) {
                                    var e = this.w,
                                        i = e.config.chart.type;
                                    return (
                                        (this.seriesIndex = (("bar" === i || "rangeBar" === i) && e.config.plotOptions.bar.distributed) || "heatmap" === i || "treemap" === i ? t.seriesNumber : t.seriesNumber % e.globals.series.length),
                                        this.seriesIndex
                                    );
                                },
                            },
                            {
                                key: "fillPath",
                                value: function (t) {
                                    var e = this.w;
                                    this.opts = t;
                                    var i,
                                        a,
                                        s,
                                        n = this.w.config;
                                    this.seriesIndex = this.getSeriesIndex(t);
                                    var o = this.getFillColors()[this.seriesIndex];
                                    void 0 !== e.globals.seriesColors[this.seriesIndex] && (o = e.globals.seriesColors[this.seriesIndex]),
                                        "function" == typeof o && (o = o({ seriesIndex: this.seriesIndex, dataPointIndex: t.dataPointIndex, value: t.value, w: e }));
                                    var r = t.fillType ? t.fillType : this.getFillType(this.seriesIndex),
                                        d = Array.isArray(n.fill.opacity) ? n.fill.opacity[this.seriesIndex] : n.fill.opacity;
                                    t.color && (o = t.color);
                                    var c = o;
                                    if (
                                        (-1 === o.indexOf("rgb") ? o.length < 9 && (c = z.hexToRgba(o, d)) : o.indexOf("rgba") > -1 && (d = z.getOpacityFromRGBA(o)),
                                        t.opacity && (d = t.opacity),
                                        "pattern" === r && (a = this.handlePatternFill({ fillConfig: t.fillConfig, patternFill: a, fillColor: o, fillOpacity: d, defaultColor: c })),
                                        "gradient" === r && (s = this.handleGradientFill({ fillConfig: t.fillConfig, fillColor: o, fillOpacity: d, i: this.seriesIndex })),
                                        "image" === r)
                                    ) {
                                        var g = n.fill.image.src,
                                            u = t.patternID ? t.patternID : "";
                                        this.clippedImgArea({
                                            opacity: d,
                                            image: Array.isArray(g) ? (t.seriesNumber < g.length ? g[t.seriesNumber] : g[0]) : g,
                                            width: t.width ? t.width : void 0,
                                            height: t.height ? t.height : void 0,
                                            patternUnits: t.patternUnits,
                                            patternID: "pattern"
                                                .concat(e.globals.cuid)
                                                .concat(t.seriesNumber + 1)
                                                .concat(u),
                                        }),
                                            (i = "url(#pattern"
                                                .concat(e.globals.cuid)
                                                .concat(t.seriesNumber + 1)
                                                .concat(u, ")"));
                                    } else i = "gradient" === r ? s : "pattern" === r ? a : c;
                                    return t.solid && (i = c), i;
                                },
                            },
                            {
                                key: "getFillType",
                                value: function (t) {
                                    var e = this.w;
                                    return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type;
                                },
                            },
                            {
                                key: "getFillColors",
                                value: function () {
                                    var t = this.w,
                                        e = t.config,
                                        i = this.opts,
                                        a = [];
                                    return (
                                        t.globals.comboCharts
                                            ? "line" === t.config.series[this.seriesIndex].type
                                                ? Array.isArray(t.globals.stroke.colors)
                                                    ? (a = t.globals.stroke.colors)
                                                    : a.push(t.globals.stroke.colors)
                                                : Array.isArray(t.globals.fill.colors)
                                                ? (a = t.globals.fill.colors)
                                                : a.push(t.globals.fill.colors)
                                            : "line" === e.chart.type
                                            ? Array.isArray(t.globals.stroke.colors)
                                                ? (a = t.globals.stroke.colors)
                                                : a.push(t.globals.stroke.colors)
                                            : Array.isArray(t.globals.fill.colors)
                                            ? (a = t.globals.fill.colors)
                                            : a.push(t.globals.fill.colors),
                                        void 0 !== i.fillColors && ((a = []), Array.isArray(i.fillColors) ? (a = i.fillColors.slice()) : a.push(i.fillColors)),
                                        a
                                    );
                                },
                            },
                            {
                                key: "handlePatternFill",
                                value: function (t) {
                                    var e = t.fillConfig,
                                        a = t.fillColor,
                                        s = t.fillOpacity,
                                        n = t.defaultColor,
                                        o = this.w.config.fill;
                                    e && (o = e);
                                    var r = this.opts,
                                        d = new E(this.ctx),
                                        c = Array.isArray(o.pattern.strokeWidth) ? o.pattern.strokeWidth[this.seriesIndex] : o.pattern.strokeWidth,
                                        g = a;
                                    return Array.isArray(o.pattern.style)
                                        ? void 0 !== o.pattern.style[r.seriesNumber]
                                            ? d.drawPattern(o.pattern.style[r.seriesNumber], o.pattern.width, o.pattern.height, g, c, s)
                                            : n
                                        : d.drawPattern(o.pattern.style, o.pattern.width, o.pattern.height, g, c, s);
                                },
                            },
                            {
                                key: "handleGradientFill",
                                value: function (t) {
                                    var e = t.fillColor,
                                        i = t.fillOpacity,
                                        a = t.fillConfig,
                                        s = t.i,
                                        n = this.w.config.fill;
                                    a && (n = F(F({}, n), a));
                                    var o,
                                        r = this.opts,
                                        d = new E(this.ctx),
                                        c = new z(),
                                        g = n.gradient.type,
                                        u = e,
                                        p = void 0 === n.gradient.opacityFrom ? i : Array.isArray(n.gradient.opacityFrom) ? n.gradient.opacityFrom[s] : n.gradient.opacityFrom;
                                    u.indexOf("rgba") > -1 && (p = z.getOpacityFromRGBA(u));
                                    var x = void 0 === n.gradient.opacityTo ? i : Array.isArray(n.gradient.opacityTo) ? n.gradient.opacityTo[s] : n.gradient.opacityTo;
                                    if (void 0 === n.gradient.gradientToColors || 0 === n.gradient.gradientToColors.length)
                                        o = c.shadeColor("dark" === n.gradient.shade ? -1 * parseFloat(n.gradient.shadeIntensity) : parseFloat(n.gradient.shadeIntensity), e.indexOf("rgb") > -1 ? z.rgb2hex(e) : e);
                                    else if (n.gradient.gradientToColors[r.seriesNumber]) {
                                        var y = n.gradient.gradientToColors[r.seriesNumber];
                                        (o = y), y.indexOf("rgba") > -1 && (x = z.getOpacityFromRGBA(y));
                                    } else o = e;
                                    if ((n.gradient.gradientFrom && (u = n.gradient.gradientFrom), n.gradient.gradientTo && (o = n.gradient.gradientTo), n.gradient.inverseColors)) {
                                        var C = u;
                                        (u = o), (o = C);
                                    }
                                    return u.indexOf("rgb") > -1 && (u = z.rgb2hex(u)), o.indexOf("rgb") > -1 && (o = z.rgb2hex(o)), d.drawGradient(g, u, o, p, x, r.size, n.gradient.stops, n.gradient.colorStops, s);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Dt = (function () {
                    function A(t, e) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "setGlobalMarkerSize",
                                value: function () {
                                    var t = this.w;
                                    if (((t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [t.config.markers.size]), t.globals.markers.size.length > 0)) {
                                        if (t.globals.markers.size.length < t.globals.series.length + 1)
                                            for (var e = 0; e <= t.globals.series.length; e++) void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0]);
                                    } else
                                        t.globals.markers.size = t.config.series.map(function (i) {
                                            return t.config.markers.size;
                                        });
                                },
                            },
                            {
                                key: "plotChartMarkers",
                                value: function (t, e, i, a) {
                                    var s,
                                        n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
                                        o = this.w,
                                        r = e,
                                        d = t,
                                        c = null,
                                        g = new E(this.ctx),
                                        u = o.config.markers.discrete && o.config.markers.discrete.length;
                                    if (
                                        ((o.globals.markers.size[e] > 0 || n || u) && (c = g.group({ class: n || u ? "" : "apexcharts-series-markers" })).attr("clip-path", "url(#gridRectMarkerMask".concat(o.globals.cuid, ")")),
                                        Array.isArray(d.x))
                                    )
                                        for (var p = 0; p < d.x.length; p++) {
                                            var x = i;
                                            1 === i && 0 === p && (x = 0), 1 === i && 1 === p && (x = 1);
                                            var y = "apexcharts-marker";
                                            if (
                                                (("line" !== o.config.chart.type && "area" !== o.config.chart.type) || o.globals.comboCharts || o.config.tooltip.intersect || (y += " no-pointer-events"),
                                                (Array.isArray(o.config.markers.size) ? o.globals.markers.size[e] > 0 : o.config.markers.size > 0) || n || u)
                                            ) {
                                                z.isNumber(d.y[p]) ? (y += " w".concat(z.randomId())) : (y = "apexcharts-nullpoint");
                                                var C = this.getMarkerConfig({ cssClass: y, seriesIndex: e, dataPointIndex: x });
                                                o.config.series[r].data[x] &&
                                                    (o.config.series[r].data[x].fillColor && (C.pointFillColor = o.config.series[r].data[x].fillColor),
                                                    o.config.series[r].data[x].strokeColor && (C.pointStrokeColor = o.config.series[r].data[x].strokeColor)),
                                                    a && (C.pSize = a),
                                                    (d.x[p] < 0 || d.x[p] > o.globals.gridWidth || d.y[p] < 0 || d.y[p] > o.globals.gridHeight) && (C.pSize = 0),
                                                    (s = g.drawMarker(d.x[p], d.y[p], C)).attr("rel", x),
                                                    s.attr("j", x),
                                                    s.attr("index", e),
                                                    s.node.setAttribute("default-marker-size", C.pSize),
                                                    new H(this.ctx).setSelectionFilter(s, e, x),
                                                    this.addEvents(s),
                                                    c && c.add(s);
                                            } else void 0 === o.globals.pointsArray[e] && (o.globals.pointsArray[e] = []), o.globals.pointsArray[e].push([d.x[p], d.y[p]]);
                                        }
                                    return c;
                                },
                            },
                            {
                                key: "getMarkerConfig",
                                value: function (t) {
                                    var e = t.cssClass,
                                        i = t.seriesIndex,
                                        a = t.dataPointIndex,
                                        s = void 0 === a ? null : a,
                                        n = t.finishRadius,
                                        o = void 0 === n ? null : n,
                                        r = this.w,
                                        d = this.getMarkerStyle(i),
                                        c = r.globals.markers.size[i],
                                        g = r.config.markers;
                                    return (
                                        null !== s &&
                                            g.discrete.length &&
                                            g.discrete.map(function (u) {
                                                u.seriesIndex === i && u.dataPointIndex === s && ((d.pointStrokeColor = u.strokeColor), (d.pointFillColor = u.fillColor), (c = u.size), (d.pointShape = u.shape));
                                            }),
                                        {
                                            pSize: null === o ? c : o,
                                            pRadius: g.radius,
                                            width: Array.isArray(g.width) ? g.width[i] : g.width,
                                            height: Array.isArray(g.height) ? g.height[i] : g.height,
                                            pointStrokeWidth: Array.isArray(g.strokeWidth) ? g.strokeWidth[i] : g.strokeWidth,
                                            pointStrokeColor: d.pointStrokeColor,
                                            pointFillColor: d.pointFillColor,
                                            shape: d.pointShape || (Array.isArray(g.shape) ? g.shape[i] : g.shape),
                                            class: e,
                                            pointStrokeOpacity: Array.isArray(g.strokeOpacity) ? g.strokeOpacity[i] : g.strokeOpacity,
                                            pointStrokeDashArray: Array.isArray(g.strokeDashArray) ? g.strokeDashArray[i] : g.strokeDashArray,
                                            pointFillOpacity: Array.isArray(g.fillOpacity) ? g.fillOpacity[i] : g.fillOpacity,
                                            seriesIndex: i,
                                        }
                                    );
                                },
                            },
                            {
                                key: "addEvents",
                                value: function (t) {
                                    var e = this.w,
                                        i = new E(this.ctx);
                                    t.node.addEventListener("mouseenter", i.pathMouseEnter.bind(this.ctx, t)),
                                        t.node.addEventListener("mouseleave", i.pathMouseLeave.bind(this.ctx, t)),
                                        t.node.addEventListener("mousedown", i.pathMouseDown.bind(this.ctx, t)),
                                        t.node.addEventListener("click", e.config.markers.onClick),
                                        t.node.addEventListener("dblclick", e.config.markers.onDblClick),
                                        t.node.addEventListener("touchstart", i.pathMouseDown.bind(this.ctx, t), { passive: !0 });
                                },
                            },
                            {
                                key: "getMarkerStyle",
                                value: function (t) {
                                    var e = this.w,
                                        i = e.globals.markers.colors,
                                        a = e.config.markers.strokeColor || e.config.markers.strokeColors;
                                    return { pointStrokeColor: Array.isArray(a) ? a[t] : a, pointFillColor: Array.isArray(i) ? i[t] : i };
                                },
                            },
                        ]),
                        A
                    );
                })(),
                jt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.initialAnim = this.w.config.chart.animations.enabled), (this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled);
                    }
                    return (
                        m(A, [
                            {
                                key: "draw",
                                value: function (t, e, i) {
                                    var a = this.w,
                                        s = new E(this.ctx),
                                        n = i.realIndex,
                                        o = i.pointsPos,
                                        r = i.zRatio,
                                        d = i.elParent,
                                        c = s.group({ class: "apexcharts-series-markers apexcharts-series-".concat(a.config.chart.type) });
                                    if ((c.attr("clip-path", "url(#gridRectMarkerMask".concat(a.globals.cuid, ")")), Array.isArray(o.x)))
                                        for (var g = 0; g < o.x.length; g++) {
                                            var u = e + 1,
                                                p = !0;
                                            0 === e && 0 === g && (u = 0), 0 === e && 1 === g && (u = 1);
                                            var x = 0,
                                                y = a.globals.markers.size[n];
                                            if (r !== 1 / 0) {
                                                var C = a.config.plotOptions.bubble;
                                                (y = a.globals.seriesZ[n][u]),
                                                    C.zScaling && (y /= r),
                                                    C.minBubbleRadius && y < C.minBubbleRadius && (y = C.minBubbleRadius),
                                                    C.maxBubbleRadius && y > C.maxBubbleRadius && (y = C.maxBubbleRadius);
                                            }
                                            a.config.chart.animations.enabled || (x = y);
                                            var P = o.y[g];
                                            if (((x = x || 0), (null !== P && void 0 !== a.globals.series[n][u]) || (p = !1), p)) {
                                                var l = this.drawPoint(o.x[g], P, x, y, n, u, e);
                                                c.add(l);
                                            }
                                            d.add(c);
                                        }
                                },
                            },
                            {
                                key: "drawPoint",
                                value: function (t, e, i, a, s, n, o) {
                                    var r = this.w,
                                        d = s,
                                        c = new j(this.ctx),
                                        g = new H(this.ctx),
                                        u = new vt(this.ctx),
                                        p = new Dt(this.ctx),
                                        x = new E(this.ctx),
                                        y = p.getMarkerConfig({
                                            cssClass: "apexcharts-marker",
                                            seriesIndex: d,
                                            dataPointIndex: n,
                                            finishRadius: "bubble" === r.config.chart.type || (r.globals.comboCharts && r.config.series[s] && "bubble" === r.config.series[s].type) ? a : null,
                                        });
                                    a = y.pSize;
                                    var C,
                                        w = u.fillPath({ seriesNumber: s, dataPointIndex: n, color: y.pointFillColor, patternUnits: "objectBoundingBox", value: r.globals.series[s][o] });
                                    if (
                                        ("circle" === y.shape ? (C = x.drawCircle(i)) : ("square" !== y.shape && "rect" !== y.shape) || (C = x.drawRect(0, 0, y.width - y.pointStrokeWidth / 2, y.height - y.pointStrokeWidth / 2, y.pRadius)),
                                        r.config.series[d].data[n] && r.config.series[d].data[n].fillColor && (w = r.config.series[d].data[n].fillColor),
                                        C.attr({
                                            x: t - y.width / 2 - y.pointStrokeWidth / 2,
                                            y: e - y.height / 2 - y.pointStrokeWidth / 2,
                                            cx: t,
                                            cy: e,
                                            fill: w,
                                            "fill-opacity": y.pointFillOpacity,
                                            stroke: y.pointStrokeColor,
                                            r: a,
                                            "stroke-width": y.pointStrokeWidth,
                                            "stroke-dasharray": y.pointStrokeDashArray,
                                            "stroke-opacity": y.pointStrokeOpacity,
                                        }),
                                        r.config.chart.dropShadow.enabled && g.dropShadow(C, r.config.chart.dropShadow, s),
                                        !this.initialAnim || r.globals.dataChanged || r.globals.resized
                                            ? (r.globals.animationEnded = !0)
                                            : c.animateMarker(C, 0, "circle" === y.shape ? a : { width: y.width, height: y.height }, r.config.chart.animations.speed, r.globals.easing, function () {
                                                  window.setTimeout(function () {
                                                      c.animationCompleted(C);
                                                  }, 100);
                                              }),
                                        r.globals.dataChanged && "circle" === y.shape)
                                    )
                                        if (this.dynamicAnim) {
                                            var f,
                                                v,
                                                S,
                                                M,
                                                L = r.config.chart.animations.dynamicAnimation.speed;
                                            null != (M = r.globals.previousPaths[s] && r.globals.previousPaths[s][o]) && ((f = M.x), (v = M.y), (S = void 0 !== M.r ? M.r : a));
                                            for (var k = 0; k < r.globals.collapsedSeries.length; k++) r.globals.collapsedSeries[k].index === s && ((L = 1), (a = 0));
                                            0 === t && 0 === e && (a = 0), c.animateCircle(C, { cx: f, cy: v, r: S }, { cx: t, cy: e, r: a }, L, r.globals.easing);
                                        } else C.attr({ r: a });
                                    return C.attr({ rel: n, j: n, index: s, "default-marker-size": a }), g.setSelectionFilter(C, s, n), p.addEvents(C), C.node.classList.add("apexcharts-marker"), C;
                                },
                            },
                            {
                                key: "centerTextInBubble",
                                value: function (t) {
                                    return { y: (t += parseInt(this.w.config.dataLabels.style.fontSize, 10) / 4) };
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Mt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "dataLabelsCorrection",
                                value: function (t, e, i, a, s, n, o) {
                                    var r = this.w,
                                        d = !1,
                                        c = new E(this.ctx).getTextRects(i, o),
                                        g = c.width,
                                        u = c.height;
                                    if (
                                        (e < 0 && (e = 0),
                                        e > r.globals.gridHeight + u && (e = r.globals.gridHeight + u / 2),
                                        void 0 === r.globals.dataLabelsRects[a] && (r.globals.dataLabelsRects[a] = []),
                                        r.globals.dataLabelsRects[a].push({ x: t, y: e, width: g, height: u }),
                                        void 0 !== r.globals.dataLabelsRects[a][r.globals.dataLabelsRects[a].length - 2])
                                    ) {
                                        var y = r.globals.dataLabelsRects[a][void 0 !== r.globals.lastDrawnDataLabelsIndexes[a] ? r.globals.lastDrawnDataLabelsIndexes[a][r.globals.lastDrawnDataLabelsIndexes[a].length - 1] : 0];
                                        (t > y.x + y.width + 2 || e > y.y + y.height + 2 || t + g < y.x) && (d = !0);
                                    }
                                    return (0 === s || n) && (d = !0), { x: t, y: e, textRects: c, drawnextLabel: d };
                                },
                            },
                            {
                                key: "drawDataLabel",
                                value: function (t) {
                                    var e = this,
                                        i = t.type,
                                        a = t.pos,
                                        s = t.i,
                                        n = t.j,
                                        o = t.isRangeStart,
                                        r = t.strokeWidth,
                                        d = void 0 === r ? 2 : r,
                                        c = this.w,
                                        g = new E(this.ctx),
                                        u = c.config.dataLabels,
                                        p = 0,
                                        x = 0,
                                        y = n,
                                        C = null;
                                    if (!u.enabled || !Array.isArray(a.x)) return C;
                                    C = g.group({ class: "apexcharts-data-labels" });
                                    for (var w = 0; w < a.x.length; w++)
                                        if (((p = a.x[w] + u.offsetX), (x = a.y[w] + u.offsetY + d), !isNaN(p))) {
                                            1 === n && 0 === w && (y = 0), 1 === n && 1 === w && (y = 1);
                                            var P = c.globals.series[s][y];
                                            "rangeArea" === i && (P = o ? c.globals.seriesRangeStart[s][y] : c.globals.seriesRangeEnd[s][y]);
                                            var l = "",
                                                f = function (v) {
                                                    return c.config.dataLabels.formatter(v, { ctx: e.ctx, seriesIndex: s, dataPointIndex: y, w: c });
                                                };
                                            "bubble" === c.config.chart.type ? ((l = f((P = c.globals.seriesZ[s][y]))), (x = a.y[w]), (x = new jt(this.ctx).centerTextInBubble(x, s, y).y)) : void 0 !== P && (l = f(P)),
                                                this.plotDataLabelsText({ x: p, y: x, text: l, i: s, j: y, parent: C, offsetCorrection: !0, dataLabelsConfig: c.config.dataLabels });
                                        }
                                    return C;
                                },
                            },
                            {
                                key: "plotDataLabelsText",
                                value: function (t) {
                                    var e = this.w,
                                        i = new E(this.ctx),
                                        a = t.x,
                                        s = t.y,
                                        n = t.i,
                                        o = t.j,
                                        r = t.text,
                                        d = t.textAnchor,
                                        c = t.fontSize,
                                        g = t.parent,
                                        u = t.dataLabelsConfig,
                                        p = t.color,
                                        x = t.alwaysDrawDataLabel,
                                        y = t.offsetCorrection;
                                    if (!(Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(n) < 0)) {
                                        var C = { x: a, y: s, drawnextLabel: !0, textRects: null };
                                        y && (C = this.dataLabelsCorrection(a, s, r, n, o, x, parseInt(u.style.fontSize, 10))),
                                            e.globals.zoomed || ((a = C.x), (s = C.y)),
                                            C.textRects && (a < -10 - C.textRects.width || a > e.globals.gridWidth + C.textRects.width + 10) && (r = "");
                                        var w = e.globals.dataLabels.style.colors[n];
                                        ((("bar" === e.config.chart.type || "rangeBar" === e.config.chart.type) && e.config.plotOptions.bar.distributed) || e.config.dataLabels.distributed) && (w = e.globals.dataLabels.style.colors[o]),
                                            "function" == typeof w && (w = w({ series: e.globals.series, seriesIndex: n, dataPointIndex: o, w: e })),
                                            p && (w = p);
                                        var P = u.offsetX,
                                            l = u.offsetY;
                                        if ((("bar" !== e.config.chart.type && "rangeBar" !== e.config.chart.type) || ((P = 0), (l = 0)), C.drawnextLabel)) {
                                            var f = i.drawText({
                                                width: 100,
                                                height: parseInt(u.style.fontSize, 10),
                                                x: a + P,
                                                y: s + l,
                                                foreColor: w,
                                                textAnchor: d || u.textAnchor,
                                                text: r,
                                                fontSize: c || u.style.fontSize,
                                                fontFamily: u.style.fontFamily,
                                                fontWeight: u.style.fontWeight || "normal",
                                            });
                                            if ((f.attr({ class: "apexcharts-datalabel", cx: a, cy: s }), u.dropShadow.enabled)) {
                                                var v = u.dropShadow;
                                                new H(this.ctx).dropShadow(f, v);
                                            }
                                            g.add(f), void 0 === e.globals.lastDrawnDataLabelsIndexes[n] && (e.globals.lastDrawnDataLabelsIndexes[n] = []), e.globals.lastDrawnDataLabelsIndexes[n].push(o);
                                        }
                                    }
                                },
                            },
                            {
                                key: "addBackgroundToDataLabel",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = i.config.dataLabels.background,
                                        s = a.padding,
                                        n = a.padding / 2,
                                        o = e.width,
                                        r = e.height,
                                        d = new E(this.ctx).drawRect(
                                            e.x - s,
                                            e.y - n / 2,
                                            o + 2 * s,
                                            r + n,
                                            a.borderRadius,
                                            "transparent" === i.config.chart.background ? "#fff" : i.config.chart.background,
                                            a.opacity,
                                            a.borderWidth,
                                            a.borderColor
                                        );
                                    return a.dropShadow.enabled && new H(this.ctx).dropShadow(d, a.dropShadow), d;
                                },
                            },
                            {
                                key: "dataLabelsBackground",
                                value: function () {
                                    var t = this.w;
                                    if ("bubble" !== t.config.chart.type)
                                        for (var e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i = 0; i < e.length; i++) {
                                            var a = e[i],
                                                s = a.getBBox(),
                                                n = null;
                                            if ((s.width && s.height && (n = this.addBackgroundToDataLabel(a, s)), n)) {
                                                a.parentNode.insertBefore(n.node, a);
                                                var o = a.getAttribute("fill");
                                                !t.config.chart.animations.enabled || t.globals.resized || t.globals.dataChanged ? n.attr({ fill: o }) : n.animate().attr({ fill: o }),
                                                    a.setAttribute("fill", t.config.dataLabels.background.foreColor);
                                            }
                                        }
                                },
                            },
                            {
                                key: "bringForward",
                                value: function () {
                                    for (var t = this.w, e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i = t.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a = 0; a < e.length; a++)
                                        i && i.insertBefore(e[a], i.nextSibling);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                bt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.legendInactiveClass = "legend-mouseover-inactive");
                    }
                    return (
                        m(A, [
                            {
                                key: "getAllSeriesEls",
                                value: function () {
                                    return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
                                },
                            },
                            {
                                key: "getSeriesByName",
                                value: function (t) {
                                    return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(z.escapeString(t), "']"));
                                },
                            },
                            {
                                key: "isSeriesHidden",
                                value: function (t) {
                                    var e = this.getSeriesByName(t),
                                        i = parseInt(e.getAttribute("data:realIndex"), 10);
                                    return { isHidden: e.classList.contains("apexcharts-series-collapsed"), realIndex: i };
                                },
                            },
                            {
                                key: "addCollapsedClassToSeries",
                                value: function (t, e) {
                                    var i = this.w;
                                    function a(s) {
                                        for (var n = 0; n < s.length; n++) s[n].index === e && t.node.classList.add("apexcharts-series-collapsed");
                                    }
                                    a(i.globals.collapsedSeries), a(i.globals.ancillaryCollapsedSeries);
                                },
                            },
                            {
                                key: "toggleSeries",
                                value: function (t) {
                                    var e = this.isSeriesHidden(t);
                                    return this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, e.isHidden), e.isHidden;
                                },
                            },
                            {
                                key: "showSeries",
                                value: function (t) {
                                    var e = this.isSeriesHidden(t);
                                    e.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !0);
                                },
                            },
                            {
                                key: "hideSeries",
                                value: function (t) {
                                    var e = this.isSeriesHidden(t);
                                    e.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !1);
                                },
                            },
                            {
                                key: "resetSeries",
                                value: function () {
                                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
                                        e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                        i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                        a = this.w,
                                        s = z.clone(a.globals.initialSeries);
                                    (a.globals.previousPaths = []),
                                        i
                                            ? ((a.globals.collapsedSeries = []), (a.globals.ancillaryCollapsedSeries = []), (a.globals.collapsedSeriesIndices = []), (a.globals.ancillaryCollapsedSeriesIndices = []))
                                            : (s = this.emptyCollapsedSeries(s)),
                                        (a.config.series = s),
                                        t && (e && ((a.globals.zoomed = !1), this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled));
                                },
                            },
                            {
                                key: "emptyCollapsedSeries",
                                value: function (t) {
                                    for (var e = this.w, i = 0; i < t.length; i++) e.globals.collapsedSeriesIndices.indexOf(i) > -1 && (t[i].data = []);
                                    return t;
                                },
                            },
                            {
                                key: "toggleSeriesOnHover",
                                value: function (t, e) {
                                    var i = this.w;
                                    e || (e = t.target);
                                    var a = i.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");
                                    if ("mousemove" === t.type) {
                                        var s = parseInt(e.getAttribute("rel"), 10) - 1,
                                            n = null,
                                            o = null;
                                        i.globals.axisCharts || "radialBar" === i.config.chart.type
                                            ? i.globals.axisCharts
                                                ? ((n = i.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(s, "']"))),
                                                  (o = i.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(s, "']"))))
                                                : (n = i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s + 1, "']")))
                                            : (n = i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s + 1, "'] path")));
                                        for (var r = 0; r < a.length; r++) a[r].classList.add(this.legendInactiveClass);
                                        null !== n &&
                                            (i.globals.axisCharts || n.parentNode.classList.remove(this.legendInactiveClass), n.classList.remove(this.legendInactiveClass), null !== o && o.classList.remove(this.legendInactiveClass));
                                    } else if ("mouseout" === t.type) for (var d = 0; d < a.length; d++) a[d].classList.remove(this.legendInactiveClass);
                                },
                            },
                            {
                                key: "highlightRangeInSeries",
                                value: function (t, e) {
                                    var i = this,
                                        a = this.w,
                                        s = a.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"),
                                        n = function (r) {
                                            for (var d = 0; d < s.length; d++) s[d].classList[r](i.legendInactiveClass);
                                        };
                                    if ("mousemove" === t.type) {
                                        var o = parseInt(e.getAttribute("rel"), 10) - 1;
                                        n("add"),
                                            (function (r) {
                                                for (var d = 0; d < s.length; d++) {
                                                    var c = parseInt(s[d].getAttribute("val"), 10);
                                                    c >= r.from && c <= r.to && s[d].classList.remove(i.legendInactiveClass);
                                                }
                                            })(a.config.plotOptions.heatmap.colorScale.ranges[o]);
                                    } else "mouseout" === t.type && n("remove");
                                },
                            },
                            {
                                key: "getActiveConfigSeriesIndex",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "asc",
                                        e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
                                        i = this.w,
                                        a = 0;
                                    if (i.config.series.length > 1)
                                        for (
                                            var s = i.config.series.map(function (o, r) {
                                                    return o.data &&
                                                        o.data.length > 0 &&
                                                        -1 === i.globals.collapsedSeriesIndices.indexOf(r) &&
                                                        (!i.globals.comboCharts || 0 === e.length || (e.length && e.indexOf(i.config.series[r].type) > -1))
                                                        ? r
                                                        : -1;
                                                }),
                                                n = "asc" === t ? 0 : s.length - 1;
                                            "asc" === t ? n < s.length : n >= 0;
                                            "asc" === t ? n++ : n--
                                        )
                                            if (-1 !== s[n]) {
                                                a = s[n];
                                                break;
                                            }
                                    return a;
                                },
                            },
                            {
                                key: "getBarSeriesIndices",
                                value: function () {
                                    return this.w.globals.comboCharts
                                        ? this.w.config.series
                                              .map(function (t, e) {
                                                  return "bar" === t.type || "column" === t.type ? e : -1;
                                              })
                                              .filter(function (t) {
                                                  return -1 !== t;
                                              })
                                        : this.w.config.series.map(function (t, e) {
                                              return e;
                                          });
                                },
                            },
                            {
                                key: "getPreviousPaths",
                                value: function () {
                                    var t = this.w;
                                    function e(n, o, r) {
                                        for (var d = n[o].childNodes, c = { type: r, paths: [], realIndex: n[o].getAttribute("data:realIndex") }, g = 0; g < d.length; g++)
                                            if (d[g].hasAttribute("pathTo")) {
                                                var u = d[g].getAttribute("pathTo");
                                                c.paths.push({ d: u });
                                            }
                                        t.globals.previousPaths.push(c);
                                    }
                                    (t.globals.previousPaths = []),
                                        ["line", "area", "bar", "rangebar", "rangeArea", "candlestick", "radar"].forEach(function (n) {
                                            for (var r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(n, "-series .apexcharts-series")), d = 0; d < r.length; d++) e(r, d, n);
                                        }),
                                        this.handlePrevBubbleScatterPaths("bubble"),
                                        this.handlePrevBubbleScatterPaths("scatter");
                                    var i = t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t.config.chart.type, " .apexcharts-series"));
                                    if (i.length > 0)
                                        for (
                                            var a = function (n) {
                                                    for (
                                                        var o = t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(n, "'] rect")),
                                                            r = [],
                                                            d = function (g) {
                                                                var u = function (x) {
                                                                        return o[g].getAttribute(x);
                                                                    },
                                                                    p = { x: parseFloat(u("x")), y: parseFloat(u("y")), width: parseFloat(u("width")), height: parseFloat(u("height")) };
                                                                r.push({ rect: p, color: o[g].getAttribute("color") });
                                                            },
                                                            c = 0;
                                                        c < o.length;
                                                        c++
                                                    )
                                                        d(c);
                                                    t.globals.previousPaths.push(r);
                                                },
                                                s = 0;
                                            s < i.length;
                                            s++
                                        )
                                            a(s);
                                    t.globals.axisCharts || (t.globals.previousPaths = t.globals.series);
                                },
                            },
                            {
                                key: "handlePrevBubbleScatterPaths",
                                value: function (t) {
                                    var e = this.w,
                                        i = e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t, "-series .apexcharts-series"));
                                    if (i.length > 0)
                                        for (var a = 0; a < i.length; a++) {
                                            for (var s = e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t, "-series .apexcharts-series[data\\:realIndex='").concat(a, "'] circle")), n = [], o = 0; o < s.length; o++)
                                                n.push({ x: s[o].getAttribute("cx"), y: s[o].getAttribute("cy"), r: s[o].getAttribute("r") });
                                            e.globals.previousPaths.push(n);
                                        }
                                },
                            },
                            {
                                key: "clearPreviousPaths",
                                value: function () {
                                    var t = this.w;
                                    (t.globals.previousPaths = []), (t.globals.allSeriesCollapsed = !1);
                                },
                            },
                            {
                                key: "handleNoData",
                                value: function () {
                                    var t = this.w,
                                        e = t.config.noData,
                                        i = new E(this.ctx),
                                        a = t.globals.svgWidth / 2,
                                        s = t.globals.svgHeight / 2,
                                        n = "middle";
                                    if (
                                        ((t.globals.noData = !0),
                                        (t.globals.animationEnded = !0),
                                        "left" === e.align ? ((a = 10), (n = "start")) : "right" === e.align && ((a = t.globals.svgWidth - 10), (n = "end")),
                                        "top" === e.verticalAlign ? (s = 50) : "bottom" === e.verticalAlign && (s = t.globals.svgHeight - 50),
                                        (a += e.offsetX),
                                        (s = s + parseInt(e.style.fontSize, 10) + 2 + e.offsetY),
                                        void 0 !== e.text && "" !== e.text)
                                    ) {
                                        var o = i.drawText({ x: a, y: s, text: e.text, textAnchor: n, fontSize: e.style.fontSize, fontFamily: e.style.fontFamily, foreColor: e.style.color, opacity: 1, class: "apexcharts-text-nodata" });
                                        t.globals.dom.Paper.add(o);
                                    }
                                },
                            },
                            {
                                key: "setNullSeriesToZeroValues",
                                value: function (t) {
                                    for (var e = this.w, i = 0; i < t.length; i++) if (0 === t[i].length) for (var a = 0; a < t[e.globals.maxValsInArrayIndex].length; a++) t[i].push(0);
                                    return t;
                                },
                            },
                            {
                                key: "hasAllSeriesEqualX",
                                value: function () {
                                    for (var t = !0, e = this.w, i = this.filteredSeriesX(), a = 0; a < i.length - 1; a++)
                                        if (i[a][0] !== i[a + 1][0]) {
                                            t = !1;
                                            break;
                                        }
                                    return (e.globals.allSeriesHasEqualX = t), t;
                                },
                            },
                            {
                                key: "filteredSeriesX",
                                value: function () {
                                    return this.w.globals.seriesX.map(function (e) {
                                        return e.length > 0 ? e : [];
                                    });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                qt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.twoDSeries = []), (this.threeDSeries = []), (this.twoDSeriesX = []), (this.seriesGoals = []), (this.coreUtils = new $(this.ctx));
                    }
                    return (
                        m(A, [
                            {
                                key: "isMultiFormat",
                                value: function () {
                                    return this.isFormatXY() || this.isFormat2DArray();
                                },
                            },
                            {
                                key: "isFormatXY",
                                value: function () {
                                    var t = this.w.config.series.slice(),
                                        e = new bt(this.ctx);
                                    if (
                                        ((this.activeSeriesIndex = e.getActiveConfigSeriesIndex()),
                                        void 0 !== t[this.activeSeriesIndex].data &&
                                            t[this.activeSeriesIndex].data.length > 0 &&
                                            null !== t[this.activeSeriesIndex].data[0] &&
                                            void 0 !== t[this.activeSeriesIndex].data[0].x &&
                                            null !== t[this.activeSeriesIndex].data[0])
                                    )
                                        return !0;
                                },
                            },
                            {
                                key: "isFormat2DArray",
                                value: function () {
                                    var t = this.w.config.series.slice(),
                                        e = new bt(this.ctx);
                                    if (
                                        ((this.activeSeriesIndex = e.getActiveConfigSeriesIndex()),
                                        void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null != t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array)
                                    )
                                        return !0;
                                },
                            },
                            {
                                key: "handleFormat2DArray",
                                value: function (t, e) {
                                    for (var i = this.w.config, a = this.w.globals, s = "boxPlot" === i.chart.type || "boxPlot" === i.series[e].type, n = 0; n < t[e].data.length; n++)
                                        if (
                                            (void 0 !== t[e].data[n][1] &&
                                                (Array.isArray(t[e].data[n][1]) && 4 === t[e].data[n][1].length && !s
                                                    ? this.twoDSeries.push(z.parseNumber(t[e].data[n][1][3]))
                                                    : this.twoDSeries.push(z.parseNumber(t[e].data[n].length >= 5 ? t[e].data[n][4] : t[e].data[n][1])),
                                                (a.dataFormatXNumeric = !0)),
                                            "datetime" === i.xaxis.type)
                                        ) {
                                            var o = new Date(t[e].data[n][0]);
                                            (o = new Date(o).getTime()), this.twoDSeriesX.push(o);
                                        } else this.twoDSeriesX.push(t[e].data[n][0]);
                                    for (var r = 0; r < t[e].data.length; r++) void 0 !== t[e].data[r][2] && (this.threeDSeries.push(t[e].data[r][2]), (a.isDataXYZ = !0));
                                },
                            },
                            {
                                key: "handleFormatXY",
                                value: function (t, e) {
                                    var i = this.w.config,
                                        a = this.w.globals,
                                        s = new gt(this.ctx),
                                        n = e;
                                    a.collapsedSeriesIndices.indexOf(e) > -1 && (n = this.activeSeriesIndex);
                                    for (var o = 0; o < t[e].data.length; o++)
                                        void 0 !== t[e].data[o].y && (Array.isArray(t[e].data[o].y) ? this.twoDSeries.push(z.parseNumber(t[e].data[o].y[t[e].data[o].y.length - 1])) : this.twoDSeries.push(z.parseNumber(t[e].data[o].y))),
                                            void 0 !== t[e].data[o].goals && Array.isArray(t[e].data[o].goals)
                                                ? (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(t[e].data[o].goals))
                                                : (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(null));
                                    for (var r = 0; r < t[n].data.length; r++) {
                                        var d = "string" == typeof t[n].data[r].x,
                                            c = Array.isArray(t[n].data[r].x),
                                            g = !c && !!s.isValidDate(t[n].data[r].x.toString());
                                        d || g
                                            ? d || i.xaxis.convertedCatToNumeric
                                                ? "datetime" !== i.xaxis.type || (a.isBarHorizontal && a.isRangeData)
                                                    ? ((this.fallbackToCategory = !0), this.twoDSeriesX.push(t[n].data[r].x))
                                                    : this.twoDSeriesX.push(s.parseDate(t[n].data[r].x))
                                                : "datetime" === i.xaxis.type
                                                ? this.twoDSeriesX.push(s.parseDate(t[n].data[r].x.toString()))
                                                : ((a.dataFormatXNumeric = !0), (a.isXNumeric = !0), this.twoDSeriesX.push(parseFloat(t[n].data[r].x)))
                                            : c
                                            ? ((this.fallbackToCategory = !0), this.twoDSeriesX.push(t[n].data[r].x))
                                            : ((a.isXNumeric = !0), (a.dataFormatXNumeric = !0), this.twoDSeriesX.push(t[n].data[r].x));
                                    }
                                    if (t[e].data[0] && void 0 !== t[e].data[0].z) {
                                        for (var p = 0; p < t[e].data.length; p++) this.threeDSeries.push(t[e].data[p].z);
                                        a.isDataXYZ = !0;
                                    }
                                },
                            },
                            {
                                key: "handleRangeData",
                                value: function (t, e) {
                                    var i = this.w.globals,
                                        a = {};
                                    return (
                                        this.isFormat2DArray() ? (a = this.handleRangeDataFormat("array", t, e)) : this.isFormatXY() && (a = this.handleRangeDataFormat("xy", t, e)),
                                        i.seriesRangeStart.push(a.start),
                                        i.seriesRangeEnd.push(a.end),
                                        i.seriesRange.push(a.rangeUniques),
                                        i.seriesRange.forEach(function (s, n) {
                                            s &&
                                                s.forEach(function (o, r) {
                                                    o.y.forEach(function (d, c) {
                                                        for (var g = 0; g < o.y.length; g++)
                                                            c !== g &&
                                                                d.y1 <= o.y[g].y2 &&
                                                                o.y[g].y1 <= d.y2 &&
                                                                (o.overlaps.indexOf(d.rangeName) < 0 && o.overlaps.push(d.rangeName), o.overlaps.indexOf(o.y[g].rangeName) < 0 && o.overlaps.push(o.y[g].rangeName));
                                                    });
                                                });
                                        }),
                                        a
                                    );
                                },
                            },
                            {
                                key: "handleCandleStickBoxData",
                                value: function (t, e) {
                                    var i = this.w.globals,
                                        a = {};
                                    return (
                                        this.isFormat2DArray() ? (a = this.handleCandleStickBoxDataFormat("array", t, e)) : this.isFormatXY() && (a = this.handleCandleStickBoxDataFormat("xy", t, e)),
                                        (i.seriesCandleO[e] = a.o),
                                        (i.seriesCandleH[e] = a.h),
                                        (i.seriesCandleM[e] = a.m),
                                        (i.seriesCandleL[e] = a.l),
                                        (i.seriesCandleC[e] = a.c),
                                        a
                                    );
                                },
                            },
                            {
                                key: "handleRangeDataFormat",
                                value: function (t, e, i) {
                                    var a = [],
                                        s = [],
                                        n = e[i].data
                                            .filter(function (c, g, u) {
                                                return (
                                                    g ===
                                                    u.findIndex(function (p) {
                                                        return p.x === c.x;
                                                    })
                                                );
                                            })
                                            .map(function (c, g) {
                                                return { x: c.x, overlaps: [], y: [] };
                                            });
                                    if ("array" === t) for (var o = 0; o < e[i].data.length; o++) Array.isArray(e[i].data[o]) ? (a.push(e[i].data[o][1][0]), s.push(e[i].data[o][1][1])) : (a.push(e[i].data[o]), s.push(e[i].data[o]));
                                    else if ("xy" === t)
                                        for (
                                            var r = function (c) {
                                                    var g = Array.isArray(e[i].data[c].y),
                                                        u = z.randomId(),
                                                        p = e[i].data[c].x,
                                                        x = { y1: g ? e[i].data[c].y[0] : e[i].data[c].y, y2: g ? e[i].data[c].y[1] : e[i].data[c].y, rangeName: u };
                                                    e[i].data[c].rangeName = u;
                                                    var y = n.findIndex(function (C) {
                                                        return C.x === p;
                                                    });
                                                    n[y].y.push(x), a.push(x.y1), s.push(x.y2);
                                                },
                                                d = 0;
                                            d < e[i].data.length;
                                            d++
                                        )
                                            r(d);
                                    return { start: a, end: s, rangeUniques: n };
                                },
                            },
                            {
                                key: "handleCandleStickBoxDataFormat",
                                value: function (t, e, i) {
                                    var a = this.w,
                                        s = "boxPlot" === a.config.chart.type || "boxPlot" === a.config.series[i].type,
                                        n = [],
                                        o = [],
                                        r = [],
                                        d = [],
                                        c = [];
                                    if ("array" === t)
                                        if ((s && 6 === e[i].data[0].length) || (!s && 5 === e[i].data[0].length))
                                            for (var g = 0; g < e[i].data.length; g++)
                                                n.push(e[i].data[g][1]), o.push(e[i].data[g][2]), s ? (r.push(e[i].data[g][3]), d.push(e[i].data[g][4]), c.push(e[i].data[g][5])) : (d.push(e[i].data[g][3]), c.push(e[i].data[g][4]));
                                        else
                                            for (var u = 0; u < e[i].data.length; u++)
                                                Array.isArray(e[i].data[u][1]) &&
                                                    (n.push(e[i].data[u][1][0]),
                                                    o.push(e[i].data[u][1][1]),
                                                    s ? (r.push(e[i].data[u][1][2]), d.push(e[i].data[u][1][3]), c.push(e[i].data[u][1][4])) : (d.push(e[i].data[u][1][2]), c.push(e[i].data[u][1][3])));
                                    else if ("xy" === t)
                                        for (var p = 0; p < e[i].data.length; p++)
                                            Array.isArray(e[i].data[p].y) &&
                                                (n.push(e[i].data[p].y[0]),
                                                o.push(e[i].data[p].y[1]),
                                                s ? (r.push(e[i].data[p].y[2]), d.push(e[i].data[p].y[3]), c.push(e[i].data[p].y[4])) : (d.push(e[i].data[p].y[2]), c.push(e[i].data[p].y[3])));
                                    return { o: n, h: o, m: r, l: d, c };
                                },
                            },
                            {
                                key: "parseDataAxisCharts",
                                value: function (t) {
                                    var e,
                                        i = this,
                                        a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx,
                                        s = this.w.config,
                                        n = this.w.globals,
                                        o = new gt(a),
                                        r = s.labels.length > 0 ? s.labels.slice() : s.xaxis.categories.slice();
                                    if (
                                        ((n.isRangeBar = "rangeBar" === s.chart.type && n.isBarHorizontal),
                                        (n.hasXaxisGroups = "category" === s.xaxis.type && s.xaxis.group.groups.length > 0),
                                        n.hasXaxisGroups && (n.groups = s.xaxis.group.groups),
                                        (n.hasSeriesGroups = null === (e = t[0]) || void 0 === e ? void 0 : e.group),
                                        n.hasSeriesGroups)
                                    ) {
                                        var d = [],
                                            c = G(
                                                new Set(
                                                    t.map(function (x) {
                                                        return x.group;
                                                    })
                                                )
                                            );
                                        t.forEach(function (x, y) {
                                            var C = c.indexOf(x.group);
                                            d[C] || (d[C] = []), d[C].push(x.name);
                                        }),
                                            (n.seriesGroups = d);
                                    }
                                    for (
                                        var g = function () {
                                                for (var x = 0; x < r.length; x++)
                                                    if ("string" == typeof r[x]) {
                                                        if (!o.isValidDate(r[x])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                                                        i.twoDSeriesX.push(o.parseDate(r[x]));
                                                    } else i.twoDSeriesX.push(r[x]);
                                            },
                                            u = 0;
                                        u < t.length;
                                        u++
                                    ) {
                                        if (((this.twoDSeries = []), (this.twoDSeriesX = []), (this.threeDSeries = []), void 0 === t[u].data))
                                            return void console.error("It is a possibility that you may have not included 'data' property in series.");
                                        if (
                                            (("rangeBar" !== s.chart.type && "rangeArea" !== s.chart.type && "rangeBar" !== t[u].type && "rangeArea" !== t[u].type) ||
                                                ((n.isRangeData = !0),
                                                n.isComboCharts
                                                    ? ("rangeBar" !== t[u].type && "rangeArea" !== t[u].type) || this.handleRangeData(t, u)
                                                    : ("rangeBar" !== s.chart.type && "rangeArea" !== s.chart.type) || this.handleRangeData(t, u)),
                                            this.isMultiFormat())
                                        )
                                            this.isFormat2DArray() ? this.handleFormat2DArray(t, u) : this.isFormatXY() && this.handleFormatXY(t, u),
                                                ("candlestick" !== s.chart.type && "candlestick" !== t[u].type && "boxPlot" !== s.chart.type && "boxPlot" !== t[u].type) || this.handleCandleStickBoxData(t, u),
                                                n.series.push(this.twoDSeries),
                                                n.labels.push(this.twoDSeriesX),
                                                n.seriesX.push(this.twoDSeriesX),
                                                (n.seriesGoals = this.seriesGoals),
                                                u !== this.activeSeriesIndex || this.fallbackToCategory || (n.isXNumeric = !0);
                                        else {
                                            "datetime" === s.xaxis.type
                                                ? ((n.isXNumeric = !0), g(), n.seriesX.push(this.twoDSeriesX))
                                                : "numeric" === s.xaxis.type && ((n.isXNumeric = !0), r.length > 0 && ((this.twoDSeriesX = r), n.seriesX.push(this.twoDSeriesX))),
                                                n.labels.push(this.twoDSeriesX);
                                            var p = t[u].data.map(function (x) {
                                                return z.parseNumber(x);
                                            });
                                            n.series.push(p);
                                        }
                                        n.seriesZ.push(this.threeDSeries), n.seriesNames.push(void 0 !== t[u].name ? t[u].name : "series-" + parseInt(u + 1, 10)), n.seriesColors.push(void 0 !== t[u].color ? t[u].color : void 0);
                                    }
                                    return this.w;
                                },
                            },
                            {
                                key: "parseDataNonAxisCharts",
                                value: function (t) {
                                    var e = this.w.globals,
                                        i = this.w.config;
                                    (e.series = t.slice()), (e.seriesNames = i.labels.slice());
                                    for (var a = 0; a < e.series.length; a++) void 0 === e.seriesNames[a] && e.seriesNames.push("series-" + (a + 1));
                                    return this.w;
                                },
                            },
                            {
                                key: "handleExternalLabelsData",
                                value: function (t) {
                                    var e = this.w.config,
                                        i = this.w.globals;
                                    e.xaxis.categories.length > 0
                                        ? (i.labels = e.xaxis.categories)
                                        : e.labels.length > 0
                                        ? (i.labels = e.labels.slice())
                                        : this.fallbackToCategory
                                        ? ((i.labels = i.labels[0]),
                                          i.seriesRange.length &&
                                              (i.seriesRange.map(function (a) {
                                                  a.forEach(function (s) {
                                                      i.labels.indexOf(s.x) < 0 && s.x && i.labels.push(s.x);
                                                  });
                                              }),
                                              (i.labels = Array.from(new Set(i.labels.map(JSON.stringify)), JSON.parse))),
                                          e.xaxis.convertedCatToNumeric && (new Et(e).convertCatToNumericXaxis(e, this.ctx, i.seriesX[0]), this._generateExternalLabels(t)))
                                        : this._generateExternalLabels(t);
                                },
                            },
                            {
                                key: "_generateExternalLabels",
                                value: function (t) {
                                    var e = this.w.globals,
                                        i = this.w.config,
                                        a = [];
                                    if (e.axisCharts) {
                                        if (e.series.length > 0)
                                            if (this.isFormatXY())
                                                for (
                                                    var s = i.series.map(function (g, u) {
                                                            return g.data.filter(function (p, x, y) {
                                                                return (
                                                                    y.findIndex(function (C) {
                                                                        return C.x === p.x;
                                                                    }) === x
                                                                );
                                                            });
                                                        }),
                                                        n = s.reduce(function (g, u, p, x) {
                                                            return x[g].length > u.length ? g : p;
                                                        }, 0),
                                                        o = 0;
                                                    o < s[n].length;
                                                    o++
                                                )
                                                    a.push(o + 1);
                                            else for (var r = 0; r < e.series[e.maxValsInArrayIndex].length; r++) a.push(r + 1);
                                        e.seriesX = [];
                                        for (var d = 0; d < t.length; d++) e.seriesX.push(a);
                                        this.w.globals.isBarHorizontal || (e.isXNumeric = !0);
                                    }
                                    if (0 === a.length) {
                                        a = e.axisCharts
                                            ? []
                                            : e.series.map(function (g, u) {
                                                  return u + 1;
                                              });
                                        for (var c = 0; c < t.length; c++) e.seriesX.push(a);
                                    }
                                    (e.labels = a),
                                        i.xaxis.convertedCatToNumeric &&
                                            (e.categoryLabels = a.map(function (g) {
                                                return i.xaxis.labels.formatter(g);
                                            })),
                                        (e.noLabelsProvided = !0);
                                },
                            },
                            {
                                key: "parseData",
                                value: function (t) {
                                    var e = this.w,
                                        i = e.config,
                                        a = e.globals;
                                    if (
                                        (this.excludeCollapsedSeriesInYAxis(),
                                        (this.fallbackToCategory = !1),
                                        this.ctx.core.resetGlobals(),
                                        this.ctx.core.isMultipleY(),
                                        a.axisCharts ? (this.parseDataAxisCharts(t), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t),
                                        i.chart.stacked)
                                    ) {
                                        var s = new bt(this.ctx);
                                        a.series = s.setNullSeriesToZeroValues(a.series);
                                    }
                                    this.coreUtils.getSeriesTotals(),
                                        a.axisCharts && (a.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals()),
                                        this.coreUtils.getPercentSeries(),
                                        a.dataFormatXNumeric || (a.isXNumeric && ("numeric" !== i.xaxis.type || 0 !== i.labels.length || 0 !== i.xaxis.categories.length)) || this.handleExternalLabelsData(t);
                                    for (var n = this.coreUtils.getCategoryLabels(a.labels), o = 0; o < n.length; o++)
                                        if (Array.isArray(n[o])) {
                                            a.isMultiLineX = !0;
                                            break;
                                        }
                                },
                            },
                            {
                                key: "excludeCollapsedSeriesInYAxis",
                                value: function () {
                                    var t = this,
                                        e = this.w;
                                    e.globals.ignoreYAxisIndexes = e.globals.collapsedSeries.map(function (i, a) {
                                        if (t.w.globals.isMultipleYAxis && !e.config.chart.stacked) return i.index;
                                    });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Pt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "getLabel",
                                value: function (t, e, i, a) {
                                    var C,
                                        w,
                                        s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [],
                                        n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px",
                                        o = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6],
                                        r = this.w,
                                        d = void 0 === t[a] ? "" : t[a],
                                        c = d,
                                        g = r.globals.xLabelFormatter,
                                        u = r.config.xaxis.labels.formatter,
                                        p = !1,
                                        x = new At(this.ctx),
                                        y = d;
                                    o && ((c = x.xLabelFormat(g, d, y, { i: a, dateFormatter: new gt(this.ctx).formatDate, w: r })), void 0 !== u && (c = u(d, t[a], { i: a, dateFormatter: new gt(this.ctx).formatDate, w: r }))),
                                        e.length > 0
                                            ? ((C = e[a].unit),
                                              (w = null),
                                              e.forEach(function (v) {
                                                  "month" === v.unit ? (w = "year") : "day" === v.unit ? (w = "month") : "hour" === v.unit ? (w = "day") : "minute" === v.unit && (w = "hour");
                                              }),
                                              (p = w === C),
                                              (i = e[a].position),
                                              (c = e[a].value))
                                            : "datetime" === r.config.xaxis.type && void 0 === u && (c = ""),
                                        void 0 === c && (c = ""),
                                        (c = Array.isArray(c) ? c : c.toString());
                                    var P = new E(this.ctx),
                                        l = {};
                                    l = r.globals.rotateXLabels && o ? P.getTextRects(c, parseInt(n, 10), null, "rotate(".concat(r.config.xaxis.labels.rotate, " 0 0)"), !1) : P.getTextRects(c, parseInt(n, 10));
                                    var f = !r.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
                                    return (
                                        !Array.isArray(c) && (0 === c.indexOf("NaN") || 0 === c.toLowerCase().indexOf("invalid") || c.toLowerCase().indexOf("infinity") >= 0 || (s.indexOf(c) >= 0 && f)) && (c = ""),
                                        { x: i, text: c, textRect: l, isBold: p }
                                    );
                                },
                            },
                            {
                                key: "checkLabelBasedOnTickamount",
                                value: function (t, e, i) {
                                    var a = this.w,
                                        s = a.config.xaxis.tickAmount;
                                    return "dataPoints" === s && (s = Math.round(a.globals.gridWidth / 120)), s > i || t % Math.round(i / (s + 1)) == 0 || (e.text = ""), e;
                                },
                            },
                            {
                                key: "checkForOverflowingLabels",
                                value: function (t, e, i, a, s) {
                                    var n = this.w;
                                    if ((0 === t && n.globals.skipFirstTimelinelabel && (e.text = ""), t === i - 1 && n.globals.skipLastTimelinelabel && (e.text = ""), n.config.xaxis.labels.hideOverlappingLabels && a.length > 0)) {
                                        var o = s[s.length - 1];
                                        e.x < o.textRect.width / (n.globals.rotateXLabels ? Math.abs(n.config.xaxis.labels.rotate) / 12 : 1.01) + o.x && (e.text = "");
                                    }
                                    return e;
                                },
                            },
                            {
                                key: "checkForReversedLabels",
                                value: function (t, e) {
                                    var i = this.w;
                                    return i.config.yaxis[t] && i.config.yaxis[t].reversed && e.reverse(), e;
                                },
                            },
                            {
                                key: "isYAxisHidden",
                                value: function (t) {
                                    var e = this.w,
                                        i = new $(this.ctx);
                                    return !e.config.yaxis[t].show || (!e.config.yaxis[t].showForNullSeries && i.isSeriesNull(t) && -1 === e.globals.collapsedSeriesIndices.indexOf(t));
                                },
                            },
                            {
                                key: "getYAxisForeColor",
                                value: function (t, e) {
                                    var i = this.w;
                                    return Array.isArray(t) && i.globals.yAxisScale[e] && this.ctx.theme.pushExtraColors(t, i.globals.yAxisScale[e].result.length, !1), t;
                                },
                            },
                            {
                                key: "drawYAxisTicks",
                                value: function (t, e, i, a, s, n, o) {
                                    var r = this.w,
                                        d = new E(this.ctx),
                                        c = r.globals.translateY;
                                    if (a.show && e > 0) {
                                        !0 === r.config.yaxis[s].opposite && (t += a.width);
                                        for (var g = e; g >= 0; g--) {
                                            var u = c + e / 10 + r.config.yaxis[s].labels.offsetY - 1;
                                            r.globals.isBarHorizontal && (u = n * g), "heatmap" === r.config.chart.type && (u += n / 2);
                                            var p = d.drawLine(t + i.offsetX - a.width + a.offsetX, u + a.offsetY, t + i.offsetX + a.offsetX, u + a.offsetY, a.color);
                                            o.add(p), (c += n);
                                        }
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Rt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "scaleSvgNode",
                                value: function (t, e) {
                                    var i = parseFloat(t.getAttributeNS(null, "width")),
                                        a = parseFloat(t.getAttributeNS(null, "height"));
                                    t.setAttributeNS(null, "width", i * e), t.setAttributeNS(null, "height", a * e), t.setAttributeNS(null, "viewBox", "0 0 " + i + " " + a);
                                },
                            },
                            {
                                key: "fixSvgStringForIe11",
                                value: function (t) {
                                    if (!z.isIE11()) return t.replace(/&nbsp;/g, "&#160;");
                                    var e = 0,
                                        i = t.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, function (a) {
                                            return 2 == ++e ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"' : a;
                                        });
                                    return (i = i.replace(/xmlns:NS\d+=""/g, "")).replace(/NS\d+:(\w+:\w+=")/g, "$1");
                                },
                            },
                            {
                                key: "getSvgString",
                                value: function (t) {
                                    null == t && (t = 1);
                                    var e = this.w.globals.dom.Paper.svg();
                                    if (1 !== t) {
                                        var i = this.w.globals.dom.Paper.node.cloneNode(!0);
                                        this.scaleSvgNode(i, t), (e = new XMLSerializer().serializeToString(i));
                                    }
                                    return this.fixSvgStringForIe11(e);
                                },
                            },
                            {
                                key: "cleanup",
                                value: function () {
                                    var t = this.w,
                                        e = t.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"),
                                        i = t.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"),
                                        a = t.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
                                    Array.prototype.forEach.call(a, function (s) {
                                        s.setAttribute("width", 0);
                                    }),
                                        e && e[0] && (e[0].setAttribute("x", -500), e[0].setAttribute("x1", -500), e[0].setAttribute("x2", -500)),
                                        i && i[0] && (i[0].setAttribute("y", -100), i[0].setAttribute("y1", -100), i[0].setAttribute("y2", -100));
                                },
                            },
                            {
                                key: "svgUrl",
                                value: function () {
                                    this.cleanup();
                                    var t = this.getSvgString(),
                                        e = new Blob([t], { type: "image/svg+xml;charset=utf-8" });
                                    return URL.createObjectURL(e);
                                },
                            },
                            {
                                key: "dataURI",
                                value: function (t) {
                                    var e = this;
                                    return new Promise(function (i) {
                                        var a = e.w,
                                            s = t ? t.scale || t.width / a.globals.svgWidth : 1;
                                        e.cleanup();
                                        var n = document.createElement("canvas");
                                        (n.width = a.globals.svgWidth * s), (n.height = parseInt(a.globals.dom.elWrap.style.height, 10) * s);
                                        var o = "transparent" === a.config.chart.background ? "#fff" : a.config.chart.background,
                                            r = n.getContext("2d");
                                        (r.fillStyle = o), r.fillRect(0, 0, n.width * s, n.height * s);
                                        var d = e.getSvgString(s);
                                        if (window.canvg && z.isIE11()) {
                                            var c = window.canvg.Canvg.fromString(r, d, { ignoreClear: !0, ignoreDimensions: !0 });
                                            c.start();
                                            var g = n.msToBlob();
                                            c.stop(), i({ blob: g });
                                        } else {
                                            var u = "data:image/svg+xml," + encodeURIComponent(d),
                                                p = new Image();
                                            (p.crossOrigin = "anonymous"),
                                                (p.onload = function () {
                                                    if ((r.drawImage(p, 0, 0), n.msToBlob)) {
                                                        var x = n.msToBlob();
                                                        i({ blob: x });
                                                    } else {
                                                        var y = n.toDataURL("image/png");
                                                        i({ imgURI: y });
                                                    }
                                                }),
                                                (p.src = u);
                                        }
                                    });
                                },
                            },
                            {
                                key: "exportToSVG",
                                value: function () {
                                    this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, ".svg");
                                },
                            },
                            {
                                key: "exportToPng",
                                value: function () {
                                    var t = this;
                                    this.dataURI().then(function (e) {
                                        var i = e.imgURI,
                                            a = e.blob;
                                        a ? navigator.msSaveOrOpenBlob(a, t.w.globals.chartID + ".png") : t.triggerDownload(i, t.w.config.chart.toolbar.export.png.filename, ".png");
                                    });
                                },
                            },
                            {
                                key: "exportToCSV",
                                value: function (t) {
                                    var e = this,
                                        i = t.series,
                                        a = t.fileName,
                                        s = t.columnDelimiter,
                                        n = void 0 === s ? "," : s,
                                        o = t.lineDelimiter,
                                        r = void 0 === o ? "\n" : o,
                                        d = this.w;
                                    i || (i = d.config.series);
                                    var c = [],
                                        g = [],
                                        u = "",
                                        p = d.globals.series.map(function (l, f) {
                                            return -1 === d.globals.collapsedSeriesIndices.indexOf(f) ? l : [];
                                        }),
                                        x = Math.max.apply(
                                            Math,
                                            G(
                                                i.map(function (l) {
                                                    return l.data ? l.data.length : 0;
                                                })
                                            )
                                        ),
                                        y = new qt(this.ctx),
                                        C = new Pt(this.ctx),
                                        w = function (l) {
                                            var f = "";
                                            if (d.globals.axisCharts) {
                                                if ("category" === d.config.xaxis.type || d.config.xaxis.convertedCatToNumeric)
                                                    if (d.globals.isBarHorizontal) {
                                                        var v = d.globals.yLabelFormatters[0],
                                                            S = new bt(e.ctx).getActiveConfigSeriesIndex();
                                                        f = v(d.globals.labels[l], { seriesIndex: S, dataPointIndex: l, w: d });
                                                    } else f = C.getLabel(d.globals.labels, d.globals.timescaleLabels, 0, l).text;
                                                "datetime" === d.config.xaxis.type && (d.config.xaxis.categories.length ? (f = d.config.xaxis.categories[l]) : d.config.labels.length && (f = d.config.labels[l]));
                                            } else f = d.config.labels[l];
                                            return Array.isArray(f) && (f = f.join(" ")), z.isNumber(f) ? f : f.split(n).join("");
                                        };
                                    c.push(d.config.chart.toolbar.export.csv.headerCategory),
                                        "boxPlot" === d.config.chart.type
                                            ? (c.push("minimum"), c.push("q1"), c.push("median"), c.push("q3"), c.push("maximum"))
                                            : "candlestick" === d.config.chart.type
                                            ? (c.push("open"), c.push("high"), c.push("low"), c.push("close"))
                                            : "rangeBar" === d.config.chart.type
                                            ? (c.push("minimum"), c.push("maximum"))
                                            : i.map(function (l, f) {
                                                  var v = (l.name ? l.name : "series-".concat(f)) + "";
                                                  d.globals.axisCharts && c.push(v.split(n).join("") ? v.split(n).join("") : "series-".concat(f));
                                              }),
                                        d.globals.axisCharts || (c.push(d.config.chart.toolbar.export.csv.headerValue), g.push(c.join(n))),
                                        i.map(function (l, f) {
                                            d.globals.axisCharts
                                                ? (function (l, f) {
                                                      if ((c.length && 0 === f && g.push(c.join(n)), l.data)) {
                                                          l.data =
                                                              (l.data.length && l.data) ||
                                                              G(Array(x)).map(function () {
                                                                  return "";
                                                              });
                                                          for (var v = 0; v < l.data.length; v++) {
                                                              c = [];
                                                              var S = w(v);
                                                              if ((S || (y.isFormatXY() ? (S = i[f].data[v].x) : y.isFormat2DArray() && (S = i[f].data[v] ? i[f].data[v][0] : "")), 0 === f)) {
                                                                  c.push("datetime" === d.config.xaxis.type && String(S).length >= 10 ? d.config.chart.toolbar.export.csv.dateFormatter(S) : z.isNumber(S) ? S : S.split(n).join(""));
                                                                  for (var M = 0; M < d.globals.series.length; M++) {
                                                                      var L;
                                                                      y.isFormatXY() ? c.push(null === (L = i[M].data[v]) || void 0 === L ? void 0 : L.y) : c.push(p[M][v]);
                                                                  }
                                                              }
                                                              ("candlestick" === d.config.chart.type || (l.type && "candlestick" === l.type)) &&
                                                                  (c.pop(), c.push(d.globals.seriesCandleO[f][v]), c.push(d.globals.seriesCandleH[f][v]), c.push(d.globals.seriesCandleL[f][v]), c.push(d.globals.seriesCandleC[f][v])),
                                                                  ("boxPlot" === d.config.chart.type || (l.type && "boxPlot" === l.type)) &&
                                                                      (c.pop(),
                                                                      c.push(d.globals.seriesCandleO[f][v]),
                                                                      c.push(d.globals.seriesCandleH[f][v]),
                                                                      c.push(d.globals.seriesCandleM[f][v]),
                                                                      c.push(d.globals.seriesCandleL[f][v]),
                                                                      c.push(d.globals.seriesCandleC[f][v])),
                                                                  "rangeBar" === d.config.chart.type && (c.pop(), c.push(d.globals.seriesRangeStart[f][v]), c.push(d.globals.seriesRangeEnd[f][v])),
                                                                  c.length && g.push(c.join(n));
                                                          }
                                                      }
                                                  })(l, f)
                                                : ((c = []).push(d.globals.labels[f].split(n).join("")), c.push(p[f]), g.push(c.join(n)));
                                        }),
                                        (u += g.join(r)),
                                        this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\ufeff" + u), a || d.config.chart.toolbar.export.csv.filename, ".csv");
                                },
                            },
                            {
                                key: "triggerDownload",
                                value: function (t, e, i) {
                                    var a = document.createElement("a");
                                    (a.href = t), (a.download = (e || this.w.globals.chartID) + i), document.body.appendChild(a), a.click(), document.body.removeChild(a);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Yt = (function () {
                    function A(t, e) {
                        B(this, A), (this.ctx = t), (this.elgrid = e), (this.w = t.w);
                        var i = this.w;
                        (this.axesUtils = new Pt(t)),
                            (this.xaxisLabels = i.globals.labels.slice()),
                            i.globals.timescaleLabels.length > 0 && !i.globals.isBarHorizontal && (this.xaxisLabels = i.globals.timescaleLabels.slice()),
                            i.config.xaxis.overwriteCategories && (this.xaxisLabels = i.config.xaxis.overwriteCategories),
                            (this.drawnLabels = []),
                            (this.drawnLabelsRects = []),
                            (this.offY = "top" === i.config.xaxis.position ? 0 : i.globals.gridHeight + 1),
                            (this.offY = this.offY + i.config.xaxis.axisBorder.offsetY),
                            (this.isCategoryBarHorizontal = "bar" === i.config.chart.type && i.config.plotOptions.bar.horizontal),
                            (this.xaxisFontSize = i.config.xaxis.labels.style.fontSize),
                            (this.xaxisFontFamily = i.config.xaxis.labels.style.fontFamily),
                            (this.xaxisForeColors = i.config.xaxis.labels.style.colors),
                            (this.xaxisBorderWidth = i.config.xaxis.axisBorder.width),
                            this.isCategoryBarHorizontal && (this.xaxisBorderWidth = i.config.yaxis[0].axisBorder.width.toString()),
                            (this.xaxisBorderWidth = this.xaxisBorderWidth.indexOf("%") > -1 ? (i.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10)) / 100 : parseInt(this.xaxisBorderWidth, 10)),
                            (this.xaxisBorderHeight = i.config.xaxis.axisBorder.height),
                            (this.yaxis = i.config.yaxis[0]);
                    }
                    return (
                        m(A, [
                            {
                                key: "drawXaxis",
                                value: function () {
                                    var t = this.w,
                                        e = new E(this.ctx),
                                        i = e.group({ class: "apexcharts-xaxis", transform: "translate(".concat(t.config.xaxis.offsetX, ", ").concat(t.config.xaxis.offsetY, ")") }),
                                        a = e.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(t.globals.translateXAxisX, ", ").concat(t.globals.translateXAxisY, ")") });
                                    i.add(a);
                                    for (var s = [], n = 0; n < this.xaxisLabels.length; n++) s.push(this.xaxisLabels[n]);
                                    if (
                                        (this.drawXAxisLabelAndGroup(!0, e, a, s, t.globals.isXNumeric, function (x, y) {
                                            return y;
                                        }),
                                        t.globals.hasXaxisGroups)
                                    ) {
                                        var o = t.globals.groups;
                                        s = [];
                                        for (var r = 0; r < o.length; r++) s.push(o[r].title);
                                        var d = {};
                                        t.config.xaxis.group.style &&
                                            ((d.xaxisFontSize = t.config.xaxis.group.style.fontSize),
                                            (d.xaxisFontFamily = t.config.xaxis.group.style.fontFamily),
                                            (d.xaxisForeColors = t.config.xaxis.group.style.colors),
                                            (d.fontWeight = t.config.xaxis.group.style.fontWeight),
                                            (d.cssClass = t.config.xaxis.group.style.cssClass)),
                                            this.drawXAxisLabelAndGroup(
                                                !1,
                                                e,
                                                a,
                                                s,
                                                !1,
                                                function (x, y) {
                                                    return o[x].cols * y;
                                                },
                                                d
                                            );
                                    }
                                    if (void 0 !== t.config.xaxis.title.text) {
                                        var c = e.group({ class: "apexcharts-xaxis-title" }),
                                            g = e.drawText({
                                                x: t.globals.gridWidth / 2 + t.config.xaxis.title.offsetX,
                                                y: this.offY + parseFloat(this.xaxisFontSize) + ("bottom" === t.config.xaxis.position ? t.globals.xAxisLabelsHeight : -t.globals.xAxisLabelsHeight - 10) + t.config.xaxis.title.offsetY,
                                                text: t.config.xaxis.title.text,
                                                textAnchor: "middle",
                                                fontSize: t.config.xaxis.title.style.fontSize,
                                                fontFamily: t.config.xaxis.title.style.fontFamily,
                                                fontWeight: t.config.xaxis.title.style.fontWeight,
                                                foreColor: t.config.xaxis.title.style.color,
                                                cssClass: "apexcharts-xaxis-title-text " + t.config.xaxis.title.style.cssClass,
                                            });
                                        c.add(g), i.add(c);
                                    }
                                    if (t.config.xaxis.axisBorder.show) {
                                        var u = t.globals.barPadForNumericAxis,
                                            p = e.drawLine(t.globals.padHorizontal + t.config.xaxis.axisBorder.offsetX - u, this.offY, this.xaxisBorderWidth + u, this.offY, t.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
                                        this.elgrid && this.elgrid.elGridBorders && t.config.grid.show ? this.elgrid.elGridBorders.add(p) : i.add(p);
                                    }
                                    return i;
                                },
                            },
                            {
                                key: "drawXAxisLabelAndGroup",
                                value: function (t, e, i, a, s, n) {
                                    var o,
                                        r = this,
                                        d = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {},
                                        c = [],
                                        g = [],
                                        u = this.w,
                                        p = d.xaxisFontSize || this.xaxisFontSize,
                                        x = d.xaxisFontFamily || this.xaxisFontFamily,
                                        y = d.xaxisForeColors || this.xaxisForeColors,
                                        C = d.fontWeight || u.config.xaxis.labels.style.fontWeight,
                                        w = d.cssClass || u.config.xaxis.labels.style.cssClass,
                                        P = u.globals.padHorizontal,
                                        l = a.length,
                                        f = "category" === u.config.xaxis.type ? u.globals.dataPoints : l;
                                    if ((0 === f && l > f && (f = l), s)) {
                                        var v = f > 1 ? f - 1 : f;
                                        P = P + n(0, (o = u.globals.gridWidth / v)) / 2 + u.config.xaxis.labels.offsetX;
                                    } else P = P + n(0, (o = u.globals.gridWidth / f)) + u.config.xaxis.labels.offsetX;
                                    for (
                                        var S = function (L) {
                                                var k = P - n(L, o) / 2 + u.config.xaxis.labels.offsetX;
                                                0 === L && 1 === l && o / 2 === P && 1 === f && (k = u.globals.gridWidth / 2);
                                                var I = r.axesUtils.getLabel(a, u.globals.timescaleLabels, k, L, c, p, t),
                                                    Y = 28;
                                                if (
                                                    (u.globals.rotateXLabels && t && (Y = 22),
                                                    u.config.xaxis.title.text && "top" === u.config.xaxis.position && (Y += parseFloat(u.config.xaxis.title.style.fontSize) + 2),
                                                    t || (Y = Y + parseFloat(p) + (u.globals.xAxisLabelsHeight - u.globals.xAxisGroupLabelsHeight) + (u.globals.rotateXLabels ? 10 : 0)),
                                                    (I =
                                                        void 0 !== u.config.xaxis.tickAmount && "dataPoints" !== u.config.xaxis.tickAmount && "datetime" !== u.config.xaxis.type
                                                            ? r.axesUtils.checkLabelBasedOnTickamount(L, I, l)
                                                            : r.axesUtils.checkForOverflowingLabels(L, I, l, c, g)),
                                                    u.config.xaxis.labels.show)
                                                ) {
                                                    var D = e.drawText({
                                                        x: I.x,
                                                        y: r.offY + u.config.xaxis.labels.offsetY + Y - ("top" === u.config.xaxis.position ? u.globals.xAxisHeight + u.config.xaxis.axisTicks.height - 2 : 0),
                                                        text: I.text,
                                                        textAnchor: "middle",
                                                        fontWeight: I.isBold ? 600 : C,
                                                        fontSize: p,
                                                        fontFamily: x,
                                                        foreColor: Array.isArray(y) ? (t && u.config.xaxis.convertedCatToNumeric ? y[u.globals.minX + L - 1] : y[L]) : y,
                                                        isPlainText: !1,
                                                        cssClass: (t ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + w,
                                                    });
                                                    if (
                                                        (i.add(D),
                                                        D.on("click", function (N) {
                                                            if ("function" == typeof u.config.chart.events.xAxisLabelClick) {
                                                                var Q = Object.assign({}, u, { labelIndex: L });
                                                                u.config.chart.events.xAxisLabelClick(N, r.ctx, Q);
                                                            }
                                                        }),
                                                        t)
                                                    ) {
                                                        var O = document.createElementNS(u.globals.SVGNS, "title");
                                                        (O.textContent = Array.isArray(I.text) ? I.text.join(" ") : I.text), D.node.appendChild(O), "" !== I.text && (c.push(I.text), g.push(I));
                                                    }
                                                }
                                                L < l - 1 && (P += n(L + 1, o));
                                            },
                                            M = 0;
                                        M <= l - 1;
                                        M++
                                    )
                                        S(M);
                                },
                            },
                            {
                                key: "drawXaxisInversed",
                                value: function (t) {
                                    var e,
                                        i,
                                        a = this,
                                        s = this.w,
                                        n = new E(this.ctx),
                                        o = s.config.yaxis[0].opposite ? s.globals.translateYAxisX[t] : 0,
                                        r = n.group({ class: "apexcharts-yaxis apexcharts-xaxis-inversed", rel: t }),
                                        d = n.group({ class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g", transform: "translate(" + o + ", 0)" });
                                    r.add(d);
                                    var c = [];
                                    if (s.config.yaxis[t].show) for (var g = 0; g < this.xaxisLabels.length; g++) c.push(this.xaxisLabels[g]);
                                    i = -(e = s.globals.gridHeight / c.length) / 2.2;
                                    var u = s.globals.yLabelFormatters[0],
                                        p = s.config.yaxis[0].labels;
                                    if (p.show)
                                        for (
                                            var x = function (v) {
                                                    var S = void 0 === c[v] ? "" : c[v];
                                                    S = u(S, { seriesIndex: t, dataPointIndex: v, w: s });
                                                    var M = a.axesUtils.getYAxisForeColor(p.style.colors, t),
                                                        L = 0;
                                                    Array.isArray(S) && (L = (S.length / 2) * parseInt(p.style.fontSize, 10));
                                                    var k = p.offsetX - 15,
                                                        I = "end";
                                                    a.yaxis.opposite && (I = "start"),
                                                        "left" === s.config.yaxis[0].labels.align
                                                            ? ((k = p.offsetX), (I = "start"))
                                                            : "center" === s.config.yaxis[0].labels.align
                                                            ? ((k = p.offsetX), (I = "middle"))
                                                            : "right" === s.config.yaxis[0].labels.align && (I = "end");
                                                    var Y = n.drawText({
                                                        x: k,
                                                        y: i + e + p.offsetY - L,
                                                        text: S,
                                                        textAnchor: I,
                                                        foreColor: Array.isArray(M) ? M[v] : M,
                                                        fontSize: p.style.fontSize,
                                                        fontFamily: p.style.fontFamily,
                                                        fontWeight: p.style.fontWeight,
                                                        isPlainText: !1,
                                                        cssClass: "apexcharts-yaxis-label " + p.style.cssClass,
                                                        maxWidth: p.maxWidth,
                                                    });
                                                    d.add(Y),
                                                        Y.on("click", function (N) {
                                                            if ("function" == typeof s.config.chart.events.xAxisLabelClick) {
                                                                var Q = Object.assign({}, s, { labelIndex: v });
                                                                s.config.chart.events.xAxisLabelClick(N, a.ctx, Q);
                                                            }
                                                        });
                                                    var D = document.createElementNS(s.globals.SVGNS, "title");
                                                    if (((D.textContent = Array.isArray(S) ? S.join(" ") : S), Y.node.appendChild(D), 0 !== s.config.yaxis[t].labels.rotate)) {
                                                        var O = n.rotateAroundCenter(Y.node);
                                                        Y.node.setAttribute("transform", "rotate(".concat(s.config.yaxis[t].labels.rotate, " 0 ").concat(O.y, ")"));
                                                    }
                                                    i += e;
                                                },
                                                y = 0;
                                            y <= c.length - 1;
                                            y++
                                        )
                                            x(y);
                                    if (void 0 !== s.config.yaxis[0].title.text) {
                                        var C = n.group({ class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed", transform: "translate(" + o + ", 0)" }),
                                            w = n.drawText({
                                                x: s.config.yaxis[0].title.offsetX,
                                                y: s.globals.gridHeight / 2 + s.config.yaxis[0].title.offsetY,
                                                text: s.config.yaxis[0].title.text,
                                                textAnchor: "middle",
                                                foreColor: s.config.yaxis[0].title.style.color,
                                                fontSize: s.config.yaxis[0].title.style.fontSize,
                                                fontWeight: s.config.yaxis[0].title.style.fontWeight,
                                                fontFamily: s.config.yaxis[0].title.style.fontFamily,
                                                cssClass: "apexcharts-yaxis-title-text " + s.config.yaxis[0].title.style.cssClass,
                                            });
                                        C.add(w), r.add(C);
                                    }
                                    var P = 0;
                                    this.isCategoryBarHorizontal && s.config.yaxis[0].opposite && (P = s.globals.gridWidth);
                                    var l = s.config.xaxis.axisBorder;
                                    if (l.show) {
                                        var f = n.drawLine(s.globals.padHorizontal + l.offsetX + P, 1 + l.offsetY, s.globals.padHorizontal + l.offsetX + P, s.globals.gridHeight + l.offsetY, l.color, 0);
                                        this.elgrid && this.elgrid.elGridBorders && s.config.grid.show ? this.elgrid.elGridBorders.add(f) : r.add(f);
                                    }
                                    return s.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(P, c.length, s.config.yaxis[0].axisBorder, s.config.yaxis[0].axisTicks, 0, e, r), r;
                                },
                            },
                            {
                                key: "drawXaxisTicks",
                                value: function (t, e, i) {
                                    var a = this.w,
                                        s = t;
                                    if (!(t < 0 || t - 2 > a.globals.gridWidth)) {
                                        var n = this.offY + a.config.xaxis.axisTicks.offsetY;
                                        if (((e = e + n + a.config.xaxis.axisTicks.height), "top" === a.config.xaxis.position && (e = n - a.config.xaxis.axisTicks.height), a.config.xaxis.axisTicks.show)) {
                                            var o = new E(this.ctx).drawLine(
                                                t + a.config.xaxis.axisTicks.offsetX,
                                                n + a.config.xaxis.offsetY,
                                                s + a.config.xaxis.axisTicks.offsetX,
                                                e + a.config.xaxis.offsetY,
                                                a.config.xaxis.axisTicks.color
                                            );
                                            i.add(o), o.node.classList.add("apexcharts-xaxis-tick");
                                        }
                                    }
                                },
                            },
                            {
                                key: "getXAxisTicksPositions",
                                value: function () {
                                    var t = this.w,
                                        e = [],
                                        i = this.xaxisLabels.length,
                                        a = t.globals.padHorizontal;
                                    if (t.globals.timescaleLabels.length > 0) for (var s = 0; s < i; s++) e.push((a = this.xaxisLabels[s].position));
                                    else
                                        for (var n = i, o = 0; o < n; o++) {
                                            var r = n;
                                            t.globals.isXNumeric && "bar" !== t.config.chart.type && (r -= 1), e.push((a += t.globals.gridWidth / r));
                                        }
                                    return e;
                                },
                            },
                            {
                                key: "xAxisLabelCorrections",
                                value: function () {
                                    var t = this.w,
                                        e = new E(this.ctx),
                                        i = t.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"),
                                        a = t.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"),
                                        s = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"),
                                        n = t.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
                                    if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways)
                                        for (var o = 0; o < a.length; o++) {
                                            var r = e.rotateAroundCenter(a[o]);
                                            (r.y = r.y - 1),
                                                (r.x = r.x + 1),
                                                a[o].setAttribute("transform", "rotate(".concat(t.config.xaxis.labels.rotate, " ").concat(r.x, " ").concat(r.y, ")")),
                                                a[o].setAttribute("text-anchor", "end"),
                                                i.setAttribute("transform", "translate(0, ".concat(-10, ")")),
                                                t.config.xaxis.labels.trim &&
                                                    Array.prototype.forEach.call(a[o].childNodes, function (p) {
                                                        e.placeTextWithEllipsis(p, p.textContent, t.globals.xAxisLabelsHeight - ("bottom" === t.config.legend.position ? 20 : 10));
                                                    });
                                        }
                                    else
                                        !(function () {
                                            for (var p = t.globals.gridWidth / (t.globals.labels.length + 1), x = 0; x < a.length; x++)
                                                t.config.xaxis.labels.trim &&
                                                    "datetime" !== t.config.xaxis.type &&
                                                    Array.prototype.forEach.call(a[x].childNodes, function (C) {
                                                        e.placeTextWithEllipsis(C, C.textContent, p);
                                                    });
                                        })();
                                    if (s.length > 0) {
                                        var c = s[s.length - 1].getBBox(),
                                            g = s[0].getBBox();
                                        c.x < -20 && s[s.length - 1].parentNode.removeChild(s[s.length - 1]), g.x + g.width > t.globals.gridWidth && !t.globals.isBarHorizontal && s[0].parentNode.removeChild(s[0]);
                                        for (var u = 0; u < n.length; u++)
                                            e.placeTextWithEllipsis(n[u], n[u].textContent, t.config.yaxis[0].labels.maxWidth - (t.config.yaxis[0].title.text ? 2 * parseFloat(t.config.yaxis[0].title.style.fontSize) : 0) - 15);
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                _t = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                        var e = this.w;
                        (this.xaxisLabels = e.globals.labels.slice()),
                            (this.axesUtils = new Pt(t)),
                            (this.isRangeBar = e.globals.seriesRange.length && e.globals.isBarHorizontal),
                            e.globals.timescaleLabels.length > 0 && (this.xaxisLabels = e.globals.timescaleLabels.slice());
                    }
                    return (
                        m(A, [
                            {
                                key: "drawGridArea",
                                value: function () {
                                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                        e = this.w,
                                        i = new E(this.ctx);
                                    null === t && (t = i.group({ class: "apexcharts-grid" }));
                                    var a = i.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, "transparent"),
                                        s = i.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, "transparent");
                                    return t.add(s), t.add(a), t;
                                },
                            },
                            {
                                key: "drawGrid",
                                value: function () {
                                    var t = null;
                                    return this.w.globals.axisCharts && ((t = this.renderGrid()), this.drawGridArea(t.el)), t;
                                },
                            },
                            {
                                key: "createGridMask",
                                value: function () {
                                    var t = this.w,
                                        e = t.globals,
                                        i = new E(this.ctx),
                                        a = Array.isArray(t.config.stroke.width) ? 0 : t.config.stroke.width;
                                    if (Array.isArray(t.config.stroke.width)) {
                                        var s = 0;
                                        t.config.stroke.width.forEach(function (g) {
                                            s = Math.max(s, g);
                                        }),
                                            (a = s);
                                    }
                                    (e.dom.elGridRectMask = document.createElementNS(e.SVGNS, "clipPath")),
                                        e.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e.cuid)),
                                        (e.dom.elGridRectMarkerMask = document.createElementNS(e.SVGNS, "clipPath")),
                                        e.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e.cuid)),
                                        (e.dom.elForecastMask = document.createElementNS(e.SVGNS, "clipPath")),
                                        e.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e.cuid)),
                                        (e.dom.elNonForecastMask = document.createElementNS(e.SVGNS, "clipPath")),
                                        e.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e.cuid));
                                    var n = t.config.chart.type,
                                        o = 0,
                                        r = 0;
                                    ("bar" === n || "rangeBar" === n || "candlestick" === n || "boxPlot" === n || t.globals.comboBarCount > 0) &&
                                        t.globals.isXNumeric &&
                                        !t.globals.isBarHorizontal &&
                                        ((r = t.config.grid.padding.right), e.barPadForNumericAxis > (o = t.config.grid.padding.left) && ((o = e.barPadForNumericAxis), (r = e.barPadForNumericAxis))),
                                        (e.dom.elGridRect = i.drawRect(-a / 2 - o - 2, -a / 2, e.gridWidth + a + r + o + 4, e.gridHeight + a, 0, "#fff"));
                                    var d = t.globals.markers.largestSize + 1;
                                    (e.dom.elGridRectMarker = i.drawRect(2 * -d, 2 * -d, e.gridWidth + 4 * d, e.gridHeight + 4 * d, 0, "#fff")),
                                        e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node),
                                        e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);
                                    var c = e.dom.baseEl.querySelector("defs");
                                    c.appendChild(e.dom.elGridRectMask), c.appendChild(e.dom.elForecastMask), c.appendChild(e.dom.elNonForecastMask), c.appendChild(e.dom.elGridRectMarkerMask);
                                },
                            },
                            {
                                key: "_drawGridLines",
                                value: function (t) {
                                    var e = t.i,
                                        i = t.x1,
                                        o = t.xCount,
                                        d = this.w;
                                    if (!((0 === e && d.globals.skipFirstTimelinelabel) || (e === o - 1 && d.globals.skipLastTimelinelabel && !d.config.xaxis.labels.formatter) || "radar" === d.config.chart.type)) {
                                        d.config.grid.xaxis.lines.show && this._drawGridLine({ i: e, x1: i, y1: t.y1, x2: t.x2, y2: t.y2, xCount: o, parent: t.parent });
                                        var c = 0;
                                        if (d.globals.hasXaxisGroups && "between" === d.config.xaxis.tickPlacement) {
                                            var g = d.globals.groups;
                                            if (g) {
                                                for (var u = 0, p = 0; u < e && p < g.length; p++) u += g[p].cols;
                                                u === e && (c = 0.6 * d.globals.xAxisLabelsHeight);
                                            }
                                        }
                                        new Yt(this.ctx).drawXaxisTicks(i, c, d.globals.dom.elGraphical);
                                    }
                                },
                            },
                            {
                                key: "_drawGridLine",
                                value: function (t) {
                                    var e = t.i,
                                        i = t.x1,
                                        a = t.y1,
                                        s = t.x2,
                                        n = t.y2,
                                        o = t.xCount,
                                        r = t.parent,
                                        d = this.w,
                                        c = !1,
                                        g = r.node.classList.contains("apexcharts-gridlines-horizontal"),
                                        u = d.config.grid.strokeDashArray,
                                        p = d.globals.barPadForNumericAxis;
                                    ((0 === a && 0 === n) || (0 === i && 0 === s)) && (c = !0), a === d.globals.gridHeight && n === d.globals.gridHeight && (c = !0), !d.globals.isBarHorizontal || (0 !== e && e !== o - 1) || (c = !0);
                                    var x = new E(this).drawLine(i - (g ? p : 0), a, s + (g ? p : 0), n, d.config.grid.borderColor, u);
                                    x.node.classList.add("apexcharts-gridline"), c && d.config.grid.show ? this.elGridBorders.add(x) : r.add(x);
                                },
                            },
                            {
                                key: "_drawGridBandRect",
                                value: function (t) {
                                    var e = t.c,
                                        i = t.x1,
                                        a = t.y1,
                                        s = t.x2,
                                        n = t.y2,
                                        o = t.type,
                                        r = this.w,
                                        d = new E(this.ctx),
                                        c = r.globals.barPadForNumericAxis;
                                    if ("column" !== o || "datetime" !== r.config.xaxis.type) {
                                        var u = d.drawRect(i - ("row" === o ? c : 0), a, s + ("row" === o ? 2 * c : 0), n, 0, r.config.grid[o].colors[e], r.config.grid[o].opacity);
                                        this.elg.add(u), u.attr("clip-path", "url(#gridRectMask".concat(r.globals.cuid, ")")), u.node.classList.add("apexcharts-grid-".concat(o));
                                    }
                                },
                            },
                            {
                                key: "_drawXYLines",
                                value: function (t) {
                                    var e = this,
                                        i = t.xCount,
                                        a = t.tickAmount,
                                        s = this.w;
                                    if (s.config.grid.xaxis.lines.show || s.config.xaxis.axisTicks.show) {
                                        var n,
                                            o = s.globals.padHorizontal,
                                            r = s.globals.gridHeight;
                                        s.globals.timescaleLabels.length
                                            ? (function (x) {
                                                  for (var y = x.xC, w = x.y1, l = x.y2, f = 0; f < y; f++)
                                                      e._drawGridLines({ i: f, x1: e.xaxisLabels[f].position, y1: w, x2: e.xaxisLabels[f].position, y2: l, xCount: i, parent: e.elgridLinesV });
                                              })({ xC: i, x1: o, y1: 0, x2: n, y2: r })
                                            : (s.globals.isXNumeric && (i = s.globals.xAxisScale.result.length),
                                              (function (x) {
                                                  for (var y = x.xC, C = x.x1, w = x.y1, P = x.x2, l = x.y2, f = 0; f < y + (s.globals.isXNumeric ? 0 : 1); f++)
                                                      0 === f && 1 === y && 1 === s.globals.dataPoints && (P = C = s.globals.gridWidth / 2),
                                                          e._drawGridLines({ i: f, x1: C, y1: w, x2: P, y2: l, xCount: i, parent: e.elgridLinesV }),
                                                          (P = C += s.globals.gridWidth / (s.globals.isXNumeric ? y - 1 : y));
                                              })({ xC: i, x1: o, y1: 0, x2: n, y2: r }));
                                    }
                                    if (s.config.grid.yaxis.lines.show) {
                                        var d = 0,
                                            c = 0,
                                            g = s.globals.gridWidth,
                                            u = a + 1;
                                        this.isRangeBar && (u = s.globals.labels.length);
                                        for (var p = 0; p < u + (this.isRangeBar ? 1 : 0); p++)
                                            this._drawGridLine({ i: p, xCount: u + (this.isRangeBar ? 1 : 0), x1: 0, y1: d, x2: g, y2: c, parent: this.elgridLinesH }), (c = d += s.globals.gridHeight / (this.isRangeBar ? u : a));
                                    }
                                },
                            },
                            {
                                key: "_drawInvertedXYLines",
                                value: function (t) {
                                    var e = t.xCount,
                                        i = this.w;
                                    if (i.config.grid.xaxis.lines.show || i.config.xaxis.axisTicks.show)
                                        for (var a, s = i.globals.padHorizontal, n = i.globals.gridHeight, o = 0; o < e + 1; o++)
                                            i.config.grid.xaxis.lines.show && this._drawGridLine({ i: o, xCount: e + 1, x1: s, y1: 0, x2: a, y2: n, parent: this.elgridLinesV }),
                                                new Yt(this.ctx).drawXaxisTicks(s, 0, i.globals.dom.elGraphical),
                                                (a = s = s + i.globals.gridWidth / e + 0.3);
                                    if (i.config.grid.yaxis.lines.show)
                                        for (var r = 0, d = 0, c = i.globals.gridWidth, g = 0; g < i.globals.dataPoints + 1; g++)
                                            this._drawGridLine({ i: g, xCount: i.globals.dataPoints + 1, x1: 0, y1: r, x2: c, y2: d, parent: this.elgridLinesH }), (d = r += i.globals.gridHeight / i.globals.dataPoints);
                                },
                            },
                            {
                                key: "renderGrid",
                                value: function () {
                                    var t = this.w,
                                        e = new E(this.ctx);
                                    (this.elg = e.group({ class: "apexcharts-grid" })),
                                        (this.elgridLinesH = e.group({ class: "apexcharts-gridlines-horizontal" })),
                                        (this.elgridLinesV = e.group({ class: "apexcharts-gridlines-vertical" })),
                                        (this.elGridBorders = e.group({ class: "apexcharts-grid-borders" })),
                                        this.elg.add(this.elgridLinesH),
                                        this.elg.add(this.elgridLinesV),
                                        t.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());
                                    for (
                                        var i, a = t.globals.yAxisScale.length ? t.globals.yAxisScale[0].result.length - 1 : 5, s = 0;
                                        s < t.globals.series.length && (void 0 !== t.globals.yAxisScale[s] && (a = t.globals.yAxisScale[s].result.length - 1), !(a > 2));
                                        s++
                                    );
                                    return (
                                        !t.globals.isBarHorizontal || this.isRangeBar
                                            ? ((i = this.xaxisLabels.length),
                                              this.isRangeBar && (i--, (a = t.globals.labels.length), t.config.xaxis.tickAmount && t.config.xaxis.labels.formatter && (i = t.config.xaxis.tickAmount)),
                                              this._drawXYLines({ xCount: i, tickAmount: a }))
                                            : this._drawInvertedXYLines({ xCount: (i = a), tickAmount: (a = t.globals.xTickAmount) }),
                                        this.drawGridBands(i, a),
                                        { el: this.elg, elGridBorders: this.elGridBorders, xAxisTickWidth: t.globals.gridWidth / i }
                                    );
                                },
                            },
                            {
                                key: "drawGridBands",
                                value: function (t, e) {
                                    var i = this.w;
                                    if (void 0 !== i.config.grid.row.colors && i.config.grid.row.colors.length > 0)
                                        for (var a = 0, s = i.globals.gridHeight / e, n = i.globals.gridWidth, o = 0, r = 0; o < e; o++, r++)
                                            r >= i.config.grid.row.colors.length && (r = 0), this._drawGridBandRect({ c: r, x1: 0, y1: a, x2: n, y2: s, type: "row" }), (a += i.globals.gridHeight / e);
                                    if (void 0 !== i.config.grid.column.colors && i.config.grid.column.colors.length > 0)
                                        for (
                                            var d = i.globals.isBarHorizontal || ("category" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric) ? t : t - 1,
                                                c = i.globals.padHorizontal,
                                                g = i.globals.padHorizontal + i.globals.gridWidth / d,
                                                u = i.globals.gridHeight,
                                                p = 0,
                                                x = 0;
                                            p < t;
                                            p++, x++
                                        )
                                            x >= i.config.grid.column.colors.length && (x = 0), this._drawGridBandRect({ c: x, x1: c, y1: 0, x2: g, y2: u, type: "column" }), (c += i.globals.gridWidth / d);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Lt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "niceScale",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,
                                        a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                                        s = arguments.length > 4 ? arguments[4] : void 0,
                                        n = this.w,
                                        o = Math.abs(e - t);
                                    if (
                                        ("dataPoints" === (i = this._adjustTicksForSmallRange(i, a, o)) && (i = n.globals.dataPoints - 1),
                                        (t === Number.MIN_VALUE && 0 === e) || (!z.isNumber(t) && !z.isNumber(e)) || (t === Number.MIN_VALUE && e === -Number.MAX_VALUE))
                                    )
                                        return this.linearScale((t = 0), (e = i), i);
                                    t > e ? (console.warn("axis.min cannot be greater than axis.max"), (e = t + 0.1)) : t === e && ((t = 0 === t ? 0 : t - 0.5), (e = 0 === e ? 2 : e + 0.5));
                                    var r = [];
                                    o < 1 &&
                                        s &&
                                        ("candlestick" === n.config.chart.type || "candlestick" === n.config.series[a].type || "boxPlot" === n.config.chart.type || "boxPlot" === n.config.series[a].type || n.globals.isRangeData) &&
                                        (e *= 1.01);
                                    var d = i + 1;
                                    d < 2 ? (d = 2) : d > 2 && (d -= 2);
                                    var c = o / d,
                                        g = Math.floor(z.log10(c)),
                                        u = Math.pow(10, g),
                                        p = Math.round(c / u);
                                    p < 1 && (p = 1);
                                    var x = p * u,
                                        y = x * Math.floor(t / x),
                                        C = x * Math.ceil(e / x),
                                        w = y;
                                    if (s && o > 2) {
                                        for (; r.push(z.stripNumber(w, 7)), !((w += x) > C); );
                                        return { result: r, niceMin: r[0], niceMax: r[r.length - 1] };
                                    }
                                    var P = t;
                                    (r = []).push(z.stripNumber(P, 7));
                                    for (var l = Math.abs(e - t) / i, f = 0; f <= i; f++) r.push((P += l));
                                    return r[r.length - 2] >= e && r.pop(), { result: r, niceMin: r[0], niceMax: r[r.length - 1] };
                                },
                            },
                            {
                                key: "linearScale",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,
                                        a = arguments.length > 3 ? arguments[3] : void 0,
                                        s = Math.abs(e - t);
                                    "dataPoints" === (i = this._adjustTicksForSmallRange(i, a, s)) && (i = this.w.globals.dataPoints - 1);
                                    var n = s / i;
                                    i === Number.MAX_VALUE && ((i = 10), (n = 1));
                                    for (var o = [], r = t; i >= 0; ) o.push(r), (r += n), (i -= 1);
                                    return { result: o, niceMin: o[0], niceMax: o[o.length - 1] };
                                },
                            },
                            {
                                key: "logarithmicScaleNice",
                                value: function (t, e, i) {
                                    e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));
                                    for (var a = [], s = Math.ceil(Math.log(e) / Math.log(i) + 1), n = Math.floor(Math.log(t) / Math.log(i)); n < s; n++) a.push(Math.pow(i, n));
                                    return { result: a, niceMin: a[0], niceMax: a[a.length - 1] };
                                },
                            },
                            {
                                key: "logarithmicScale",
                                value: function (t, e, i) {
                                    e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));
                                    for (var a = [], s = Math.log(e) / Math.log(i), n = Math.log(t) / Math.log(i), o = s - n, r = Math.round(o), d = o / r, c = 0, g = n; c < r; c++, g += d) a.push(Math.pow(i, g));
                                    return a.push(Math.pow(i, s)), { result: a, niceMin: t, niceMax: e };
                                },
                            },
                            {
                                key: "_adjustTicksForSmallRange",
                                value: function (t, e, i) {
                                    var a = t;
                                    if (void 0 !== e && this.w.config.yaxis[e].labels.formatter && void 0 === this.w.config.yaxis[e].tickAmount) {
                                        var s = Number(this.w.config.yaxis[e].labels.formatter(1));
                                        z.isNumber(s) && 0 === this.w.globals.yValueDecimal && (a = Math.ceil(i));
                                    }
                                    return a < t ? a : t;
                                },
                            },
                            {
                                key: "setYScaleForIndex",
                                value: function (t, e, i) {
                                    var a = this.w.globals,
                                        s = this.w.config,
                                        n = a.isBarHorizontal ? s.xaxis : s.yaxis[t];
                                    void 0 === a.yAxisScale[t] && (a.yAxisScale[t] = []);
                                    var o = Math.abs(i - e);
                                    n.logarithmic && o <= 5 && (a.invalidLogScale = !0),
                                        n.logarithmic && o > 5
                                            ? ((a.allSeriesCollapsed = !1),
                                              (a.yAxisScale[t] = this.logarithmicScale(e, i, n.logBase)),
                                              (a.yAxisScale[t] = n.forceNiceScale ? this.logarithmicScaleNice(e, i, n.logBase) : this.logarithmicScale(e, i, n.logBase)))
                                            : i !== -Number.MAX_VALUE && z.isNumber(i)
                                            ? ((a.allSeriesCollapsed = !1),
                                              (a.yAxisScale[t] =
                                                  (void 0 === n.min && void 0 === n.max) || n.forceNiceScale
                                                      ? this.niceScale(e, i, n.tickAmount ? n.tickAmount : o < 5 && o > 1 ? o + 1 : 5, t, (void 0 === s.yaxis[t].max && void 0 === s.yaxis[t].min) || s.yaxis[t].forceNiceScale)
                                                      : this.linearScale(e, i, n.tickAmount, t)))
                                            : (a.yAxisScale[t] = this.linearScale(0, 5, 5));
                                },
                            },
                            {
                                key: "setXScale",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = i.globals,
                                        s = i.config.xaxis,
                                        n = Math.abs(e - t);
                                    return (a.xAxisScale = e !== -Number.MAX_VALUE && z.isNumber(e) ? this.linearScale(t, e, s.tickAmount ? s.tickAmount : n < 5 && n > 1 ? n + 1 : 5, 0) : this.linearScale(0, 5, 5)), a.xAxisScale;
                                },
                            },
                            {
                                key: "setMultipleYScales",
                                value: function () {
                                    var t = this,
                                        e = this.w.globals,
                                        i = this.w.config,
                                        a = e.minYArr.concat([]),
                                        s = e.maxYArr.concat([]),
                                        n = [];
                                    i.yaxis.forEach(function (o, r) {
                                        var d = r;
                                        i.series.forEach(function (u, p) {
                                            u.name === o.seriesName && ((d = p), n.push(r !== p ? { index: p, similarIndex: r, alreadyExists: !0 } : { index: p }));
                                        }),
                                            t.setYScaleForIndex(r, a[d], s[d]);
                                    }),
                                        this.sameScaleInMultipleAxes(a, s, n);
                                },
                            },
                            {
                                key: "sameScaleInMultipleAxes",
                                value: function (t, e, i) {
                                    var a = this,
                                        s = this.w.config,
                                        n = this.w.globals,
                                        o = [];
                                    i.forEach(function (y) {
                                        y.alreadyExists && (void 0 === o[y.index] && (o[y.index] = []), o[y.index].push(y.index), o[y.index].push(y.similarIndex));
                                    }),
                                        (n.yAxisSameScaleIndices = o),
                                        o.forEach(function (y, C) {
                                            o.forEach(function (w, P) {
                                                var l, f;
                                                C !== P &&
                                                    ((l = y),
                                                    (f = w),
                                                    l.filter(function (v) {
                                                        return -1 !== f.indexOf(v);
                                                    })).length > 0 &&
                                                    (o[C] = o[C].concat(o[P]));
                                            });
                                        });
                                    var r = o
                                        .map(function (y) {
                                            return y.filter(function (C, w) {
                                                return y.indexOf(C) === w;
                                            });
                                        })
                                        .map(function (y) {
                                            return y.sort();
                                        });
                                    o = o.filter(function (y) {
                                        return !!y;
                                    });
                                    var d = r.slice(),
                                        c = d.map(function (y) {
                                            return JSON.stringify(y);
                                        });
                                    d = d.filter(function (y, C) {
                                        return c.indexOf(JSON.stringify(y)) === C;
                                    });
                                    var g = [],
                                        u = [];
                                    t.forEach(function (y, C) {
                                        d.forEach(function (w, P) {
                                            w.indexOf(C) > -1 && (void 0 === g[P] && ((g[P] = []), (u[P] = [])), g[P].push({ key: C, value: y }), u[P].push({ key: C, value: e[C] }));
                                        });
                                    });
                                    var p = Array.apply(null, Array(d.length)).map(Number.prototype.valueOf, Number.MIN_VALUE),
                                        x = Array.apply(null, Array(d.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
                                    g.forEach(function (y, C) {
                                        y.forEach(function (w, P) {
                                            p[C] = Math.min(w.value, p[C]);
                                        });
                                    }),
                                        u.forEach(function (y, C) {
                                            y.forEach(function (w, P) {
                                                x[C] = Math.max(w.value, x[C]);
                                            });
                                        }),
                                        t.forEach(function (y, C) {
                                            u.forEach(function (w, P) {
                                                var l = p[P],
                                                    f = x[P];
                                                s.chart.stacked &&
                                                    ((f = 0),
                                                    w.forEach(function (v, S) {
                                                        v.value !== -Number.MAX_VALUE && (f += v.value), l !== Number.MIN_VALUE && (l += g[P][S].value);
                                                    })),
                                                    w.forEach(function (v, S) {
                                                        w[S].key === C &&
                                                            (void 0 !== s.yaxis[C].min && (l = "function" == typeof s.yaxis[C].min ? s.yaxis[C].min(n.minY) : s.yaxis[C].min),
                                                            void 0 !== s.yaxis[C].max && (f = "function" == typeof s.yaxis[C].max ? s.yaxis[C].max(n.maxY) : s.yaxis[C].max),
                                                            a.setYScaleForIndex(C, l, f));
                                                    });
                                            });
                                        });
                                },
                            },
                            {
                                key: "autoScaleY",
                                value: function (t, e, i) {
                                    t || (t = this);
                                    var a = t.w;
                                    if (a.globals.isMultipleYAxis || a.globals.collapsedSeries.length) return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."), e;
                                    var s = a.globals.seriesX[0],
                                        n = a.config.chart.stacked;
                                    return (
                                        e.forEach(function (o, r) {
                                            for (var d = 0, c = 0; c < s.length; c++)
                                                if (s[c] >= i.xaxis.min) {
                                                    d = c;
                                                    break;
                                                }
                                            var g,
                                                u,
                                                p = a.globals.minYArr[r],
                                                x = a.globals.maxYArr[r],
                                                y = a.globals.stackedSeriesTotals;
                                            a.globals.series.forEach(function (C, w) {
                                                var P = C[d];
                                                n
                                                    ? ((g = u = P = y[d]),
                                                      y.forEach(function (l, f) {
                                                          s[f] <= i.xaxis.max && s[f] >= i.xaxis.min && (l > u && null !== l && (u = l), C[f] < g && null !== C[f] && (g = C[f]));
                                                      }))
                                                    : ((g = u = P),
                                                      C.forEach(function (l, f) {
                                                          if (s[f] <= i.xaxis.max && s[f] >= i.xaxis.min) {
                                                              var v = l,
                                                                  S = l;
                                                              a.globals.series.forEach(function (M, L) {
                                                                  null !== l && ((v = Math.min(M[f], v)), (S = Math.max(M[f], S)));
                                                              }),
                                                                  S > u && null !== S && (u = S),
                                                                  v < g && null !== v && (g = v);
                                                          }
                                                      })),
                                                    void 0 === g && void 0 === u && ((g = p), (u = x)),
                                                    (u *= u < 0 ? 0.9 : 1.1),
                                                    0 == (g *= g < 0 ? 1.1 : 0.9) && 0 === u && ((g = -1), (u = 1)),
                                                    u < 0 && u < x && (u = x),
                                                    g < 0 && g > p && (g = p),
                                                    e.length > 1
                                                        ? ((e[w].min = void 0 === o.min ? g : o.min), (e[w].max = void 0 === o.max ? u : o.max))
                                                        : ((e[0].min = void 0 === o.min ? g : o.min), (e[0].max = void 0 === o.max ? u : o.max));
                                            });
                                        }),
                                        e
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Ut = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.scales = new Lt(t));
                    }
                    return (
                        m(A, [
                            {
                                key: "init",
                                value: function () {
                                    this.setYRange(), this.setXRange(), this.setZRange();
                                },
                            },
                            {
                                key: "getMinYMaxY",
                                value: function (t) {
                                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE,
                                        i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE,
                                        a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                                        s = this.w.config,
                                        n = this.w.globals,
                                        o = -Number.MAX_VALUE,
                                        r = Number.MIN_VALUE;
                                    null === a && (a = t + 1);
                                    var d = n.series,
                                        c = d,
                                        g = d;
                                    "candlestick" === s.chart.type
                                        ? ((c = n.seriesCandleL), (g = n.seriesCandleH))
                                        : "boxPlot" === s.chart.type
                                        ? ((c = n.seriesCandleO), (g = n.seriesCandleC))
                                        : n.isRangeData && ((c = n.seriesRangeStart), (g = n.seriesRangeEnd));
                                    for (var u = t; u < a; u++) {
                                        (n.dataPoints = Math.max(n.dataPoints, d[u].length)),
                                            n.categoryLabels.length &&
                                                (n.dataPoints = n.categoryLabels.filter(function (y) {
                                                    return void 0 !== y;
                                                }).length),
                                            n.labels.length &&
                                                "datetime" !== s.xaxis.type &&
                                                0 !==
                                                    n.series.reduce(function (y, C) {
                                                        return y + C.length;
                                                    }, 0) &&
                                                (n.dataPoints = Math.max(n.dataPoints, n.labels.length));
                                        for (var p = 0; p < n.series[u].length; p++) {
                                            var x = d[u][p];
                                            null !== x && z.isNumber(x)
                                                ? (void 0 !== g[u][p] && ((o = Math.max(o, g[u][p])), (e = Math.min(e, g[u][p]))),
                                                  void 0 !== c[u][p] && ((e = Math.min(e, c[u][p])), (i = Math.max(i, c[u][p]))),
                                                  ("candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type && "rangeArea" === this.w.config.chart.type && "rangeBar" === this.w.config.chart.type) ||
                                                      (("candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type) ||
                                                          (void 0 !== n.seriesCandleC[u][p] &&
                                                              ((o = Math.max(o, n.seriesCandleO[u][p])),
                                                              (o = Math.max(o, n.seriesCandleH[u][p])),
                                                              (o = Math.max(o, n.seriesCandleL[u][p])),
                                                              (o = Math.max(o, n.seriesCandleC[u][p])),
                                                              "boxPlot" === this.w.config.chart.type && (o = Math.max(o, n.seriesCandleM[u][p])))),
                                                      !s.series[u].type ||
                                                          ("candlestick" === s.series[u].type && "boxPlot" === s.series[u].type && "rangeArea" === s.series[u].type && "rangeBar" === s.series[u].type) ||
                                                          ((o = Math.max(o, n.series[u][p])), (e = Math.min(e, n.series[u][p]))),
                                                      (i = o)),
                                                  n.seriesGoals[u] &&
                                                      n.seriesGoals[u][p] &&
                                                      Array.isArray(n.seriesGoals[u][p]) &&
                                                      n.seriesGoals[u][p].forEach(function (y) {
                                                          r !== Number.MIN_VALUE && ((r = Math.min(r, y.value)), (e = r)), (o = Math.max(o, y.value)), (i = o);
                                                      }),
                                                  z.isFloat(x) && ((x = z.noExponents(x)), (n.yValueDecimal = Math.max(n.yValueDecimal, x.toString().split(".")[1].length))),
                                                  r > c[u][p] && c[u][p] < 0 && (r = c[u][p]))
                                                : (n.hasNullValues = !0);
                                        }
                                    }
                                    return (
                                        "rangeBar" === s.chart.type && n.seriesRangeStart.length && n.isBarHorizontal && (r = e),
                                        "bar" === s.chart.type && (r < 0 && o < 0 && (o = 0), r === Number.MIN_VALUE && (r = 0)),
                                        { minY: r, maxY: o, lowestY: e, highestY: i }
                                    );
                                },
                            },
                            {
                                key: "setYRange",
                                value: function () {
                                    var t = this.w.globals,
                                        e = this.w.config;
                                    (t.maxY = -Number.MAX_VALUE), (t.minY = Number.MIN_VALUE);
                                    var i = Number.MAX_VALUE;
                                    if (t.isMultipleYAxis)
                                        for (var a = 0; a < t.series.length; a++) {
                                            var s = this.getMinYMaxY(a, i, null, a + 1);
                                            t.minYArr.push(s.minY), t.maxYArr.push(s.maxY), (i = s.lowestY);
                                        }
                                    var n = this.getMinYMaxY(0, i, null, t.series.length);
                                    if (
                                        ((t.minY = n.minY),
                                        (t.maxY = n.maxY),
                                        (i = n.lowestY),
                                        e.chart.stacked && this._setStackedMinMax(),
                                        ("line" === e.chart.type || "area" === e.chart.type || "candlestick" === e.chart.type || "boxPlot" === e.chart.type || ("rangeBar" === e.chart.type && !t.isBarHorizontal)) &&
                                            t.minY === Number.MIN_VALUE &&
                                            i !== -Number.MAX_VALUE &&
                                            i !== t.maxY)
                                    ) {
                                        var o = t.maxY - i;
                                        ((i >= 0 && i <= 10) || void 0 !== e.yaxis[0].min || void 0 !== e.yaxis[0].max) && (o = 0), (t.minY = i - (5 * o) / 100), i > 0 && t.minY < 0 && (t.minY = 0), (t.maxY = t.maxY + (5 * o) / 100);
                                    }
                                    return (
                                        e.yaxis.forEach(function (r, d) {
                                            void 0 !== r.max && ("number" == typeof r.max ? (t.maxYArr[d] = r.max) : "function" == typeof r.max && (t.maxYArr[d] = r.max(t.isMultipleYAxis ? t.maxYArr[d] : t.maxY)), (t.maxY = t.maxYArr[d])),
                                                void 0 !== r.min &&
                                                    ("number" == typeof r.min
                                                        ? (t.minYArr[d] = r.min)
                                                        : "function" == typeof r.min && (t.minYArr[d] = r.min(t.isMultipleYAxis ? (t.minYArr[d] === Number.MIN_VALUE ? 0 : t.minYArr[d]) : t.minY)),
                                                    (t.minY = t.minYArr[d]));
                                        }),
                                        t.isBarHorizontal &&
                                            ["min", "max"].forEach(function (r) {
                                                void 0 !== e.xaxis[r] && "number" == typeof e.xaxis[r] && ("min" === r ? (t.minY = e.xaxis[r]) : (t.maxY = e.xaxis[r]));
                                            }),
                                        t.isMultipleYAxis
                                            ? (this.scales.setMultipleYScales(),
                                              (t.minY = i),
                                              t.yAxisScale.forEach(function (r, d) {
                                                  (t.minYArr[d] = r.niceMin), (t.maxYArr[d] = r.niceMax);
                                              }))
                                            : (this.scales.setYScaleForIndex(0, t.minY, t.maxY),
                                              (t.minY = t.yAxisScale[0].niceMin),
                                              (t.maxY = t.yAxisScale[0].niceMax),
                                              (t.minYArr[0] = t.yAxisScale[0].niceMin),
                                              (t.maxYArr[0] = t.yAxisScale[0].niceMax)),
                                        { minY: t.minY, maxY: t.maxY, minYArr: t.minYArr, maxYArr: t.maxYArr, yAxisScale: t.yAxisScale }
                                    );
                                },
                            },
                            {
                                key: "setXRange",
                                value: function () {
                                    var t = this.w.globals,
                                        e = this.w.config,
                                        i = "numeric" === e.xaxis.type || "datetime" === e.xaxis.type || ("category" === e.xaxis.type && !t.noLabelsProvided) || t.noLabelsProvided || t.isXNumeric;
                                    if (
                                        (t.isXNumeric &&
                                            (function () {
                                                for (var o = 0; o < t.series.length; o++)
                                                    if (t.labels[o])
                                                        for (var r = 0; r < t.labels[o].length; r++)
                                                            null !== t.labels[o][r] &&
                                                                z.isNumber(t.labels[o][r]) &&
                                                                ((t.maxX = Math.max(t.maxX, t.labels[o][r])),
                                                                (t.initialMaxX = Math.max(t.maxX, t.labels[o][r])),
                                                                (t.minX = Math.min(t.minX, t.labels[o][r])),
                                                                (t.initialMinX = Math.min(t.minX, t.labels[o][r])));
                                            })(),
                                        t.noLabelsProvided && 0 === e.xaxis.categories.length && ((t.maxX = t.labels[t.labels.length - 1]), (t.initialMaxX = t.labels[t.labels.length - 1]), (t.minX = 1), (t.initialMinX = 1)),
                                        t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric)
                                    ) {
                                        var a;
                                        if (
                                            (void 0 === e.xaxis.tickAmount
                                                ? ((a = Math.round(t.svgWidth / 150)), "numeric" === e.xaxis.type && t.dataPoints < 30 && (a = t.dataPoints - 1), a > t.dataPoints && 0 !== t.dataPoints && (a = t.dataPoints - 1))
                                                : "dataPoints" === e.xaxis.tickAmount
                                                ? (t.series.length > 1 && (a = t.series[t.maxValsInArrayIndex].length - 1), t.isXNumeric && (a = t.maxX - t.minX - 1))
                                                : (a = e.xaxis.tickAmount),
                                            (t.xTickAmount = a),
                                            void 0 !== e.xaxis.max && "number" == typeof e.xaxis.max && (t.maxX = e.xaxis.max),
                                            void 0 !== e.xaxis.min && "number" == typeof e.xaxis.min && (t.minX = e.xaxis.min),
                                            void 0 !== e.xaxis.range && (t.minX = t.maxX - e.xaxis.range),
                                            t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE)
                                        )
                                            if (e.xaxis.convertedCatToNumeric && !t.dataFormatXNumeric) {
                                                for (var s = [], n = t.minX - 1; n < t.maxX; n++) s.push(n + 1);
                                                t.xAxisScale = { result: s, niceMin: s[0], niceMax: s[s.length - 1] };
                                            } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);
                                        else
                                            (t.xAxisScale = this.scales.linearScale(1, a, a)),
                                                t.noLabelsProvided && t.labels.length > 0 && ((t.xAxisScale = this.scales.linearScale(1, t.labels.length, a - 1)), (t.seriesX = t.labels.slice()));
                                        i && (t.labels = t.xAxisScale.result.slice());
                                    }
                                    return t.isBarHorizontal && t.labels.length && (t.xTickAmount = t.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), { minX: t.minX, maxX: t.maxX };
                                },
                            },
                            {
                                key: "setZRange",
                                value: function () {
                                    var t = this.w.globals;
                                    if (t.isDataXYZ)
                                        for (var e = 0; e < t.series.length; e++)
                                            if (void 0 !== t.seriesZ[e])
                                                for (var i = 0; i < t.seriesZ[e].length; i++)
                                                    null !== t.seriesZ[e][i] && z.isNumber(t.seriesZ[e][i]) && ((t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i])), (t.minZ = Math.min(t.minZ, t.seriesZ[e][i])));
                                },
                            },
                            {
                                key: "_handleSingleDataPoint",
                                value: function () {
                                    var t = this.w.globals,
                                        e = this.w.config;
                                    if (t.minX === t.maxX) {
                                        var i = new gt(this.ctx);
                                        if ("datetime" === e.xaxis.type) {
                                            var a = i.getDate(t.minX);
                                            e.xaxis.labels.datetimeUTC ? a.setUTCDate(a.getUTCDate() - 2) : a.setDate(a.getDate() - 2), (t.minX = new Date(a).getTime());
                                            var s = i.getDate(t.maxX);
                                            e.xaxis.labels.datetimeUTC ? s.setUTCDate(s.getUTCDate() + 2) : s.setDate(s.getDate() + 2), (t.maxX = new Date(s).getTime());
                                        } else ("numeric" === e.xaxis.type || ("category" === e.xaxis.type && !t.noLabelsProvided)) && ((t.minX = t.minX - 2), (t.initialMinX = t.minX), (t.maxX = t.maxX + 2), (t.initialMaxX = t.maxX));
                                    }
                                },
                            },
                            {
                                key: "_getMinXDiff",
                                value: function () {
                                    var t = this.w.globals;
                                    t.isXNumeric &&
                                        t.seriesX.forEach(function (e, i) {
                                            1 === e.length && e.push(t.seriesX[t.maxValsInArrayIndex][t.seriesX[t.maxValsInArrayIndex].length - 1]);
                                            var a = e.slice();
                                            a.sort(function (s, n) {
                                                return s - n;
                                            }),
                                                a.forEach(function (s, n) {
                                                    if (n > 0) {
                                                        var o = s - a[n - 1];
                                                        o > 0 && (t.minXDiff = Math.min(o, t.minXDiff));
                                                    }
                                                }),
                                                (1 !== t.dataPoints && t.minXDiff !== Number.MAX_VALUE) || (t.minXDiff = 0.5);
                                        });
                                },
                            },
                            {
                                key: "_setStackedMinMax",
                                value: function () {
                                    var t = this,
                                        e = this.w.globals;
                                    if (e.series.length) {
                                        var i = e.seriesGroups;
                                        i.length ||
                                            (i = [
                                                this.w.config.series.map(function (n) {
                                                    return n.name;
                                                }),
                                            ]);
                                        var a = {},
                                            s = {};
                                        i.forEach(function (n) {
                                            (a[n] = []),
                                                (s[n] = []),
                                                t.w.config.series
                                                    .map(function (o, r) {
                                                        return n.indexOf(o.name) > -1 ? r : null;
                                                    })
                                                    .filter(function (o) {
                                                        return null !== o;
                                                    })
                                                    .forEach(function (o) {
                                                        for (var r = 0; r < e.series[e.maxValsInArrayIndex].length; r++)
                                                            void 0 === a[n][r] && ((a[n][r] = 0), (s[n][r] = 0)),
                                                                null !== e.series[o][r] && z.isNumber(e.series[o][r]) && (e.series[o][r] > 0 ? (a[n][r] += parseFloat(e.series[o][r]) + 1e-4) : (s[n][r] += parseFloat(e.series[o][r])));
                                                    });
                                        }),
                                            Object.entries(a).forEach(function (n) {
                                                var o = Z(n, 1)[0];
                                                a[o].forEach(function (r, d) {
                                                    (e.maxY = Math.max(e.maxY, a[o][d])), (e.minY = Math.min(e.minY, s[o][d]));
                                                });
                                            });
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Ht = (function () {
                    function A(t, e) {
                        B(this, A), (this.ctx = t), (this.elgrid = e), (this.w = t.w);
                        var i = this.w;
                        (this.xaxisFontSize = i.config.xaxis.labels.style.fontSize),
                            (this.axisFontFamily = i.config.xaxis.labels.style.fontFamily),
                            (this.xaxisForeColors = i.config.xaxis.labels.style.colors),
                            (this.isCategoryBarHorizontal = "bar" === i.config.chart.type && i.config.plotOptions.bar.horizontal),
                            (this.xAxisoffX = 0),
                            "bottom" === i.config.xaxis.position && (this.xAxisoffX = i.globals.gridHeight),
                            (this.drawnLabels = []),
                            (this.axesUtils = new Pt(t));
                    }
                    return (
                        m(A, [
                            {
                                key: "drawYaxis",
                                value: function (t) {
                                    var e = this,
                                        i = this.w,
                                        a = new E(this.ctx),
                                        s = i.config.yaxis[t].labels.style,
                                        n = s.fontSize,
                                        o = s.fontFamily,
                                        r = s.fontWeight,
                                        d = a.group({ class: "apexcharts-yaxis", rel: t, transform: "translate(" + i.globals.translateYAxisX[t] + ", 0)" });
                                    if (this.axesUtils.isYAxisHidden(t)) return d;
                                    var c = a.group({ class: "apexcharts-yaxis-texts-g" });
                                    d.add(c);
                                    var g = i.globals.yAxisScale[t].result.length - 1,
                                        u = i.globals.gridHeight / g,
                                        p = i.globals.translateY,
                                        x = i.globals.yLabelFormatters[t],
                                        y = i.globals.yAxisScale[t].result.slice();
                                    y = this.axesUtils.checkForReversedLabels(t, y);
                                    var C = "";
                                    if (i.config.yaxis[t].labels.show)
                                        for (
                                            var w = function (k) {
                                                    var I = y[k];
                                                    I = x(I, k, i);
                                                    var Y = i.config.yaxis[t].labels.padding;
                                                    i.config.yaxis[t].opposite && 0 !== i.config.yaxis.length && (Y *= -1);
                                                    var D = "end";
                                                    i.config.yaxis[t].opposite && (D = "start"),
                                                        "left" === i.config.yaxis[t].labels.align ? (D = "start") : "center" === i.config.yaxis[t].labels.align ? (D = "middle") : "right" === i.config.yaxis[t].labels.align && (D = "end");
                                                    var O = e.axesUtils.getYAxisForeColor(s.colors, t),
                                                        N = a.drawText({
                                                            x: Y,
                                                            y: p + g / 10 + i.config.yaxis[t].labels.offsetY + 1,
                                                            text: I,
                                                            textAnchor: D,
                                                            fontSize: n,
                                                            fontFamily: o,
                                                            fontWeight: r,
                                                            maxWidth: i.config.yaxis[t].labels.maxWidth,
                                                            foreColor: Array.isArray(O) ? O[k] : O,
                                                            isPlainText: !1,
                                                            cssClass: "apexcharts-yaxis-label " + s.cssClass,
                                                        });
                                                    k === g && (C = N), c.add(N);
                                                    var Q = document.createElementNS(i.globals.SVGNS, "title");
                                                    if (((Q.textContent = Array.isArray(I) ? I.join(" ") : I), N.node.appendChild(Q), 0 !== i.config.yaxis[t].labels.rotate)) {
                                                        var tt = a.rotateAroundCenter(C.node),
                                                            et = a.rotateAroundCenter(N.node);
                                                        N.node.setAttribute("transform", "rotate(".concat(i.config.yaxis[t].labels.rotate, " ").concat(tt.x, " ").concat(et.y, ")"));
                                                    }
                                                    p += u;
                                                },
                                                P = g;
                                            P >= 0;
                                            P--
                                        )
                                            w(P);
                                    if (void 0 !== i.config.yaxis[t].title.text) {
                                        var l = a.group({ class: "apexcharts-yaxis-title" }),
                                            f = 0;
                                        i.config.yaxis[t].opposite && (f = i.globals.translateYAxisX[t]);
                                        var v = a.drawText({
                                            x: f,
                                            y: i.globals.gridHeight / 2 + i.globals.translateY + i.config.yaxis[t].title.offsetY,
                                            text: i.config.yaxis[t].title.text,
                                            textAnchor: "end",
                                            foreColor: i.config.yaxis[t].title.style.color,
                                            fontSize: i.config.yaxis[t].title.style.fontSize,
                                            fontWeight: i.config.yaxis[t].title.style.fontWeight,
                                            fontFamily: i.config.yaxis[t].title.style.fontFamily,
                                            cssClass: "apexcharts-yaxis-title-text " + i.config.yaxis[t].title.style.cssClass,
                                        });
                                        l.add(v), d.add(l);
                                    }
                                    var S = i.config.yaxis[t].axisBorder,
                                        M = 31 + S.offsetX;
                                    if ((i.config.yaxis[t].opposite && (M = -31 - S.offsetX), S.show)) {
                                        var L = a.drawLine(M, i.globals.translateY + S.offsetY - 2, M, i.globals.gridHeight + i.globals.translateY + S.offsetY + 2, S.color, 0, S.width);
                                        d.add(L);
                                    }
                                    return i.config.yaxis[t].axisTicks.show && this.axesUtils.drawYAxisTicks(M, g, S, i.config.yaxis[t].axisTicks, t, u, d), d;
                                },
                            },
                            {
                                key: "drawYaxisInversed",
                                value: function (t) {
                                    var e = this.w,
                                        i = new E(this.ctx),
                                        a = i.group({ class: "apexcharts-xaxis apexcharts-yaxis-inversed" }),
                                        s = i.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(e.globals.translateXAxisX, ", ").concat(e.globals.translateXAxisY, ")") });
                                    a.add(s);
                                    var n = e.globals.yAxisScale[t].result.length - 1,
                                        o = e.globals.gridWidth / n + 0.1,
                                        r = o + e.config.xaxis.labels.offsetX,
                                        d = e.globals.xLabelFormatter,
                                        c = e.globals.yAxisScale[t].result.slice(),
                                        g = e.globals.timescaleLabels;
                                    g.length > 0 && ((this.xaxisLabels = g.slice()), (n = (c = g.slice()).length)), (c = this.axesUtils.checkForReversedLabels(t, c));
                                    var u = g.length;
                                    if (e.config.xaxis.labels.show)
                                        for (var p = u ? 0 : n; u ? p < u : p >= 0; u ? p++ : p--) {
                                            var x = c[p];
                                            x = d(x, p, e);
                                            var y = e.globals.gridWidth + e.globals.padHorizontal - (r - o + e.config.xaxis.labels.offsetX);
                                            if (g.length) {
                                                var C = this.axesUtils.getLabel(c, g, y, p, this.drawnLabels, this.xaxisFontSize);
                                                (y = C.x), (x = C.text), this.drawnLabels.push(C.text), 0 === p && e.globals.skipFirstTimelinelabel && (x = ""), p === c.length - 1 && e.globals.skipLastTimelinelabel && (x = "");
                                            }
                                            var w = i.drawText({
                                                x: y,
                                                y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30 - ("top" === e.config.xaxis.position ? e.globals.xAxisHeight + e.config.xaxis.axisTicks.height - 2 : 0),
                                                text: x,
                                                textAnchor: "middle",
                                                foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,
                                                fontSize: this.xaxisFontSize,
                                                fontFamily: this.xaxisFontFamily,
                                                fontWeight: e.config.xaxis.labels.style.fontWeight,
                                                isPlainText: !1,
                                                cssClass: "apexcharts-xaxis-label " + e.config.xaxis.labels.style.cssClass,
                                            });
                                            s.add(w), w.tspan(x);
                                            var P = document.createElementNS(e.globals.SVGNS, "title");
                                            (P.textContent = x), w.node.appendChild(P), (r += o);
                                        }
                                    return this.inversedYAxisTitleText(a), this.inversedYAxisBorder(a), a;
                                },
                            },
                            {
                                key: "inversedYAxisBorder",
                                value: function (t) {
                                    var e = this.w,
                                        i = new E(this.ctx),
                                        a = e.config.xaxis.axisBorder;
                                    if (a.show) {
                                        var s = 0;
                                        "bar" === e.config.chart.type && e.globals.isXNumeric && (s -= 15);
                                        var n = i.drawLine(e.globals.padHorizontal + s + a.offsetX, this.xAxisoffX, e.globals.gridWidth, this.xAxisoffX, a.color, 0, a.height);
                                        this.elgrid && this.elgrid.elGridBorders && e.config.grid.show ? this.elgrid.elGridBorders.add(n) : t.add(n);
                                    }
                                },
                            },
                            {
                                key: "inversedYAxisTitleText",
                                value: function (t) {
                                    var e = this.w,
                                        i = new E(this.ctx);
                                    if (void 0 !== e.config.xaxis.title.text) {
                                        var a = i.group({ class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed" }),
                                            s = i.drawText({
                                                x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,
                                                y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e.config.xaxis.title.style.fontSize) + e.config.xaxis.title.offsetY + 20,
                                                text: e.config.xaxis.title.text,
                                                textAnchor: "middle",
                                                fontSize: e.config.xaxis.title.style.fontSize,
                                                fontFamily: e.config.xaxis.title.style.fontFamily,
                                                fontWeight: e.config.xaxis.title.style.fontWeight,
                                                foreColor: e.config.xaxis.title.style.color,
                                                cssClass: "apexcharts-xaxis-title-text " + e.config.xaxis.title.style.cssClass,
                                            });
                                        a.add(s), t.add(a);
                                    }
                                },
                            },
                            {
                                key: "yAxisTitleRotate",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = new E(this.ctx),
                                        s = { width: 0, height: 0 },
                                        n = { width: 0, height: 0 },
                                        o = i.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t, "'] .apexcharts-yaxis-texts-g"));
                                    null !== o && (s = o.getBoundingClientRect());
                                    var r = i.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t, "'] .apexcharts-yaxis-title text"));
                                    if ((null !== r && (n = r.getBoundingClientRect()), null !== r)) {
                                        var d = this.xPaddingForYAxisTitle(t, s, n, e);
                                        r.setAttribute("x", d.xPos - (e ? 10 : 0));
                                    }
                                    if (null !== r) {
                                        var c = a.rotateAroundCenter(r);
                                        r.setAttribute(
                                            "transform",
                                            "rotate("
                                                .concat(e ? -1 * i.config.yaxis[t].title.rotate : i.config.yaxis[t].title.rotate, " ")
                                                .concat(c.x, " ")
                                                .concat(c.y, ")")
                                        );
                                    }
                                },
                            },
                            {
                                key: "xPaddingForYAxisTitle",
                                value: function (t, e, i, a) {
                                    var s = this.w,
                                        n = 0,
                                        o = 0,
                                        r = 10;
                                    return void 0 === s.config.yaxis[t].title.text || t < 0
                                        ? { xPos: o, padd: 0 }
                                        : (a
                                              ? ((o = e.width + s.config.yaxis[t].title.offsetX + i.width / 2 + r / 2), 0 === (n += 1) && (o -= r / 2))
                                              : ((o = -1 * e.width + s.config.yaxis[t].title.offsetX + r / 2 + i.width / 2), s.globals.isBarHorizontal && (o = -1 * e.width - s.config.yaxis[t].title.offsetX - (r = 25))),
                                          { xPos: o, padd: r });
                                },
                            },
                            {
                                key: "setYAxisXPosition",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = 0,
                                        s = 0,
                                        n = 18,
                                        o = 1;
                                    i.config.yaxis.length > 1 && (this.multipleYs = !0),
                                        i.config.yaxis.map(function (r, d) {
                                            var c = i.globals.ignoreYAxisIndexes.indexOf(d) > -1 || !r.show || r.floating || 0 === t[d].width,
                                                g = t[d].width + e[d].width;
                                            r.opposite
                                                ? i.globals.isBarHorizontal
                                                    ? (i.globals.translateYAxisX[d] = (s = i.globals.gridWidth + i.globals.translateX - 1) - r.labels.offsetX)
                                                    : ((s = i.globals.gridWidth + i.globals.translateX + o), c || (o = o + g + 20), (i.globals.translateYAxisX[d] = s - r.labels.offsetX + 20))
                                                : ((a = i.globals.translateX - n), c || (n = n + g + 20), (i.globals.translateYAxisX[d] = a + r.labels.offsetX));
                                        });
                                },
                            },
                            {
                                key: "setYAxisTextAlignments",
                                value: function () {
                                    var t = this.w,
                                        e = t.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
                                    (e = z.listToArray(e)).forEach(function (i, a) {
                                        var s = t.config.yaxis[a];
                                        if (s && !s.floating && void 0 !== s.labels.align) {
                                            var n = t.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(a, "'] .apexcharts-yaxis-texts-g")),
                                                o = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(a, "'] .apexcharts-yaxis-label"));
                                            o = z.listToArray(o);
                                            var r = n.getBoundingClientRect();
                                            "left" === s.labels.align
                                                ? (o.forEach(function (d, c) {
                                                      d.setAttribute("text-anchor", "start");
                                                  }),
                                                  s.opposite || n.setAttribute("transform", "translate(-".concat(r.width, ", 0)")))
                                                : "center" === s.labels.align
                                                ? (o.forEach(function (d, c) {
                                                      d.setAttribute("text-anchor", "middle");
                                                  }),
                                                  n.setAttribute("transform", "translate(".concat((r.width / 2) * (s.opposite ? 1 : -1), ", 0)")))
                                                : "right" === s.labels.align &&
                                                  (o.forEach(function (d, c) {
                                                      d.setAttribute("text-anchor", "end");
                                                  }),
                                                  s.opposite && n.setAttribute("transform", "translate(".concat(r.width, ", 0)")));
                                        }
                                    });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Zt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.documentEvent = z.bind(this.documentEvent, this));
                    }
                    return (
                        m(A, [
                            {
                                key: "addEventListener",
                                value: function (t, e) {
                                    var i = this.w;
                                    i.globals.events.hasOwnProperty(t) ? i.globals.events[t].push(e) : (i.globals.events[t] = [e]);
                                },
                            },
                            {
                                key: "removeEventListener",
                                value: function (t, e) {
                                    var i = this.w;
                                    if (i.globals.events.hasOwnProperty(t)) {
                                        var a = i.globals.events[t].indexOf(e);
                                        -1 !== a && i.globals.events[t].splice(a, 1);
                                    }
                                },
                            },
                            {
                                key: "fireEvent",
                                value: function (t, e) {
                                    var i = this.w;
                                    if (i.globals.events.hasOwnProperty(t)) {
                                        (e && e.length) || (e = []);
                                        for (var a = i.globals.events[t], s = a.length, n = 0; n < s; n++) a[n].apply(null, e);
                                    }
                                },
                            },
                            {
                                key: "setupEventHandlers",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = this.ctx,
                                        a = e.globals.dom.baseEl.querySelector(e.globals.chartClass);
                                    this.ctx.eventList.forEach(function (s) {
                                        a.addEventListener(
                                            s,
                                            function (n) {
                                                var o = Object.assign({}, e, { seriesIndex: e.globals.capturedSeriesIndex, dataPointIndex: e.globals.capturedDataPointIndex });
                                                "mousemove" === n.type || "touchmove" === n.type
                                                    ? "function" == typeof e.config.chart.events.mouseMove && e.config.chart.events.mouseMove(n, i, o)
                                                    : "mouseleave" === n.type || "touchleave" === n.type
                                                    ? "function" == typeof e.config.chart.events.mouseLeave && e.config.chart.events.mouseLeave(n, i, o)
                                                    : (("mouseup" === n.type && 1 === n.which) || "touchend" === n.type) &&
                                                      ("function" == typeof e.config.chart.events.click && e.config.chart.events.click(n, i, o), i.ctx.events.fireEvent("click", [n, i, o]));
                                            },
                                            { capture: !1, passive: !0 }
                                        );
                                    }),
                                        this.ctx.eventList.forEach(function (s) {
                                            e.globals.dom.baseEl.addEventListener(s, t.documentEvent, { passive: !0 });
                                        }),
                                        this.ctx.core.setupBrushHandler();
                                },
                            },
                            {
                                key: "documentEvent",
                                value: function (t) {
                                    var e = this.w,
                                        i = t.target.className;
                                    if ("click" === t.type) {
                                        var a = e.globals.dom.baseEl.querySelector(".apexcharts-menu");
                                        a && a.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i && a.classList.remove("apexcharts-menu-open");
                                    }
                                    (e.globals.clientX = "touchmove" === t.type ? t.touches[0].clientX : t.clientX), (e.globals.clientY = "touchmove" === t.type ? t.touches[0].clientY : t.clientY);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ce = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "setCurrentLocaleValues",
                                value: function (t) {
                                    var e = this.w.config.chart.locales;
                                    window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));
                                    var i = e.filter(function (s) {
                                        return s.name === t;
                                    })[0];
                                    if (!i) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
                                    var a = z.extend($t, i);
                                    this.w.globals.locale = a.options;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ge = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "drawAxis",
                                value: function (t, e) {
                                    var i,
                                        a,
                                        s = this,
                                        n = this.w.globals,
                                        o = this.w.config,
                                        r = new Yt(this.ctx, e),
                                        d = new Ht(this.ctx, e);
                                    n.axisCharts &&
                                        "radar" !== t &&
                                        (n.isBarHorizontal
                                            ? ((a = d.drawYaxisInversed(0)), (i = r.drawXaxisInversed(0)), n.dom.elGraphical.add(i), n.dom.elGraphical.add(a))
                                            : ((i = r.drawXaxis()),
                                              n.dom.elGraphical.add(i),
                                              o.yaxis.map(function (c, g) {
                                                  if (-1 === n.ignoreYAxisIndexes.indexOf(g) && ((a = d.drawYaxis(g)), n.dom.Paper.add(a), "back" === s.w.config.grid.position)) {
                                                      var u = n.dom.Paper.children()[1];
                                                      u.remove(), n.dom.Paper.add(u);
                                                  }
                                              })));
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Jt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "drawXCrosshairs",
                                value: function () {
                                    var t = this.w,
                                        e = new E(this.ctx),
                                        i = new H(this.ctx),
                                        a = t.config.xaxis.crosshairs.fill.gradient,
                                        s = t.config.xaxis.crosshairs.dropShadow,
                                        u = s.enabled,
                                        p = s.left,
                                        x = s.top,
                                        y = s.blur,
                                        C = s.color,
                                        w = s.opacity,
                                        P = t.config.xaxis.crosshairs.fill.color;
                                    if (t.config.xaxis.crosshairs.show) {
                                        "gradient" === t.config.xaxis.crosshairs.fill.type && (P = e.drawGradient("vertical", a.colorFrom, a.colorTo, a.opacityFrom, a.opacityTo, null, a.stops, null));
                                        var l = e.drawRect();
                                        1 === t.config.xaxis.crosshairs.width && (l = e.drawLine());
                                        var f = t.globals.gridHeight;
                                        (!z.isNumber(f) || f < 0) && (f = 0);
                                        var v = t.config.xaxis.crosshairs.width;
                                        (!z.isNumber(v) || v < 0) && (v = 0),
                                            l.attr({
                                                class: "apexcharts-xcrosshairs",
                                                x: 0,
                                                y: 0,
                                                y2: f,
                                                width: v,
                                                height: f,
                                                fill: P,
                                                filter: "none",
                                                "fill-opacity": t.config.xaxis.crosshairs.opacity,
                                                stroke: t.config.xaxis.crosshairs.stroke.color,
                                                "stroke-width": t.config.xaxis.crosshairs.stroke.width,
                                                "stroke-dasharray": t.config.xaxis.crosshairs.stroke.dashArray,
                                            }),
                                            u && (l = i.dropShadow(l, { left: p, top: x, blur: y, color: C, opacity: w })),
                                            t.globals.dom.elGraphical.add(l);
                                    }
                                },
                            },
                            {
                                key: "drawYCrosshairs",
                                value: function () {
                                    var t = this.w,
                                        e = new E(this.ctx),
                                        i = t.config.yaxis[0].crosshairs,
                                        a = t.globals.barPadForNumericAxis;
                                    if (t.config.yaxis[0].crosshairs.show) {
                                        var s = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, i.stroke.dashArray, i.stroke.width);
                                        s.attr({ class: "apexcharts-ycrosshairs" }), t.globals.dom.elGraphical.add(s);
                                    }
                                    var n = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, 0, 0);
                                    n.attr({ class: "apexcharts-ycrosshairs-hidden" }), t.globals.dom.elGraphical.add(n);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ue = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "checkResponsiveConfig",
                                value: function (t) {
                                    var e = this,
                                        i = this.w,
                                        a = i.config;
                                    if (0 !== a.responsive.length) {
                                        var s = a.responsive.slice();
                                        s.sort(function (d, c) {
                                            return d.breakpoint > c.breakpoint ? 1 : c.breakpoint > d.breakpoint ? -1 : 0;
                                        }).reverse();
                                        var n = new Xt({}),
                                            o = function () {
                                                var d = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                                                    c = s[0].breakpoint,
                                                    g = window.innerWidth > 0 ? window.innerWidth : screen.width;
                                                if (g > c) {
                                                    var u = $.extendArrayProps(n, i.globals.initialConfig, i);
                                                    (d = z.extend(u, d)), (d = z.extend(i.config, d)), e.overrideResponsiveOptions(d);
                                                } else for (var p = 0; p < s.length; p++) g < s[p].breakpoint && ((d = $.extendArrayProps(n, s[p].options, i)), (d = z.extend(i.config, d)), e.overrideResponsiveOptions(d));
                                            };
                                        if (t) {
                                            var r = $.extendArrayProps(n, t, i);
                                            (r = z.extend(i.config, r)), o((r = z.extend(r, t)));
                                        } else o({});
                                    }
                                },
                            },
                            {
                                key: "overrideResponsiveOptions",
                                value: function (t) {
                                    var e = new Xt(t).init({ responsiveOverride: !0 });
                                    this.w.config = e;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                fe = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.colors = []), (this.w = t.w);
                        var e = this.w;
                        (this.isColorFn = !1),
                            (this.isHeatmapDistributed = ("treemap" === e.config.chart.type && e.config.plotOptions.treemap.distributed) || ("heatmap" === e.config.chart.type && e.config.plotOptions.heatmap.distributed)),
                            (this.isBarDistributed = e.config.plotOptions.bar.distributed && ("bar" === e.config.chart.type || "rangeBar" === e.config.chart.type));
                    }
                    return (
                        m(A, [
                            {
                                key: "init",
                                value: function () {
                                    this.setDefaultColors();
                                },
                            },
                            {
                                key: "setDefaultColors",
                                value: function () {
                                    var t,
                                        e = this,
                                        i = this.w,
                                        a = new z();
                                    if (
                                        (i.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(i.config.theme.mode)),
                                        void 0 === i.config.colors || 0 === (null === (t = i.config.colors) || void 0 === t ? void 0 : t.length)
                                            ? (i.globals.colors = this.predefined())
                                            : ((i.globals.colors = i.config.colors),
                                              Array.isArray(i.config.colors) &&
                                                  i.config.colors.length > 0 &&
                                                  "function" == typeof i.config.colors[0] &&
                                                  (i.globals.colors = i.config.series.map(function (x, y) {
                                                      var C = i.config.colors[y];
                                                      return (
                                                          C || (C = i.config.colors[0]),
                                                          "function" == typeof C
                                                              ? ((e.isColorFn = !0), C({ value: i.globals.axisCharts ? (i.globals.series[y][0] ? i.globals.series[y][0] : 0) : i.globals.series[y], seriesIndex: y, dataPointIndex: y, w: i }))
                                                              : C
                                                      );
                                                  }))),
                                        i.globals.seriesColors.map(function (x, y) {
                                            x && (i.globals.colors[y] = x);
                                        }),
                                        i.config.theme.monochrome.enabled)
                                    ) {
                                        var s = [],
                                            n = i.globals.series.length;
                                        (this.isBarDistributed || this.isHeatmapDistributed) && (n = i.globals.series[0].length * i.globals.series.length);
                                        for (var o = i.config.theme.monochrome.color, r = 1 / (n / i.config.theme.monochrome.shadeIntensity), d = i.config.theme.monochrome.shadeTo, c = 0, g = 0; g < n; g++) {
                                            var u = void 0;
                                            "dark" === d ? ((u = a.shadeColor(-1 * c, o)), (c += r)) : ((u = a.shadeColor(c, o)), (c += r)), s.push(u);
                                        }
                                        i.globals.colors = s.slice();
                                    }
                                    var p = i.globals.colors.slice();
                                    this.pushExtraColors(i.globals.colors),
                                        ["fill", "stroke"].forEach(function (x) {
                                            (i.globals[x].colors = void 0 === i.config[x].colors ? (e.isColorFn ? i.config.colors : p) : i.config[x].colors.slice()), e.pushExtraColors(i.globals[x].colors);
                                        }),
                                        (i.globals.dataLabels.style.colors = void 0 === i.config.dataLabels.style.colors ? p : i.config.dataLabels.style.colors.slice()),
                                        this.pushExtraColors(i.globals.dataLabels.style.colors, 50),
                                        (i.globals.radarPolygons.fill.colors =
                                            void 0 === i.config.plotOptions.radar.polygons.fill.colors ? ["dark" === i.config.theme.mode ? "#424242" : "none"] : i.config.plotOptions.radar.polygons.fill.colors.slice()),
                                        this.pushExtraColors(i.globals.radarPolygons.fill.colors, 20),
                                        (i.globals.markers.colors = void 0 === i.config.markers.colors ? p : i.config.markers.colors.slice()),
                                        this.pushExtraColors(i.globals.markers.colors);
                                },
                            },
                            {
                                key: "pushExtraColors",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                        a = this.w,
                                        s = e || a.globals.series.length;
                                    if (
                                        (null === i && (i = this.isBarDistributed || this.isHeatmapDistributed || ("heatmap" === a.config.chart.type && a.config.plotOptions.heatmap.colorScale.inverse)),
                                        i && a.globals.series.length && (s = a.globals.series[a.globals.maxValsInArrayIndex].length * a.globals.series.length),
                                        t.length < s)
                                    )
                                        for (var n = s - t.length, o = 0; o < n; o++) t.push(t[o]);
                                },
                            },
                            {
                                key: "updateThemeOptions",
                                value: function (t) {
                                    (t.chart = t.chart || {}), (t.tooltip = t.tooltip || {});
                                    var e = t.theme.mode || "light",
                                        i = t.theme.palette ? t.theme.palette : "dark" === e ? "palette4" : "palette1",
                                        a = t.chart.foreColor ? t.chart.foreColor : "dark" === e ? "#f6f7f8" : "#373d3f";
                                    return (t.tooltip.theme = e), (t.chart.foreColor = a), (t.theme.palette = i), t;
                                },
                            },
                            {
                                key: "predefined",
                                value: function () {
                                    switch (this.w.config.theme.palette) {
                                        case "palette1":
                                        default:
                                            this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
                                            break;
                                        case "palette2":
                                            this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
                                            break;
                                        case "palette3":
                                            this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
                                            break;
                                        case "palette4":
                                            this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
                                            break;
                                        case "palette5":
                                            this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
                                            break;
                                        case "palette6":
                                            this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
                                            break;
                                        case "palette7":
                                            this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
                                            break;
                                        case "palette8":
                                            this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
                                            break;
                                        case "palette9":
                                            this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
                                            break;
                                        case "palette10":
                                            this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"];
                                    }
                                    return this.colors;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                pe = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "draw",
                                value: function () {
                                    this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
                                },
                            },
                            {
                                key: "drawTitleSubtitle",
                                value: function (t) {
                                    var e = this.w,
                                        i = "title" === t ? e.config.title : e.config.subtitle,
                                        a = e.globals.svgWidth / 2,
                                        s = i.offsetY,
                                        n = "middle";
                                    if (
                                        ("left" === i.align ? ((a = 10), (n = "start")) : "right" === i.align && ((a = e.globals.svgWidth - 10), (n = "end")),
                                        (a += i.offsetX),
                                        (s = s + parseInt(i.style.fontSize, 10) + i.margin / 2),
                                        void 0 !== i.text)
                                    ) {
                                        var o = new E(this.ctx).drawText({
                                            x: a,
                                            y: s,
                                            text: i.text,
                                            textAnchor: n,
                                            fontSize: i.style.fontSize,
                                            fontFamily: i.style.fontFamily,
                                            fontWeight: i.style.fontWeight,
                                            foreColor: i.style.color,
                                            opacity: 1,
                                        });
                                        o.node.setAttribute("class", "apexcharts-".concat(t, "-text")), e.globals.dom.Paper.add(o);
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                xe = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.dCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "getTitleSubtitleCoords",
                                value: function (t) {
                                    var e = this.w,
                                        i = 0,
                                        a = 0,
                                        s = "title" === t ? e.config.title.floating : e.config.subtitle.floating,
                                        n = e.globals.dom.baseEl.querySelector(".apexcharts-".concat(t, "-text"));
                                    if (null !== n && !s) {
                                        var o = n.getBoundingClientRect();
                                        (i = o.width), (a = e.globals.axisCharts ? o.height + 5 : o.height);
                                    }
                                    return { width: i, height: a };
                                },
                            },
                            {
                                key: "getLegendsRect",
                                value: function () {
                                    var t = this.w,
                                        e = t.globals.dom.elLegendWrap;
                                    t.config.legend.height || ("top" !== t.config.legend.position && "bottom" !== t.config.legend.position) || (e.style.maxHeight = t.globals.svgHeight / 2 + "px");
                                    var i = Object.assign({}, z.getBoundingClientRect(e));
                                    return (
                                        (this.dCtx.lgRect = null !== e && !t.config.legend.floating && t.config.legend.show ? { x: i.x, y: i.y, height: i.height, width: 0 === i.height ? 0 : i.width } : { x: 0, y: 0, height: 0, width: 0 }),
                                        ("left" !== t.config.legend.position && "right" !== t.config.legend.position) || (1.5 * this.dCtx.lgRect.width > t.globals.svgWidth && (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5)),
                                        this.dCtx.lgRect
                                    );
                                },
                            },
                            {
                                key: "getLargestStringFromMultiArr",
                                value: function (t, e) {
                                    var i = t;
                                    if (this.w.globals.isMultiLineX) {
                                        var a = e.map(function (n, o) {
                                                return Array.isArray(n) ? n.length : 1;
                                            }),
                                            s = Math.max.apply(Math, G(a));
                                        i = e[a.indexOf(s)];
                                    }
                                    return i;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                me = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.dCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "getxAxisLabelsCoords",
                                value: function () {
                                    var t,
                                        e = this.w,
                                        i = e.globals.labels.slice();
                                    if ((e.config.xaxis.convertedCatToNumeric && 0 === i.length && (i = e.globals.categoryLabels), e.globals.timescaleLabels.length > 0)) {
                                        var a = this.getxAxisTimeScaleLabelsCoords();
                                        (t = { width: a.width, height: a.height }), (e.globals.rotateXLabels = !1);
                                    } else {
                                        this.dCtx.lgWidthForSideLegends = ("left" !== e.config.legend.position && "right" !== e.config.legend.position) || e.config.legend.floating ? 0 : this.dCtx.lgRect.width;
                                        var s = e.globals.xLabelFormatter,
                                            n = z.getLargestStringFromArr(i),
                                            o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(n, i);
                                        e.globals.isBarHorizontal &&
                                            (o = n = e.globals.yAxisScale[0].result.reduce(function (x, y) {
                                                return x.length > y.length ? x : y;
                                            }, 0));
                                        var r = new At(this.dCtx.ctx),
                                            d = n;
                                        (n = r.xLabelFormat(s, n, d, { i: void 0, dateFormatter: new gt(this.dCtx.ctx).formatDate, w: e })),
                                            (o = r.xLabelFormat(s, o, d, { i: void 0, dateFormatter: new gt(this.dCtx.ctx).formatDate, w: e })),
                                            ((e.config.xaxis.convertedCatToNumeric && void 0 === n) || "" === String(n).trim()) && (o = n = "1");
                                        var c = new E(this.dCtx.ctx),
                                            g = c.getTextRects(n, e.config.xaxis.labels.style.fontSize),
                                            u = g;
                                        if (
                                            (n !== o && (u = c.getTextRects(o, e.config.xaxis.labels.style.fontSize)),
                                            ((t = { width: g.width >= u.width ? g.width : u.width, height: g.height >= u.height ? g.height : u.height }).width * i.length >
                                                e.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right &&
                                                0 !== e.config.xaxis.labels.rotate) ||
                                                e.config.xaxis.labels.rotateAlways)
                                        ) {
                                            if (!e.globals.isBarHorizontal) {
                                                e.globals.rotateXLabels = !0;
                                                var p = function (x) {
                                                    return c.getTextRects(x, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, "rotate(".concat(e.config.xaxis.labels.rotate, " 0 0)"), !1);
                                                };
                                                (g = p(n)), n !== o && (u = p(o)), (t.height = (g.height > u.height ? g.height : u.height) / 1.5), (t.width = g.width > u.width ? g.width : u.width);
                                            }
                                        } else e.globals.rotateXLabels = !1;
                                    }
                                    return e.config.xaxis.labels.show || (t = { width: 0, height: 0 }), { width: t.width, height: t.height };
                                },
                            },
                            {
                                key: "getxAxisGroupLabelsCoords",
                                value: function () {
                                    var t,
                                        e = this.w;
                                    if (!e.globals.hasXaxisGroups) return { width: 0, height: 0 };
                                    var i,
                                        a = (null === (t = e.config.xaxis.group.style) || void 0 === t ? void 0 : t.fontSize) || e.config.xaxis.labels.style.fontSize,
                                        s = e.globals.groups.map(function (g) {
                                            return g.title;
                                        }),
                                        n = z.getLargestStringFromArr(s),
                                        o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(n, s),
                                        r = new E(this.dCtx.ctx),
                                        d = r.getTextRects(n, a),
                                        c = d;
                                    return (
                                        n !== o && (c = r.getTextRects(o, a)),
                                        (i = { width: d.width >= c.width ? d.width : c.width, height: d.height >= c.height ? d.height : c.height }),
                                        e.config.xaxis.labels.show || (i = { width: 0, height: 0 }),
                                        { width: i.width, height: i.height }
                                    );
                                },
                            },
                            {
                                key: "getxAxisTitleCoords",
                                value: function () {
                                    var t = this.w,
                                        e = 0,
                                        i = 0;
                                    if (void 0 !== t.config.xaxis.title.text) {
                                        var a = new E(this.dCtx.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);
                                        (e = a.width), (i = a.height);
                                    }
                                    return { width: e, height: i };
                                },
                            },
                            {
                                key: "getxAxisTimeScaleLabelsCoords",
                                value: function () {
                                    var t,
                                        e = this.w;
                                    this.dCtx.timescaleLabels = e.globals.timescaleLabels.slice();
                                    var i = this.dCtx.timescaleLabels.map(function (s) {
                                            return s.value;
                                        }),
                                        a = i.reduce(function (s, n) {
                                            return void 0 === s ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : s.length > n.length ? s : n;
                                        }, 0);
                                    return (
                                        1.05 * (t = new E(this.dCtx.ctx).getTextRects(a, e.config.xaxis.labels.style.fontSize)).width * i.length > e.globals.gridWidth &&
                                            0 !== e.config.xaxis.labels.rotate &&
                                            (e.globals.overlappingXLabels = !0),
                                        t
                                    );
                                },
                            },
                            {
                                key: "additionalPaddingXLabels",
                                value: function (t) {
                                    var e = this,
                                        i = this.w,
                                        a = i.globals,
                                        s = i.config,
                                        n = s.xaxis.type,
                                        o = t.width;
                                    (a.skipLastTimelinelabel = !1), (a.skipFirstTimelinelabel = !1);
                                    var r = i.config.yaxis[0].opposite && i.globals.isBarHorizontal;
                                    s.yaxis.forEach(function (c, g) {
                                        r
                                            ? (e.dCtx.gridPad.left < o && (e.dCtx.xPadLeft = o / 2 + 1), (e.dCtx.xPadRight = o / 2 + 1))
                                            : (function (c, g) {
                                                  (s.yaxis.length > 1 && -1 !== a.collapsedSeriesIndices.indexOf(g)) ||
                                                      (function (u) {
                                                          if (e.dCtx.timescaleLabels && e.dCtx.timescaleLabels.length) {
                                                              var y = e.dCtx.timescaleLabels[0].position - o / 1.75 + e.dCtx.yAxisWidthLeft;
                                                              e.dCtx.timescaleLabels[e.dCtx.timescaleLabels.length - 1].position + o / 1.75 - e.dCtx.yAxisWidthRight >
                                                                  a.svgWidth - a.translateX - ("right" === i.config.legend.position && e.dCtx.lgRect.width > 0 ? e.dCtx.lgRect.width : 0) && (a.skipLastTimelinelabel = !0),
                                                                  y < -((u.show && !u.floating) || ("bar" !== s.chart.type && "candlestick" !== s.chart.type && "rangeBar" !== s.chart.type && "boxPlot" !== s.chart.type) ? 10 : o / 1.75) &&
                                                                      (a.skipFirstTimelinelabel = !0);
                                                          } else
                                                              "datetime" === n
                                                                  ? e.dCtx.gridPad.right < o && !a.rotateXLabels && (a.skipLastTimelinelabel = !0)
                                                                  : "datetime" !== n &&
                                                                    e.dCtx.gridPad.right < o / 2 - e.dCtx.yAxisWidthRight &&
                                                                    !a.rotateXLabels &&
                                                                    !i.config.xaxis.labels.trim &&
                                                                    ("between" !== i.config.xaxis.tickPlacement || i.globals.isBarHorizontal) &&
                                                                    (e.dCtx.xPadRight = o / 2 + 1);
                                                      })(c);
                                              })(c, g);
                                    });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ve = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.dCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "getyAxisLabelsCoords",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = [],
                                        a = 10,
                                        s = new Pt(this.dCtx.ctx);
                                    return (
                                        e.config.yaxis.map(function (n, o) {
                                            var r = e.globals.yAxisScale[o],
                                                d = 0;
                                            if ((!s.isYAxisHidden(o) && n.labels.show && void 0 !== n.labels.minWidth && (d = n.labels.minWidth), !s.isYAxisHidden(o) && n.labels.show && r.result.length)) {
                                                var c = e.globals.yLabelFormatters[o],
                                                    g = r.niceMin === Number.MIN_VALUE ? 0 : r.niceMin,
                                                    u = String(g).length > String(r.niceMax).length ? g : r.niceMax,
                                                    p = c(u, { seriesIndex: o, dataPointIndex: -1, w: e }),
                                                    x = p;
                                                if (((void 0 !== p && 0 !== p.length) || (p = u), e.globals.isBarHorizontal)) {
                                                    a = 0;
                                                    var y = e.globals.labels.slice();
                                                    (p = c((p = z.getLargestStringFromArr(y)), { seriesIndex: o, dataPointIndex: -1, w: e })), (x = t.dCtx.dimHelpers.getLargestStringFromMultiArr(p, y));
                                                }
                                                var C = new E(t.dCtx.ctx),
                                                    w = "rotate(".concat(n.labels.rotate, " 0 0)"),
                                                    P = C.getTextRects(p, n.labels.style.fontSize, n.labels.style.fontFamily, w, !1),
                                                    l = P;
                                                p !== x && (l = C.getTextRects(x, n.labels.style.fontSize, n.labels.style.fontFamily, w, !1)),
                                                    i.push({ width: (d > l.width || d > P.width ? d : l.width > P.width ? l.width : P.width) + a, height: l.height > P.height ? l.height : P.height });
                                            } else i.push({ width: 0, height: 0 });
                                        }),
                                        i
                                    );
                                },
                            },
                            {
                                key: "getyAxisTitleCoords",
                                value: function () {
                                    var t = this,
                                        i = [];
                                    return (
                                        this.w.config.yaxis.map(function (a, s) {
                                            if (a.show && void 0 !== a.title.text) {
                                                var n = new E(t.dCtx.ctx),
                                                    o = "rotate(".concat(a.title.rotate, " 0 0)"),
                                                    r = n.getTextRects(a.title.text, a.title.style.fontSize, a.title.style.fontFamily, o, !1);
                                                i.push({ width: r.width, height: r.height });
                                            } else i.push({ width: 0, height: 0 });
                                        }),
                                        i
                                    );
                                },
                            },
                            {
                                key: "getTotalYAxisWidth",
                                value: function () {
                                    var t = this.w,
                                        e = 0,
                                        i = 0,
                                        a = 0,
                                        s = t.globals.yAxisScale.length > 1 ? 10 : 0,
                                        n = new Pt(this.dCtx.ctx),
                                        o = function (r, d) {
                                            var c = t.config.yaxis[d].floating,
                                                g = 0;
                                            r.width > 0 && !c ? ((g = r.width + s), t.globals.ignoreYAxisIndexes.indexOf(d) > -1 && (g = g - r.width - s)) : (g = c || n.isYAxisHidden(d) ? 0 : 5),
                                                t.config.yaxis[d].opposite ? (a += g) : (i += g),
                                                (e += g);
                                        };
                                    return (
                                        t.globals.yLabelsCoords.map(function (r, d) {
                                            o(r, d);
                                        }),
                                        t.globals.yTitleCoords.map(function (r, d) {
                                            o(r, d);
                                        }),
                                        t.globals.isBarHorizontal && !t.config.yaxis[0].floating && (e = t.globals.yLabelsCoords[0].width + t.globals.yTitleCoords[0].width + 15),
                                        (this.dCtx.yAxisWidthLeft = i),
                                        (this.dCtx.yAxisWidthRight = a),
                                        e
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                be = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.dCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "gridPadForColumnsInNumericAxis",
                                value: function (t) {
                                    var e = this.w;
                                    if (e.globals.noData || e.globals.allSeriesCollapsed) return 0;
                                    var i = function (c) {
                                            return "bar" === c || "rangeBar" === c || "candlestick" === c || "boxPlot" === c;
                                        },
                                        a = e.config.chart.type,
                                        s = 0,
                                        n = i(a) ? e.config.series.length : 1;
                                    if (
                                        (e.globals.comboBarCount > 0 && (n = e.globals.comboBarCount),
                                        e.globals.collapsedSeries.forEach(function (c) {
                                            i(c.type) && (n -= 1);
                                        }),
                                        e.config.chart.stacked && (n = 1),
                                        (i(a) || e.globals.comboBarCount > 0) && e.globals.isXNumeric && !e.globals.isBarHorizontal && n > 0)
                                    ) {
                                        var o,
                                            r,
                                            d = Math.abs(e.globals.initialMaxX - e.globals.initialMinX);
                                        d <= 3 && (d = e.globals.dataPoints),
                                            (o = d / t),
                                            e.globals.minXDiff && e.globals.minXDiff / o > 0 && (r = e.globals.minXDiff / o),
                                            r > t / 2 && (r /= 2),
                                            (s = ((r / n) * parseInt(e.config.plotOptions.bar.columnWidth, 10)) / 100) < 1 && (s = 1),
                                            (e.globals.barPadForNumericAxis = s = s / (n > 1 ? 1 : 1.5) + 5);
                                    }
                                    return s;
                                },
                            },
                            {
                                key: "gridPadFortitleSubtitle",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = e.globals,
                                        a = this.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 10;
                                    ["title", "subtitle"].forEach(function (o) {
                                        a += void 0 !== e.config[o].text ? e.config[o].margin : t.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 5;
                                    }),
                                        !e.config.legend.show || "bottom" !== e.config.legend.position || e.config.legend.floating || e.globals.axisCharts || (a += 10);
                                    var s = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),
                                        n = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
                                    (i.gridHeight = i.gridHeight - s.height - n.height - a), (i.translateY = i.translateY + s.height + n.height + a);
                                },
                            },
                            {
                                key: "setGridXPosForDualYAxis",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = new Pt(this.dCtx.ctx);
                                    i.config.yaxis.map(function (s, n) {
                                        -1 !== i.globals.ignoreYAxisIndexes.indexOf(n) ||
                                            s.floating ||
                                            a.isYAxisHidden(n) ||
                                            (s.opposite && (i.globals.translateX = i.globals.translateX - (e[n].width + t[n].width) - parseInt(i.config.yaxis[n].labels.style.fontSize, 10) / 1.2 - 12),
                                            i.globals.translateX < 2 && (i.globals.translateX = 2));
                                    });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Nt = (function () {
                    function A(t) {
                        B(this, A),
                            (this.ctx = t),
                            (this.w = t.w),
                            (this.lgRect = {}),
                            (this.yAxisWidth = 0),
                            (this.yAxisWidthLeft = 0),
                            (this.yAxisWidthRight = 0),
                            (this.xAxisHeight = 0),
                            (this.isSparkline = this.w.config.chart.sparkline.enabled),
                            (this.dimHelpers = new xe(this)),
                            (this.dimYAxis = new ve(this)),
                            (this.dimXAxis = new me(this)),
                            (this.dimGrid = new be(this)),
                            (this.lgWidthForSideLegends = 0),
                            (this.gridPad = this.w.config.grid.padding),
                            (this.xPadRight = 0),
                            (this.xPadLeft = 0);
                    }
                    return (
                        m(A, [
                            {
                                key: "plotCoords",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = e.globals;
                                    (this.lgRect = this.dimHelpers.getLegendsRect()),
                                        this.isSparkline &&
                                            (e.config.markers.discrete.length > 0 || e.config.markers.size > 0) &&
                                            Object.entries(this.gridPad).forEach(function (s) {
                                                var n = Z(s, 2);
                                                t.gridPad[n[0]] = Math.max(n[1], t.w.globals.markers.largestSize / 1.5);
                                            }),
                                        i.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(),
                                        this.dimGrid.gridPadFortitleSubtitle(),
                                        (i.gridHeight = i.gridHeight - this.gridPad.top - this.gridPad.bottom),
                                        (i.gridWidth = i.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft);
                                    var a = this.dimGrid.gridPadForColumnsInNumericAxis(i.gridWidth);
                                    (i.gridWidth = i.gridWidth - 2 * a), (i.translateX = i.translateX + this.gridPad.left + this.xPadLeft + (a > 0 ? a + 4 : 0)), (i.translateY = i.translateY + this.gridPad.top);
                                },
                            },
                            {
                                key: "setDimensionsForAxisCharts",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = e.globals,
                                        a = this.dimYAxis.getyAxisLabelsCoords(),
                                        s = this.dimYAxis.getyAxisTitleCoords();
                                    (e.globals.yLabelsCoords = []),
                                        (e.globals.yTitleCoords = []),
                                        e.config.yaxis.map(function (p, x) {
                                            e.globals.yLabelsCoords.push({ width: a[x].width, index: x }), e.globals.yTitleCoords.push({ width: s[x].width, index: x });
                                        }),
                                        (this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth());
                                    var n = this.dimXAxis.getxAxisLabelsCoords(),
                                        o = this.dimXAxis.getxAxisGroupLabelsCoords(),
                                        r = this.dimXAxis.getxAxisTitleCoords();
                                    this.conditionalChecksForAxisCoords(n, r, o),
                                        (i.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4),
                                        (i.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0),
                                        e.globals.isBarHorizontal && ((i.rotateXLabels = !1), (i.translateXAxisY = (parseInt(e.config.xaxis.labels.style.fontSize, 10) / 1.5) * -1)),
                                        (i.translateXAxisY = i.translateXAxisY + e.config.xaxis.labels.offsetY),
                                        (i.translateXAxisX = i.translateXAxisX + e.config.xaxis.labels.offsetX);
                                    var d = this.yAxisWidth,
                                        c = this.xAxisHeight;
                                    (i.xAxisLabelsHeight = this.xAxisHeight - r.height), (i.xAxisGroupLabelsHeight = i.xAxisLabelsHeight - n.height), (i.xAxisLabelsWidth = this.xAxisWidth), (i.xAxisHeight = this.xAxisHeight);
                                    var g = 10;
                                    ("radar" === e.config.chart.type || this.isSparkline) && ((d = 0), (c = i.goldenPadding)),
                                        this.isSparkline && (this.lgRect = { height: 0, width: 0 }),
                                        (this.isSparkline || "treemap" === e.config.chart.type) && ((d = 0), (c = 0), (g = 0)),
                                        this.isSparkline || this.dimXAxis.additionalPaddingXLabels(n);
                                    var u = function () {
                                        (i.translateX = d), (i.gridHeight = i.svgHeight - t.lgRect.height - c - (t.isSparkline || "treemap" === e.config.chart.type ? 0 : e.globals.rotateXLabels ? 10 : 15)), (i.gridWidth = i.svgWidth - d);
                                    };
                                    switch (("top" === e.config.xaxis.position && (g = i.xAxisHeight - e.config.xaxis.axisTicks.height - 5), e.config.legend.position)) {
                                        case "bottom":
                                            (i.translateY = g), u();
                                            break;
                                        case "top":
                                            (i.translateY = this.lgRect.height + g), u();
                                            break;
                                        case "left":
                                            (i.translateY = g), (i.translateX = this.lgRect.width + d), (i.gridHeight = i.svgHeight - c - 12), (i.gridWidth = i.svgWidth - this.lgRect.width - d);
                                            break;
                                        case "right":
                                            (i.translateY = g), (i.translateX = d), (i.gridHeight = i.svgHeight - c - 12), (i.gridWidth = i.svgWidth - this.lgRect.width - d - 5);
                                            break;
                                        default:
                                            throw new Error("Legend position not supported");
                                    }
                                    this.dimGrid.setGridXPosForDualYAxis(s, a), new Ht(this.ctx).setYAxisXPosition(a, s);
                                },
                            },
                            {
                                key: "setDimensionsForNonAxisCharts",
                                value: function () {
                                    var t = this.w,
                                        e = t.globals,
                                        i = t.config,
                                        a = 0;
                                    t.config.legend.show && !t.config.legend.floating && (a = 20);
                                    var s = "pie" === i.chart.type || "polarArea" === i.chart.type || "donut" === i.chart.type ? "pie" : "radialBar",
                                        n = i.plotOptions[s].offsetY,
                                        o = i.plotOptions[s].offsetX;
                                    if (!i.legend.show || i.legend.floating)
                                        return (e.gridHeight = e.svgHeight - i.grid.padding.left + i.grid.padding.right), (e.gridWidth = e.gridHeight), (e.translateY = n), void (e.translateX = o + (e.svgWidth - e.gridWidth) / 2);
                                    switch (i.legend.position) {
                                        case "bottom":
                                            (e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding), (e.gridWidth = e.svgWidth), (e.translateY = n - 10), (e.translateX = o + (e.svgWidth - e.gridWidth) / 2);
                                            break;
                                        case "top":
                                            (e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding), (e.gridWidth = e.svgWidth), (e.translateY = this.lgRect.height + n + 10), (e.translateX = o + (e.svgWidth - e.gridWidth) / 2);
                                            break;
                                        case "left":
                                            (e.gridWidth = e.svgWidth - this.lgRect.width - a), (e.gridHeight = "auto" !== i.chart.height ? e.svgHeight : e.gridWidth), (e.translateY = n), (e.translateX = o + this.lgRect.width + a);
                                            break;
                                        case "right":
                                            (e.gridWidth = e.svgWidth - this.lgRect.width - a - 5), (e.gridHeight = "auto" !== i.chart.height ? e.svgHeight : e.gridWidth), (e.translateY = n), (e.translateX = o + 10);
                                            break;
                                        default:
                                            throw new Error("Legend position not supported");
                                    }
                                },
                            },
                            {
                                key: "conditionalChecksForAxisCoords",
                                value: function (t, e, i) {
                                    var a = this.w;
                                    (this.xAxisHeight =
                                        (i.height + t.height + e.height) * (a.globals.isMultiLineX ? 1.2 : a.globals.LINE_HEIGHT_RATIO) +
                                        (a.globals.hasXaxisGroups ? 2 : 1) * (a.globals.rotateXLabels ? 22 : 10) +
                                        (a.globals.rotateXLabels && "bottom" === a.config.legend.position ? 10 : 0)),
                                        (this.xAxisWidth = t.width),
                                        this.xAxisHeight - e.height > a.config.xaxis.labels.maxHeight && (this.xAxisHeight = a.config.xaxis.labels.maxHeight),
                                        a.config.xaxis.labels.minHeight && this.xAxisHeight < a.config.xaxis.labels.minHeight && (this.xAxisHeight = a.config.xaxis.labels.minHeight),
                                        a.config.xaxis.floating && (this.xAxisHeight = 0);
                                    var c = 0,
                                        g = 0;
                                    a.config.yaxis.forEach(function (u) {
                                        (c += u.labels.minWidth), (g += u.labels.maxWidth);
                                    }),
                                        this.yAxisWidth < c && (this.yAxisWidth = c),
                                        this.yAxisWidth > g && (this.yAxisWidth = g);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ye = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.lgCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "getLegendStyles",
                                value: function () {
                                    var t = document.createElement("style");
                                    t.setAttribute("type", "text/css");
                                    var e = document.createTextNode(
                                        "\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n        border-style: solid;\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }"
                                    );
                                    return t.appendChild(e), t;
                                },
                            },
                            {
                                key: "getLegendBBox",
                                value: function () {
                                    var t = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect();
                                    return { clwh: t.height, clww: t.width };
                                },
                            },
                            {
                                key: "appendToForeignObject",
                                value: function () {
                                    this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());
                                },
                            },
                            {
                                key: "toggleDataSeries",
                                value: function (t, e) {
                                    var i = this,
                                        a = this.w;
                                    if (a.globals.axisCharts || "radialBar" === a.config.chart.type) {
                                        a.globals.resized = !0;
                                        var s = null,
                                            n = null;
                                        (a.globals.risingSeries = []),
                                            a.globals.axisCharts
                                                ? ((s = a.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t, "']"))), (n = parseInt(s.getAttribute("data:realIndex"), 10)))
                                                : ((s = a.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t + 1, "']"))), (n = parseInt(s.getAttribute("rel"), 10) - 1)),
                                            e
                                                ? [
                                                      { cs: a.globals.collapsedSeries, csi: a.globals.collapsedSeriesIndices },
                                                      { cs: a.globals.ancillaryCollapsedSeries, csi: a.globals.ancillaryCollapsedSeriesIndices },
                                                  ].forEach(function (c) {
                                                      i.riseCollapsedSeries(c.cs, c.csi, n);
                                                  })
                                                : this.hideSeries({ seriesEl: s, realIndex: n });
                                    } else {
                                        var o = a.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t + 1, "'] path")),
                                            r = a.config.chart.type;
                                        if ("pie" === r || "polarArea" === r || "donut" === r) {
                                            var d = a.config.plotOptions.pie.donut.labels;
                                            new E(this.lgCtx.ctx).pathMouseDown(o.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o.members[0].node, d);
                                        }
                                        o.fire("click");
                                    }
                                },
                            },
                            {
                                key: "hideSeries",
                                value: function (t) {
                                    var e = t.seriesEl,
                                        i = t.realIndex,
                                        a = this.w,
                                        s = z.clone(a.config.series);
                                    if (a.globals.axisCharts) {
                                        var n = !1;
                                        if (
                                            (a.config.yaxis[i] &&
                                                a.config.yaxis[i].show &&
                                                a.config.yaxis[i].showAlways &&
                                                ((n = !0),
                                                a.globals.ancillaryCollapsedSeriesIndices.indexOf(i) < 0 &&
                                                    (a.globals.ancillaryCollapsedSeries.push({ index: i, data: s[i].data.slice(), type: e.parentNode.className.baseVal.split("-")[1] }), a.globals.ancillaryCollapsedSeriesIndices.push(i))),
                                            !n)
                                        ) {
                                            a.globals.collapsedSeries.push({ index: i, data: s[i].data.slice(), type: e.parentNode.className.baseVal.split("-")[1] }), a.globals.collapsedSeriesIndices.push(i);
                                            var o = a.globals.risingSeries.indexOf(i);
                                            a.globals.risingSeries.splice(o, 1);
                                        }
                                    } else a.globals.collapsedSeries.push({ index: i, data: s[i] }), a.globals.collapsedSeriesIndices.push(i);
                                    for (var r = e.childNodes, d = 0; d < r.length; d++)
                                        r[d].classList.contains("apexcharts-series-markers-wrap") && (r[d].classList.contains("apexcharts-hide") ? r[d].classList.remove("apexcharts-hide") : r[d].classList.add("apexcharts-hide"));
                                    (a.globals.allSeriesCollapsed = a.globals.collapsedSeries.length === a.config.series.length),
                                        (s = this._getSeriesBasedOnCollapsedState(s)),
                                        this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);
                                },
                            },
                            {
                                key: "riseCollapsedSeries",
                                value: function (t, e, i) {
                                    var a = this.w,
                                        s = z.clone(a.config.series);
                                    if (t.length > 0) {
                                        for (var n = 0; n < t.length; n++)
                                            t[n].index === i &&
                                                (a.globals.axisCharts
                                                    ? ((s[i].data = t[n].data.slice()), t.splice(n, 1), e.splice(n, 1), a.globals.risingSeries.push(i))
                                                    : ((s[i] = t[n].data), t.splice(n, 1), e.splice(n, 1), a.globals.risingSeries.push(i)));
                                        (s = this._getSeriesBasedOnCollapsedState(s)), this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);
                                    }
                                },
                            },
                            {
                                key: "_getSeriesBasedOnCollapsedState",
                                value: function (t) {
                                    var e = this.w;
                                    return (
                                        t.forEach(
                                            e.globals.axisCharts
                                                ? function (i, a) {
                                                      e.globals.collapsedSeriesIndices.indexOf(a) > -1 && (t[a].data = []);
                                                  }
                                                : function (i, a) {
                                                      e.globals.collapsedSeriesIndices.indexOf(a) > -1 && (t[a] = 0);
                                                  }
                                        ),
                                        t
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                te = (function () {
                    function A(t) {
                        B(this, A),
                            (this.ctx = t),
                            (this.w = t.w),
                            (this.onLegendClick = this.onLegendClick.bind(this)),
                            (this.onLegendHovered = this.onLegendHovered.bind(this)),
                            (this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length),
                            (this.legendHelpers = new ye(this));
                    }
                    return (
                        m(A, [
                            {
                                key: "init",
                                value: function () {
                                    var t = this.w,
                                        e = t.globals,
                                        i = t.config;
                                    if (((i.legend.showForSingleSeries && 1 === e.series.length) || this.isBarsDistributed || e.series.length > 1 || !e.axisCharts) && i.legend.show) {
                                        for (; e.dom.elLegendWrap.firstChild; ) e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);
                                        this.drawLegends(),
                                            z.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(),
                                            "bottom" === i.legend.position || "top" === i.legend.position ? this.legendAlignHorizontal() : ("right" !== i.legend.position && "left" !== i.legend.position) || this.legendAlignVertical();
                                    }
                                },
                            },
                            {
                                key: "drawLegends",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = e.config.legend.fontFamily,
                                        a = e.globals.seriesNames,
                                        s = e.globals.colors.slice();
                                    if ("heatmap" === e.config.chart.type) {
                                        var n = e.config.plotOptions.heatmap.colorScale.ranges;
                                        (a = n.map(function (O) {
                                            return O.name ? O.name : O.from + " - " + O.to;
                                        })),
                                            (s = n.map(function (O) {
                                                return O.color;
                                            }));
                                    } else this.isBarsDistributed && (a = e.globals.labels.slice());
                                    e.config.legend.customLegendItems.length && (a = e.config.legend.customLegendItems);
                                    for (var o = e.globals.legendFormatter, r = e.config.legend.inverseOrder, d = r ? a.length - 1 : 0; r ? d >= 0 : d <= a.length - 1; r ? d-- : d++) {
                                        var c,
                                            g = o(a[d], { seriesIndex: d, w: e }),
                                            u = !1,
                                            p = !1;
                                        if (e.globals.collapsedSeries.length > 0) for (var x = 0; x < e.globals.collapsedSeries.length; x++) e.globals.collapsedSeries[x].index === d && (u = !0);
                                        if (e.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var y = 0; y < e.globals.ancillaryCollapsedSeriesIndices.length; y++) e.globals.ancillaryCollapsedSeriesIndices[y] === d && (p = !0);
                                        var C = document.createElement("span");
                                        C.classList.add("apexcharts-legend-marker");
                                        var w = e.config.legend.markers.offsetX,
                                            P = e.config.legend.markers.offsetY,
                                            l = e.config.legend.markers.height,
                                            f = e.config.legend.markers.width,
                                            v = e.config.legend.markers.strokeWidth,
                                            S = e.config.legend.markers.strokeColor,
                                            M = e.config.legend.markers.radius,
                                            L = C.style;
                                        (L.background = s[d]),
                                            (L.color = s[d]),
                                            L.setProperty("background", s[d], "important"),
                                            e.config.legend.markers.fillColors && e.config.legend.markers.fillColors[d] && (L.background = e.config.legend.markers.fillColors[d]),
                                            void 0 !== e.globals.seriesColors[d] && ((L.background = e.globals.seriesColors[d]), (L.color = e.globals.seriesColors[d])),
                                            (L.height = Array.isArray(l) ? parseFloat(l[d]) + "px" : parseFloat(l) + "px"),
                                            (L.width = Array.isArray(f) ? parseFloat(f[d]) + "px" : parseFloat(f) + "px"),
                                            (L.left = (Array.isArray(w) ? parseFloat(w[d]) : parseFloat(w)) + "px"),
                                            (L.top = (Array.isArray(P) ? parseFloat(P[d]) : parseFloat(P)) + "px"),
                                            (L.borderWidth = Array.isArray(v) ? v[d] : v),
                                            (L.borderColor = Array.isArray(S) ? S[d] : S),
                                            (L.borderRadius = Array.isArray(M) ? parseFloat(M[d]) + "px" : parseFloat(M) + "px"),
                                            e.config.legend.markers.customHTML &&
                                                (Array.isArray(e.config.legend.markers.customHTML)
                                                    ? e.config.legend.markers.customHTML[d] && (C.innerHTML = e.config.legend.markers.customHTML[d]())
                                                    : (C.innerHTML = e.config.legend.markers.customHTML())),
                                            E.setAttrs(C, { rel: d + 1, "data:collapsed": u || p }),
                                            (u || p) && C.classList.add("apexcharts-inactive-legend");
                                        var k = document.createElement("div"),
                                            I = document.createElement("span");
                                        I.classList.add("apexcharts-legend-text"), (I.innerHTML = Array.isArray(g) ? g.join(" ") : g);
                                        var Y = e.config.legend.labels.useSeriesColors
                                            ? e.globals.colors[d]
                                            : Array.isArray(e.config.legend.labels.colors)
                                            ? null === (c = e.config.legend.labels.colors) || void 0 === c
                                                ? void 0
                                                : c[d]
                                            : e.config.legend.labels.colors;
                                        Y || (Y = e.config.chart.foreColor),
                                            (I.style.color = Y),
                                            (I.style.fontSize = parseFloat(e.config.legend.fontSize) + "px"),
                                            (I.style.fontWeight = e.config.legend.fontWeight),
                                            (I.style.fontFamily = i || e.config.chart.fontFamily),
                                            E.setAttrs(I, { rel: d + 1, i: d, "data:default-text": encodeURIComponent(g), "data:collapsed": u || p }),
                                            k.appendChild(C),
                                            k.appendChild(I);
                                        var D = new $(this.ctx);
                                        e.config.legend.showForZeroSeries ||
                                            (0 === D.getSeriesTotalByIndex(d) &&
                                                D.seriesHaveSameValues(d) &&
                                                !D.isSeriesNull(d) &&
                                                -1 === e.globals.collapsedSeriesIndices.indexOf(d) &&
                                                -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(d) &&
                                                k.classList.add("apexcharts-hidden-zero-series")),
                                            e.config.legend.showForNullSeries ||
                                                (D.isSeriesNull(d) && -1 === e.globals.collapsedSeriesIndices.indexOf(d) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(d) && k.classList.add("apexcharts-hidden-null-series")),
                                            e.globals.dom.elLegendWrap.appendChild(k),
                                            e.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e.config.legend.horizontalAlign)),
                                            e.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e.config.legend.position),
                                            k.classList.add("apexcharts-legend-series"),
                                            (k.style.margin = "".concat(e.config.legend.itemMargin.vertical, "px ").concat(e.config.legend.itemMargin.horizontal, "px")),
                                            (e.globals.dom.elLegendWrap.style.width = e.config.legend.width ? e.config.legend.width + "px" : ""),
                                            (e.globals.dom.elLegendWrap.style.height = e.config.legend.height ? e.config.legend.height + "px" : ""),
                                            E.setAttrs(k, { rel: d + 1, seriesName: z.escapeString(a[d]), "data:collapsed": u || p }),
                                            (u || p) && k.classList.add("apexcharts-inactive-legend"),
                                            e.config.legend.onItemClick.toggleDataSeries || k.classList.add("apexcharts-no-click");
                                    }
                                    e.globals.dom.elWrap.addEventListener("click", t.onLegendClick, !0),
                                        e.config.legend.onItemHover.highlightDataSeries &&
                                            0 === e.config.legend.customLegendItems.length &&
                                            (e.globals.dom.elWrap.addEventListener("mousemove", t.onLegendHovered, !0), e.globals.dom.elWrap.addEventListener("mouseout", t.onLegendHovered, !0));
                                },
                            },
                            {
                                key: "setLegendWrapXY",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = i.globals.dom.elLegendWrap,
                                        s = a.getBoundingClientRect(),
                                        n = 0,
                                        o = 0;
                                    if ("bottom" === i.config.legend.position) o += i.globals.svgHeight - s.height / 2;
                                    else if ("top" === i.config.legend.position) {
                                        var r = new Nt(this.ctx),
                                            d = r.dimHelpers.getTitleSubtitleCoords("title").height,
                                            c = r.dimHelpers.getTitleSubtitleCoords("subtitle").height;
                                        o = o + (d > 0 ? d - 10 : 0) + (c > 0 ? c - 10 : 0);
                                    }
                                    (a.style.position = "absolute"),
                                        (o = o + e + i.config.legend.offsetY),
                                        (a.style.left = (n = n + t + i.config.legend.offsetX) + "px"),
                                        (a.style.top = o + "px"),
                                        "bottom" === i.config.legend.position
                                            ? ((a.style.top = "auto"), (a.style.bottom = 5 - i.config.legend.offsetY + "px"))
                                            : "right" === i.config.legend.position && ((a.style.left = "auto"), (a.style.right = 25 + i.config.legend.offsetX + "px")),
                                        ["width", "height"].forEach(function (g) {
                                            a.style[g] && (a.style[g] = parseInt(i.config.legend[g], 10) + "px");
                                        });
                                },
                            },
                            {
                                key: "legendAlignHorizontal",
                                value: function () {
                                    var t = this.w;
                                    t.globals.dom.elLegendWrap.style.right = 0;
                                    var e = this.legendHelpers.getLegendBBox(),
                                        i = new Nt(this.ctx),
                                        a = i.dimHelpers.getTitleSubtitleCoords("title"),
                                        s = i.dimHelpers.getTitleSubtitleCoords("subtitle"),
                                        n = 0;
                                    "bottom" === t.config.legend.position ? (n = -e.clwh / 1.8) : "top" === t.config.legend.position && (n = a.height + s.height + t.config.title.margin + t.config.subtitle.margin - 10),
                                        this.setLegendWrapXY(20, n);
                                },
                            },
                            {
                                key: "legendAlignVertical",
                                value: function () {
                                    var t = this.w,
                                        e = this.legendHelpers.getLegendBBox(),
                                        i = 0;
                                    "left" === t.config.legend.position && (i = 20), "right" === t.config.legend.position && (i = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(i, 20);
                                },
                            },
                            {
                                key: "onLegendHovered",
                                value: function (t) {
                                    var e = this.w,
                                        i = t.target.classList.contains("apexcharts-legend-text") || t.target.classList.contains("apexcharts-legend-marker");
                                    if ("heatmap" === e.config.chart.type || this.isBarsDistributed) {
                                        if (i) {
                                            var a = parseInt(t.target.getAttribute("rel"), 10) - 1;
                                            this.ctx.events.fireEvent("legendHover", [this.ctx, a, this.w]), new bt(this.ctx).highlightRangeInSeries(t, t.target);
                                        }
                                    } else !t.target.classList.contains("apexcharts-inactive-legend") && i && new bt(this.ctx).toggleSeriesOnHover(t, t.target);
                                },
                            },
                            {
                                key: "onLegendClick",
                                value: function (t) {
                                    var e = this.w;
                                    if (!e.config.legend.customLegendItems.length && (t.target.classList.contains("apexcharts-legend-text") || t.target.classList.contains("apexcharts-legend-marker"))) {
                                        var i = parseInt(t.target.getAttribute("rel"), 10) - 1,
                                            a = "true" === t.target.getAttribute("data:collapsed"),
                                            s = this.w.config.chart.events.legendClick;
                                        "function" == typeof s && s(this.ctx, i, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, i, this.w]);
                                        var n = this.w.config.legend.markers.onClick;
                                        "function" == typeof n && t.target.classList.contains("apexcharts-legend-marker") && (n(this.ctx, i, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, i, this.w])),
                                            "treemap" !== e.config.chart.type && "heatmap" !== e.config.chart.type && !this.isBarsDistributed && e.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i, a);
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ee = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                        var e = this.w;
                        (this.ev = this.w.config.chart.events), (this.selectedClass = "apexcharts-selected"), (this.localeValues = this.w.globals.locale.toolbar), (this.minX = e.globals.minX), (this.maxX = e.globals.maxX);
                    }
                    return (
                        m(A, [
                            {
                                key: "createToolbar",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = function () {
                                            return document.createElement("div");
                                        },
                                        a = i();
                                    if (
                                        (a.setAttribute("class", "apexcharts-toolbar"),
                                        (a.style.top = e.config.chart.toolbar.offsetY + "px"),
                                        (a.style.right = 3 - e.config.chart.toolbar.offsetX + "px"),
                                        e.globals.dom.elWrap.appendChild(a),
                                        (this.elZoom = i()),
                                        (this.elZoomIn = i()),
                                        (this.elZoomOut = i()),
                                        (this.elPan = i()),
                                        (this.elSelection = i()),
                                        (this.elZoomReset = i()),
                                        (this.elMenuIcon = i()),
                                        (this.elMenu = i()),
                                        (this.elCustomIcons = []),
                                        (this.t = e.config.chart.toolbar.tools),
                                        Array.isArray(this.t.customIcons))
                                    )
                                        for (var s = 0; s < this.t.customIcons.length; s++) this.elCustomIcons.push(i());
                                    var n = [],
                                        o = function (g, u, p) {
                                            var x = g.toLowerCase();
                                            t.t[x] && e.config.chart.zoom.enabled && n.push({ el: u, icon: "string" == typeof t.t[x] ? t.t[x] : p, title: t.localeValues[g], class: "apexcharts-".concat(x, "-icon") });
                                        };
                                    o(
                                        "zoomIn",
                                        this.elZoomIn,
                                        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                                    ),
                                        o(
                                            "zoomOut",
                                            this.elZoomOut,
                                            '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                                        );
                                    var r = function (g) {
                                        t.t[g] &&
                                            e.config.chart[g].enabled &&
                                            n.push({
                                                el: "zoom" === g ? t.elZoom : t.elSelection,
                                                icon:
                                                    "string" == typeof t.t[g]
                                                        ? t.t[g]
                                                        : "zoom" === g
                                                        ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>'
                                                        : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                                                title: t.localeValues["zoom" === g ? "selectionZoom" : "selection"],
                                                class: e.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(g, "-icon"),
                                            });
                                    };
                                    r("zoom"),
                                        r("selection"),
                                        this.t.pan &&
                                            e.config.chart.zoom.enabled &&
                                            n.push({
                                                el: this.elPan,
                                                icon:
                                                    "string" == typeof this.t.pan
                                                        ? this.t.pan
                                                        : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
                                                title: this.localeValues.pan,
                                                class: e.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon",
                                            }),
                                        o(
                                            "reset",
                                            this.elZoomReset,
                                            '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'
                                        ),
                                        this.t.download &&
                                            n.push({
                                                el: this.elMenuIcon,
                                                icon:
                                                    "string" == typeof this.t.download
                                                        ? this.t.download
                                                        : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                                                title: this.localeValues.menu,
                                                class: "apexcharts-menu-icon",
                                            });
                                    for (var d = 0; d < this.elCustomIcons.length; d++)
                                        n.push({
                                            el: this.elCustomIcons[d],
                                            icon: this.t.customIcons[d].icon,
                                            title: this.t.customIcons[d].title,
                                            index: this.t.customIcons[d].index,
                                            class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[d].class,
                                        });
                                    n.forEach(function (g, u) {
                                        g.index && z.moveIndexInArray(n, u, g.index);
                                    });
                                    for (var c = 0; c < n.length; c++) E.setAttrs(n[c].el, { class: n[c].class, title: n[c].title }), (n[c].el.innerHTML = n[c].icon), a.appendChild(n[c].el);
                                    this._createHamburgerMenu(a),
                                        e.globals.zoomEnabled
                                            ? this.elZoom.classList.add(this.selectedClass)
                                            : e.globals.panEnabled
                                            ? this.elPan.classList.add(this.selectedClass)
                                            : e.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass),
                                        this.addToolbarEventListeners();
                                },
                            },
                            {
                                key: "_createHamburgerMenu",
                                value: function (t) {
                                    (this.elMenuItems = []), t.appendChild(this.elMenu), E.setAttrs(this.elMenu, { class: "apexcharts-menu" });
                                    var e = [
                                        { name: "exportSVG", title: this.localeValues.exportToSVG },
                                        { name: "exportPNG", title: this.localeValues.exportToPNG },
                                        { name: "exportCSV", title: this.localeValues.exportToCSV },
                                    ];
                                    this.w.globals.allSeriesHasEqualX || e.splice(2, 1);
                                    for (var i = 0; i < e.length; i++)
                                        this.elMenuItems.push(document.createElement("div")),
                                            (this.elMenuItems[i].innerHTML = e[i].title),
                                            E.setAttrs(this.elMenuItems[i], { class: "apexcharts-menu-item ".concat(e[i].name), title: e[i].title }),
                                            this.elMenu.appendChild(this.elMenuItems[i]);
                                },
                            },
                            {
                                key: "addToolbarEventListeners",
                                value: function () {
                                    var t = this;
                                    this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)),
                                        this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")),
                                        this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")),
                                        this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)),
                                        this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)),
                                        this.elPan.addEventListener("click", this.togglePanning.bind(this)),
                                        this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)),
                                        this.elMenuItems.forEach(function (i) {
                                            i.classList.contains("exportSVG")
                                                ? i.addEventListener("click", t.handleDownload.bind(t, "svg"))
                                                : i.classList.contains("exportPNG")
                                                ? i.addEventListener("click", t.handleDownload.bind(t, "png"))
                                                : i.classList.contains("exportCSV") && i.addEventListener("click", t.handleDownload.bind(t, "csv"));
                                        });
                                    for (var e = 0; e < this.t.customIcons.length; e++) this.elCustomIcons[e].addEventListener("click", this.t.customIcons[e].click.bind(this, this.ctx, this.ctx.w));
                                },
                            },
                            {
                                key: "toggleZoomSelection",
                                value: function (t) {
                                    this.ctx.getSyncedCharts().forEach(function (e) {
                                        e.ctx.toolbar.toggleOtherControls();
                                        var i = "selection" === t ? e.ctx.toolbar.elSelection : e.ctx.toolbar.elZoom,
                                            a = "selection" === t ? "selectionEnabled" : "zoomEnabled";
                                        (e.w.globals[a] = !e.w.globals[a]), i.classList.contains(e.ctx.toolbar.selectedClass) ? i.classList.remove(e.ctx.toolbar.selectedClass) : i.classList.add(e.ctx.toolbar.selectedClass);
                                    });
                                },
                            },
                            {
                                key: "getToolbarIconsReference",
                                value: function () {
                                    var t = this.w;
                                    this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")),
                                        this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")),
                                        this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
                                },
                            },
                            {
                                key: "enableZoomPanFromToolbar",
                                value: function (t) {
                                    this.toggleOtherControls(), "pan" === t ? (this.w.globals.panEnabled = !0) : (this.w.globals.zoomEnabled = !0);
                                    var e = "pan" === t ? this.elPan : this.elZoom,
                                        i = "pan" === t ? this.elZoom : this.elPan;
                                    e && e.classList.add(this.selectedClass), i && i.classList.remove(this.selectedClass);
                                },
                            },
                            {
                                key: "togglePanning",
                                value: function () {
                                    this.ctx.getSyncedCharts().forEach(function (t) {
                                        t.ctx.toolbar.toggleOtherControls(),
                                            (t.w.globals.panEnabled = !t.w.globals.panEnabled),
                                            t.ctx.toolbar.elPan.classList.contains(t.ctx.toolbar.selectedClass)
                                                ? t.ctx.toolbar.elPan.classList.remove(t.ctx.toolbar.selectedClass)
                                                : t.ctx.toolbar.elPan.classList.add(t.ctx.toolbar.selectedClass);
                                    });
                                },
                            },
                            {
                                key: "toggleOtherControls",
                                value: function () {
                                    var t = this,
                                        e = this.w;
                                    (e.globals.panEnabled = !1),
                                        (e.globals.zoomEnabled = !1),
                                        (e.globals.selectionEnabled = !1),
                                        this.getToolbarIconsReference(),
                                        [this.elPan, this.elSelection, this.elZoom].forEach(function (i) {
                                            i && i.classList.remove(t.selectedClass);
                                        });
                                },
                            },
                            {
                                key: "handleZoomIn",
                                value: function () {
                                    var t = this.w;
                                    t.globals.isRangeBar && ((this.minX = t.globals.minY), (this.maxX = t.globals.maxY));
                                    var e = (this.minX + this.maxX) / 2,
                                        s = this._getNewMinXMaxX((this.minX + e) / 2, (this.maxX + e) / 2);
                                    t.globals.disableZoomIn || this.zoomUpdateOptions(s.minX, s.maxX);
                                },
                            },
                            {
                                key: "handleZoomOut",
                                value: function () {
                                    var t = this.w;
                                    if ((t.globals.isRangeBar && ((this.minX = t.globals.minY), (this.maxX = t.globals.maxY)), !("datetime" === t.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3))) {
                                        var e = (this.minX + this.maxX) / 2,
                                            s = this._getNewMinXMaxX(this.minX - (e - this.minX), this.maxX - (e - this.maxX));
                                        t.globals.disableZoomOut || this.zoomUpdateOptions(s.minX, s.maxX);
                                    }
                                },
                            },
                            {
                                key: "_getNewMinXMaxX",
                                value: function (t, e) {
                                    var i = this.w.config.xaxis.convertedCatToNumeric;
                                    return { minX: i ? Math.floor(t) : t, maxX: i ? Math.floor(e) : e };
                                },
                            },
                            {
                                key: "zoomUpdateOptions",
                                value: function (t, e) {
                                    var i = this.w;
                                    if (void 0 !== t || void 0 !== e) {
                                        if (!(i.config.xaxis.convertedCatToNumeric && (t < 1 && ((t = 1), (e = i.globals.dataPoints)), e - t < 2))) {
                                            var a = { min: t, max: e },
                                                s = this.getBeforeZoomRange(a);
                                            s && (a = s.xaxis);
                                            var n = { xaxis: a },
                                                o = z.clone(i.globals.initialConfig.yaxis);
                                            i.config.chart.zoom.autoScaleYaxis && (o = new Lt(this.ctx).autoScaleY(this.ctx, o, { xaxis: a })),
                                                i.config.chart.group || (n.yaxis = o),
                                                (this.w.globals.zoomed = !0),
                                                this.ctx.updateHelpers._updateOptions(n, !1, this.w.config.chart.animations.dynamicAnimation.enabled),
                                                this.zoomCallback(a, o);
                                        }
                                    } else this.handleZoomReset();
                                },
                            },
                            {
                                key: "zoomCallback",
                                value: function (t, e) {
                                    "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, { xaxis: t, yaxis: e });
                                },
                            },
                            {
                                key: "getBeforeZoomRange",
                                value: function (t, e) {
                                    var i = null;
                                    return "function" == typeof this.ev.beforeZoom && (i = this.ev.beforeZoom(this, { xaxis: t, yaxis: e })), i;
                                },
                            },
                            {
                                key: "toggleMenu",
                                value: function () {
                                    var t = this;
                                    window.setTimeout(function () {
                                        t.elMenu.classList.contains("apexcharts-menu-open") ? t.elMenu.classList.remove("apexcharts-menu-open") : t.elMenu.classList.add("apexcharts-menu-open");
                                    }, 0);
                                },
                            },
                            {
                                key: "handleDownload",
                                value: function (t) {
                                    var e = this.w,
                                        i = new Rt(this.ctx);
                                    switch (t) {
                                        case "svg":
                                            i.exportToSVG(this.ctx);
                                            break;
                                        case "png":
                                            i.exportToPng(this.ctx);
                                            break;
                                        case "csv":
                                            i.exportToCSV({ series: e.config.series, columnDelimiter: e.config.chart.toolbar.export.csv.columnDelimiter });
                                    }
                                },
                            },
                            {
                                key: "handleZoomReset",
                                value: function (t) {
                                    this.ctx.getSyncedCharts().forEach(function (e) {
                                        var i = e.w;
                                        if (((i.globals.lastXAxis.min = void 0), (i.globals.lastXAxis.max = void 0), e.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof i.config.chart.events.beforeResetZoom)) {
                                            var a = i.config.chart.events.beforeResetZoom(e, i);
                                            a && e.updateHelpers.revertDefaultAxisMinMax(a);
                                        }
                                        "function" == typeof i.config.chart.events.zoomed && e.ctx.toolbar.zoomCallback({ min: i.config.xaxis.min, max: i.config.xaxis.max }), (i.globals.zoomed = !1);
                                        var s = e.ctx.series.emptyCollapsedSeries(z.clone(i.globals.initialSeries));
                                        e.updateHelpers._updateSeries(s, i.config.chart.animations.dynamicAnimation.enabled);
                                    });
                                },
                            },
                            {
                                key: "destroy",
                                value: function () {
                                    (this.elZoom = null), (this.elZoomIn = null), (this.elZoomOut = null), (this.elPan = null), (this.elSelection = null), (this.elZoomReset = null), (this.elMenuIcon = null);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Ce = (function (A) {
                    st(e, ee);
                    var t = V(e);
                    function e(i) {
                        var a;
                        return (
                            B(this, e),
                            ((a = t.call(this, i)).ctx = i),
                            (a.w = i.w),
                            (a.dragged = !1),
                            (a.graphics = new E(a.ctx)),
                            (a.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"]),
                            (a.clientX = 0),
                            (a.clientY = 0),
                            (a.startX = 0),
                            (a.endX = 0),
                            (a.dragX = 0),
                            (a.startY = 0),
                            (a.endY = 0),
                            (a.dragY = 0),
                            (a.moveDirection = "none"),
                            a
                        );
                    }
                    return (
                        m(e, [
                            {
                                key: "init",
                                value: function (i) {
                                    var a = this,
                                        s = i.xyRatios,
                                        n = this.w,
                                        o = this;
                                    (this.xyRatios = s),
                                        (this.zoomRect = this.graphics.drawRect(0, 0, 0, 0)),
                                        (this.selectionRect = this.graphics.drawRect(0, 0, 0, 0)),
                                        (this.gridRect = n.globals.dom.baseEl.querySelector(".apexcharts-grid")),
                                        this.zoomRect.node.classList.add("apexcharts-zoom-rect"),
                                        this.selectionRect.node.classList.add("apexcharts-selection-rect"),
                                        n.globals.dom.elGraphical.add(this.zoomRect),
                                        n.globals.dom.elGraphical.add(this.selectionRect),
                                        (this.slDraggableRect =
                                            "x" === n.config.chart.selection.type
                                                ? this.selectionRect.draggable({ minX: 0, minY: 0, maxX: n.globals.gridWidth, maxY: n.globals.gridHeight }).on("dragmove", this.selectionDragging.bind(this, "dragging"))
                                                : "y" === n.config.chart.selection.type
                                                ? this.selectionRect.draggable({ minX: 0, maxX: n.globals.gridWidth }).on("dragmove", this.selectionDragging.bind(this, "dragging"))
                                                : this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging"))),
                                        this.preselectedSelection(),
                                        (this.hoverArea = n.globals.dom.baseEl.querySelector("".concat(n.globals.chartClass, " .apexcharts-svg"))),
                                        this.hoverArea.classList.add("apexcharts-zoomable"),
                                        this.eventList.forEach(function (r) {
                                            a.hoverArea.addEventListener(r, o.svgMouseEvents.bind(o, s), { capture: !1, passive: !0 });
                                        });
                                },
                            },
                            {
                                key: "destroy",
                                value: function () {
                                    this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), (this.selectionRect = null), (this.zoomRect = null), (this.gridRect = null);
                                },
                            },
                            {
                                key: "svgMouseEvents",
                                value: function (i, a) {
                                    var s = this.w,
                                        n = this,
                                        o = this.ctx.toolbar,
                                        r = s.globals.zoomEnabled ? s.config.chart.zoom.type : s.config.chart.selection.type,
                                        d = s.config.chart.toolbar.autoSelected;
                                    if (
                                        (a.shiftKey ? ((this.shiftWasPressed = !0), o.enableZoomPanFromToolbar("pan" === d ? "zoom" : "pan")) : this.shiftWasPressed && (o.enableZoomPanFromToolbar(d), (this.shiftWasPressed = !1)), a.target)
                                    ) {
                                        var c,
                                            g = a.target.classList;
                                        if (
                                            (a.target.parentNode && null !== a.target.parentNode && (c = a.target.parentNode.classList),
                                            !(g.contains("apexcharts-selection-rect") || g.contains("apexcharts-legend-marker") || g.contains("apexcharts-legend-text") || (c && c.contains("apexcharts-toolbar"))))
                                        ) {
                                            if (
                                                ((n.clientX = "touchmove" === a.type || "touchstart" === a.type ? a.touches[0].clientX : "touchend" === a.type ? a.changedTouches[0].clientX : a.clientX),
                                                (n.clientY = "touchmove" === a.type || "touchstart" === a.type ? a.touches[0].clientY : "touchend" === a.type ? a.changedTouches[0].clientY : a.clientY),
                                                "mousedown" === a.type && 1 === a.which)
                                            ) {
                                                var u = n.gridRect.getBoundingClientRect();
                                                (n.startX = n.clientX - u.left), (n.startY = n.clientY - u.top), (n.dragged = !1), (n.w.globals.mousedown = !0);
                                            }
                                            if (
                                                ((("mousemove" === a.type && 1 === a.which) || "touchmove" === a.type) &&
                                                    ((n.dragged = !0),
                                                    s.globals.panEnabled
                                                        ? ((s.globals.selection = null), n.w.globals.mousedown && n.panDragging({ context: n, zoomtype: r, xyRatios: i }))
                                                        : ((n.w.globals.mousedown && s.globals.zoomEnabled) || (n.w.globals.mousedown && s.globals.selectionEnabled)) && (n.selection = n.selectionDrawing({ context: n, zoomtype: r }))),
                                                "mouseup" === a.type || "touchend" === a.type || "mouseleave" === a.type)
                                            ) {
                                                var p = n.gridRect.getBoundingClientRect();
                                                n.w.globals.mousedown &&
                                                    ((n.endX = n.clientX - p.left),
                                                    (n.endY = n.clientY - p.top),
                                                    (n.dragX = Math.abs(n.endX - n.startX)),
                                                    (n.dragY = Math.abs(n.endY - n.startY)),
                                                    (s.globals.zoomEnabled || s.globals.selectionEnabled) && n.selectionDrawn({ context: n, zoomtype: r }),
                                                    s.globals.panEnabled && s.config.xaxis.convertedCatToNumeric && n.delayedPanScrolled()),
                                                    s.globals.zoomEnabled && n.hideSelectionRect(this.selectionRect),
                                                    (n.dragged = !1),
                                                    (n.w.globals.mousedown = !1);
                                            }
                                            this.makeSelectionRectDraggable();
                                        }
                                    }
                                },
                            },
                            {
                                key: "makeSelectionRectDraggable",
                                value: function () {
                                    var i = this.w;
                                    if (this.selectionRect) {
                                        var a = this.selectionRect.node.getBoundingClientRect();
                                        a.width > 0 &&
                                            a.height > 0 &&
                                            this.slDraggableRect
                                                .selectize({ points: "l, r", pointSize: 8, pointType: "rect" })
                                                .resize({ constraint: { minX: 0, minY: 0, maxX: i.globals.gridWidth, maxY: i.globals.gridHeight } })
                                                .on("resizing", this.selectionDragging.bind(this, "resizing"));
                                    }
                                },
                            },
                            {
                                key: "preselectedSelection",
                                value: function () {
                                    var i = this.w,
                                        a = this.xyRatios;
                                    if (!i.globals.zoomEnabled)
                                        if (null != i.globals.selection) this.drawSelectionRect(i.globals.selection);
                                        else if (void 0 !== i.config.chart.selection.xaxis.min && void 0 !== i.config.chart.selection.xaxis.max) {
                                            var s = (i.config.chart.selection.xaxis.min - i.globals.minX) / a.xRatio;
                                            this.drawSelectionRect({
                                                x: s,
                                                y: 0,
                                                width: i.globals.gridWidth - (i.globals.maxX - i.config.chart.selection.xaxis.max) / a.xRatio - s,
                                                height: i.globals.gridHeight,
                                                translateX: 0,
                                                translateY: 0,
                                                selectionEnabled: !0,
                                            }),
                                                this.makeSelectionRectDraggable(),
                                                "function" == typeof i.config.chart.events.selection &&
                                                    i.config.chart.events.selection(this.ctx, { xaxis: { min: i.config.chart.selection.xaxis.min, max: i.config.chart.selection.xaxis.max }, yaxis: {} });
                                        }
                                },
                            },
                            {
                                key: "drawSelectionRect",
                                value: function (i) {
                                    var a = i.x,
                                        s = i.y,
                                        n = i.width,
                                        o = i.height,
                                        r = i.translateX,
                                        c = i.translateY,
                                        u = this.w,
                                        p = this.zoomRect,
                                        x = this.selectionRect;
                                    if (this.dragged || null !== u.globals.selection) {
                                        var y = { transform: "translate(" + (void 0 === r ? 0 : r) + ", " + (void 0 === c ? 0 : c) + ")" };
                                        u.globals.zoomEnabled &&
                                            this.dragged &&
                                            (n < 0 && (n = 1),
                                            p.attr({
                                                x: a,
                                                y: s,
                                                width: n,
                                                height: o,
                                                fill: u.config.chart.zoom.zoomedArea.fill.color,
                                                "fill-opacity": u.config.chart.zoom.zoomedArea.fill.opacity,
                                                stroke: u.config.chart.zoom.zoomedArea.stroke.color,
                                                "stroke-width": u.config.chart.zoom.zoomedArea.stroke.width,
                                                "stroke-opacity": u.config.chart.zoom.zoomedArea.stroke.opacity,
                                            }),
                                            E.setAttrs(p.node, y)),
                                            u.globals.selectionEnabled &&
                                                (x.attr({
                                                    x: a,
                                                    y: s,
                                                    width: n > 0 ? n : 0,
                                                    height: o > 0 ? o : 0,
                                                    fill: u.config.chart.selection.fill.color,
                                                    "fill-opacity": u.config.chart.selection.fill.opacity,
                                                    stroke: u.config.chart.selection.stroke.color,
                                                    "stroke-width": u.config.chart.selection.stroke.width,
                                                    "stroke-dasharray": u.config.chart.selection.stroke.dashArray,
                                                    "stroke-opacity": u.config.chart.selection.stroke.opacity,
                                                }),
                                                E.setAttrs(x.node, y));
                                    }
                                },
                            },
                            {
                                key: "hideSelectionRect",
                                value: function (i) {
                                    i && i.attr({ x: 0, y: 0, width: 0, height: 0 });
                                },
                            },
                            {
                                key: "selectionDrawing",
                                value: function (i) {
                                    var y,
                                        s = i.zoomtype,
                                        n = this.w,
                                        o = i.context,
                                        r = this.gridRect.getBoundingClientRect(),
                                        d = o.startX - 1,
                                        c = o.startY,
                                        g = !1,
                                        u = !1,
                                        p = o.clientX - r.left - d,
                                        x = o.clientY - r.top - c;
                                    return (
                                        Math.abs(p + d) > n.globals.gridWidth ? (p = n.globals.gridWidth - d) : o.clientX - r.left < 0 && (p = d),
                                        d > o.clientX - r.left && ((g = !0), (p = Math.abs(p))),
                                        c > o.clientY - r.top && ((u = !0), (x = Math.abs(x))),
                                        o.drawSelectionRect(
                                            (y =
                                                "x" === s
                                                    ? { x: g ? d - p : d, y: 0, width: p, height: n.globals.gridHeight }
                                                    : "y" === s
                                                    ? { x: 0, y: u ? c - x : c, width: n.globals.gridWidth, height: x }
                                                    : { x: g ? d - p : d, y: u ? c - x : c, width: p, height: x })
                                        ),
                                        o.selectionDragging("resizing"),
                                        y
                                    );
                                },
                            },
                            {
                                key: "selectionDragging",
                                value: function (i, a) {
                                    var s = this,
                                        n = this.w,
                                        o = this.xyRatios,
                                        r = this.selectionRect,
                                        d = 0;
                                    "resizing" === i && (d = 30);
                                    var c = function (u) {
                                            return parseFloat(r.node.getAttribute(u));
                                        },
                                        g = { x: c("x"), y: c("y"), width: c("width"), height: c("height") };
                                    (n.globals.selection = g),
                                        "function" == typeof n.config.chart.events.selection &&
                                            n.globals.selectionEnabled &&
                                            (clearTimeout(this.w.globals.selectionResizeTimer),
                                            (this.w.globals.selectionResizeTimer = window.setTimeout(function () {
                                                var u = s.gridRect.getBoundingClientRect(),
                                                    p = r.node.getBoundingClientRect(),
                                                    x = {
                                                        xaxis: { min: n.globals.xAxisScale.niceMin + (p.left - u.left) * o.xRatio, max: n.globals.xAxisScale.niceMin + (p.right - u.left) * o.xRatio },
                                                        yaxis: { min: n.globals.yAxisScale[0].niceMin + (u.bottom - p.bottom) * o.yRatio[0], max: n.globals.yAxisScale[0].niceMax - (p.top - u.top) * o.yRatio[0] },
                                                    };
                                                n.config.chart.events.selection(s.ctx, x), n.config.chart.brush.enabled && void 0 !== n.config.chart.events.brushScrolled && n.config.chart.events.brushScrolled(s.ctx, x);
                                            }, d)));
                                },
                            },
                            {
                                key: "selectionDrawn",
                                value: function (i) {
                                    var s = i.zoomtype,
                                        n = this.w,
                                        o = i.context,
                                        r = this.xyRatios,
                                        d = this.ctx.toolbar;
                                    if (o.startX > o.endX) {
                                        var c = o.startX;
                                        (o.startX = o.endX), (o.endX = c);
                                    }
                                    if (o.startY > o.endY) {
                                        var g = o.startY;
                                        (o.startY = o.endY), (o.endY = g);
                                    }
                                    var u = void 0,
                                        p = void 0;
                                    n.globals.isRangeBar
                                        ? ((u = n.globals.yAxisScale[0].niceMin + o.startX * r.invertedYRatio), (p = n.globals.yAxisScale[0].niceMin + o.endX * r.invertedYRatio))
                                        : ((u = n.globals.xAxisScale.niceMin + o.startX * r.xRatio), (p = n.globals.xAxisScale.niceMin + o.endX * r.xRatio));
                                    var x = [],
                                        y = [];
                                    if (
                                        (n.config.yaxis.forEach(function (M, L) {
                                            x.push(n.globals.yAxisScale[L].niceMax - r.yRatio[L] * o.startY), y.push(n.globals.yAxisScale[L].niceMax - r.yRatio[L] * o.endY);
                                        }),
                                        o.dragged && (o.dragX > 10 || o.dragY > 10) && u !== p)
                                    )
                                        if (n.globals.zoomEnabled) {
                                            var C = z.clone(n.globals.initialConfig.yaxis),
                                                w = z.clone(n.globals.initialConfig.xaxis);
                                            if (
                                                ((n.globals.zoomed = !0),
                                                n.config.xaxis.convertedCatToNumeric && ((u = Math.floor(u)), (p = Math.floor(p)), u < 1 && ((u = 1), (p = n.globals.dataPoints)), p - u < 2 && (p = u + 1)),
                                                ("xy" !== s && "x" !== s) || (w = { min: u, max: p }),
                                                ("xy" !== s && "y" !== s) ||
                                                    C.forEach(function (M, L) {
                                                        (C[L].min = y[L]), (C[L].max = x[L]);
                                                    }),
                                                n.config.chart.zoom.autoScaleYaxis)
                                            ) {
                                                var P = new Lt(o.ctx);
                                                C = P.autoScaleY(o.ctx, C, { xaxis: w });
                                            }
                                            if (d) {
                                                var l = d.getBeforeZoomRange(w, C);
                                                l && ((w = l.xaxis ? l.xaxis : w), (C = l.yaxis ? l.yaxis : C));
                                            }
                                            var f = { xaxis: w };
                                            n.config.chart.group || (f.yaxis = C),
                                                o.ctx.updateHelpers._updateOptions(f, !1, o.w.config.chart.animations.dynamicAnimation.enabled),
                                                "function" == typeof n.config.chart.events.zoomed && d.zoomCallback(w, C);
                                        } else if (n.globals.selectionEnabled) {
                                            var v,
                                                S = null;
                                            (v = { min: u, max: p }),
                                                ("xy" !== s && "y" !== s) ||
                                                    (S = z.clone(n.config.yaxis)).forEach(function (M, L) {
                                                        (S[L].min = y[L]), (S[L].max = x[L]);
                                                    }),
                                                (n.globals.selection = o.selection),
                                                "function" == typeof n.config.chart.events.selection && n.config.chart.events.selection(o.ctx, { xaxis: v, yaxis: S });
                                        }
                                },
                            },
                            {
                                key: "panDragging",
                                value: function (i) {
                                    var s = this.w,
                                        n = i.context;
                                    if (void 0 !== s.globals.lastClientPosition.x) {
                                        var o = s.globals.lastClientPosition.x - n.clientX,
                                            r = s.globals.lastClientPosition.y - n.clientY;
                                        Math.abs(o) > Math.abs(r) && o > 0
                                            ? (this.moveDirection = "left")
                                            : Math.abs(o) > Math.abs(r) && o < 0
                                            ? (this.moveDirection = "right")
                                            : Math.abs(r) > Math.abs(o) && r > 0
                                            ? (this.moveDirection = "up")
                                            : Math.abs(r) > Math.abs(o) && r < 0 && (this.moveDirection = "down");
                                    }
                                    (s.globals.lastClientPosition = { x: n.clientX, y: n.clientY }),
                                        s.config.xaxis.convertedCatToNumeric || n.panScrolled(s.globals.isRangeBar ? s.globals.minY : s.globals.minX, s.globals.isRangeBar ? s.globals.maxY : s.globals.maxX);
                                },
                            },
                            {
                                key: "delayedPanScrolled",
                                value: function () {
                                    var i = this.w,
                                        a = i.globals.minX,
                                        s = i.globals.maxX,
                                        n = (i.globals.maxX - i.globals.minX) / 2;
                                    "left" === this.moveDirection ? ((a = i.globals.minX + n), (s = i.globals.maxX + n)) : "right" === this.moveDirection && ((a = i.globals.minX - n), (s = i.globals.maxX - n)),
                                        (a = Math.floor(a)),
                                        (s = Math.floor(s)),
                                        this.updateScrolledChart({ xaxis: { min: a, max: s } }, a, s);
                                },
                            },
                            {
                                key: "panScrolled",
                                value: function (i, a) {
                                    var s = this.w,
                                        n = this.xyRatios,
                                        o = z.clone(s.globals.initialConfig.yaxis),
                                        r = n.xRatio,
                                        d = s.globals.minX,
                                        c = s.globals.maxX;
                                    s.globals.isRangeBar && ((r = n.invertedYRatio), (d = s.globals.minY), (c = s.globals.maxY)),
                                        "left" === this.moveDirection
                                            ? ((i = d + (s.globals.gridWidth / 15) * r), (a = c + (s.globals.gridWidth / 15) * r))
                                            : "right" === this.moveDirection && ((i = d - (s.globals.gridWidth / 15) * r), (a = c - (s.globals.gridWidth / 15) * r)),
                                        s.globals.isRangeBar || ((i < s.globals.initialMinX || a > s.globals.initialMaxX) && ((i = d), (a = c)));
                                    var g = { min: i, max: a };
                                    s.config.chart.zoom.autoScaleYaxis && (o = new Lt(this.ctx).autoScaleY(this.ctx, o, { xaxis: g }));
                                    var u = { xaxis: { min: i, max: a } };
                                    s.config.chart.group || (u.yaxis = o), this.updateScrolledChart(u, i, a);
                                },
                            },
                            {
                                key: "updateScrolledChart",
                                value: function (i, a, s) {
                                    var n = this.w;
                                    this.ctx.updateHelpers._updateOptions(i, !1, !1), "function" == typeof n.config.chart.events.scrolled && n.config.chart.events.scrolled(this.ctx, { xaxis: { min: a, max: s } });
                                },
                            },
                        ]),
                        e
                    );
                })(),
                ie = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.ttCtx = t), (this.ctx = t.ctx);
                    }
                    return (
                        m(A, [
                            {
                                key: "getNearestValues",
                                value: function (t) {
                                    var e = t.hoverArea,
                                        a = t.clientX,
                                        s = t.clientY,
                                        n = this.w,
                                        o = t.elGrid.getBoundingClientRect(),
                                        r = o.width,
                                        d = o.height,
                                        c = r / (n.globals.dataPoints - 1),
                                        g = d / n.globals.dataPoints,
                                        u = this.hasBars();
                                    (!n.globals.comboCharts && !u) || n.config.xaxis.convertedCatToNumeric || (c = r / n.globals.dataPoints);
                                    var p = a - o.left - n.globals.barPadForNumericAxis,
                                        x = s - o.top;
                                    p < 0 || x < 0 || p > r || x > d
                                        ? (e.classList.remove("hovering-zoom"), e.classList.remove("hovering-pan"))
                                        : n.globals.zoomEnabled
                                        ? (e.classList.remove("hovering-pan"), e.classList.add("hovering-zoom"))
                                        : n.globals.panEnabled && (e.classList.remove("hovering-zoom"), e.classList.add("hovering-pan"));
                                    var y = Math.round(p / c),
                                        C = Math.floor(x / g);
                                    u && !n.config.xaxis.convertedCatToNumeric && ((y = Math.ceil(p / c)), (y -= 1));
                                    var w = null,
                                        P = null,
                                        l = [],
                                        f = [];
                                    if (
                                        (n.globals.seriesXvalues.forEach(function (L) {
                                            l.push([L[0] + 1e-6].concat(L));
                                        }),
                                        n.globals.seriesYvalues.forEach(function (L) {
                                            f.push([L[0] + 1e-6].concat(L));
                                        }),
                                        (l = l.map(function (L) {
                                            return L.filter(function (k) {
                                                return z.isNumber(k);
                                            });
                                        })),
                                        (f = f.map(function (L) {
                                            return L.filter(function (k) {
                                                return z.isNumber(k);
                                            });
                                        })),
                                        n.globals.isXNumeric)
                                    ) {
                                        var v = this.ttCtx.getElGrid().getBoundingClientRect(),
                                            S = p * (v.width / r);
                                        (w = (P = this.closestInMultiArray(S, x * (v.height / d), l, f)).index), (y = P.j), null !== w && (y = (P = this.closestInArray(S, (l = n.globals.seriesXvalues[w]))).index);
                                    }
                                    return (
                                        (n.globals.capturedSeriesIndex = null === w ? -1 : w),
                                        (!y || y < 1) && (y = 0),
                                        (n.globals.capturedDataPointIndex = n.globals.isBarHorizontal ? C : y),
                                        { capturedSeries: w, j: n.globals.isBarHorizontal ? C : y, hoverX: p, hoverY: x }
                                    );
                                },
                            },
                            {
                                key: "closestInMultiArray",
                                value: function (t, e, i, a) {
                                    var n = 0,
                                        o = null,
                                        r = -1;
                                    this.w.globals.series.length > 1 ? (n = this.getFirstActiveXArray(i)) : (o = 0);
                                    var c = Math.abs(t - i[n][0]);
                                    if (
                                        (i.forEach(function (p) {
                                            p.forEach(function (x, y) {
                                                var C = Math.abs(t - x);
                                                C < c && ((c = C), (r = y));
                                            });
                                        }),
                                        -1 !== r)
                                    ) {
                                        var u = Math.abs(e - a[n][r]);
                                        (o = n),
                                            a.forEach(function (p, x) {
                                                var y = Math.abs(e - p[r]);
                                                y < u && ((u = y), (o = x));
                                            });
                                    }
                                    return { index: o, j: r };
                                },
                            },
                            {
                                key: "getFirstActiveXArray",
                                value: function (t) {
                                    for (
                                        var e = this.w,
                                            i = 0,
                                            a = t.map(function (n, o) {
                                                return n.length > 0 ? o : -1;
                                            }),
                                            s = 0;
                                        s < a.length;
                                        s++
                                    )
                                        if (-1 !== a[s] && -1 === e.globals.collapsedSeriesIndices.indexOf(s) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(s)) {
                                            i = a[s];
                                            break;
                                        }
                                    return i;
                                },
                            },
                            {
                                key: "closestInArray",
                                value: function (t, e) {
                                    for (var a = null, s = Math.abs(t - e[0]), n = 0; n < e.length; n++) {
                                        var o = Math.abs(t - e[n]);
                                        o < s && ((s = o), (a = n));
                                    }
                                    return { index: a };
                                },
                            },
                            {
                                key: "isXoverlap",
                                value: function (t) {
                                    var e = [],
                                        i = this.w.globals.seriesX.filter(function (s) {
                                            return void 0 !== s[0];
                                        });
                                    if (i.length > 0) for (var a = 0; a < i.length - 1; a++) void 0 !== i[a][t] && void 0 !== i[a + 1][t] && i[a][t] !== i[a + 1][t] && e.push("unEqual");
                                    return 0 === e.length;
                                },
                            },
                            {
                                key: "isInitialSeriesSameLen",
                                value: function () {
                                    for (var t = !0, e = this.w.globals.initialSeries, i = 0; i < e.length - 1; i++)
                                        if (e[i].data.length !== e[i + 1].data.length) {
                                            t = !1;
                                            break;
                                        }
                                    return t;
                                },
                            },
                            {
                                key: "getBarsHeight",
                                value: function (t) {
                                    return G(t).reduce(function (e, i) {
                                        return e + i.getBBox().height;
                                    }, 0);
                                },
                            },
                            {
                                key: "getElMarkers",
                                value: function (t) {
                                    return this.w.globals.dom.baseEl.querySelectorAll(
                                        "number" == typeof t ? ".apexcharts-series[data\\:realIndex='".concat(t, "'] .apexcharts-series-markers-wrap > *") : ".apexcharts-series-markers-wrap > *"
                                    );
                                },
                            },
                            {
                                key: "getAllMarkers",
                                value: function () {
                                    var t = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
                                    (t = G(t)).sort(function (i, a) {
                                        var s = Number(i.getAttribute("data:realIndex")),
                                            n = Number(a.getAttribute("data:realIndex"));
                                        return n < s ? 1 : n > s ? -1 : 0;
                                    });
                                    var e = [];
                                    return (
                                        t.forEach(function (i) {
                                            e.push(i.querySelector(".apexcharts-marker"));
                                        }),
                                        e
                                    );
                                },
                            },
                            {
                                key: "hasMarkers",
                                value: function (t) {
                                    return this.getElMarkers(t).length > 0;
                                },
                            },
                            {
                                key: "getElBars",
                                value: function () {
                                    return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
                                },
                            },
                            {
                                key: "hasBars",
                                value: function () {
                                    return this.getElBars().length > 0;
                                },
                            },
                            {
                                key: "getHoverMarkerSize",
                                value: function (t) {
                                    var e = this.w,
                                        i = e.config.markers.hover.size;
                                    return void 0 === i && (i = e.globals.markers.size[t] + e.config.markers.hover.sizeOffset), i;
                                },
                            },
                            {
                                key: "toggleAllTooltipSeriesGroups",
                                value: function (t) {
                                    var e = this.w,
                                        i = this.ttCtx;
                                    0 === i.allTooltipSeriesGroups.length && (i.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
                                    for (var a = i.allTooltipSeriesGroups, s = 0; s < a.length; s++)
                                        "enable" === t ? (a[s].classList.add("apexcharts-active"), (a[s].style.display = e.config.tooltip.items.display)) : (a[s].classList.remove("apexcharts-active"), (a[s].style.display = "none"));
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Ae = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.ctx = t.ctx), (this.ttCtx = t), (this.tooltipUtil = new ie(t));
                    }
                    return (
                        m(A, [
                            {
                                key: "drawSeriesTexts",
                                value: function (t) {
                                    var e = t.shared,
                                        i = void 0 === e || e,
                                        a = t.ttItems,
                                        s = t.i,
                                        n = void 0 === s ? 0 : s,
                                        o = t.j,
                                        r = void 0 === o ? null : o,
                                        g = t.e,
                                        u = this.w;
                                    void 0 !== u.config.tooltip.custom ? this.handleCustomTooltip({ i: n, j: r, y1: t.y1, y2: t.y2, w: u }) : this.toggleActiveInactiveSeries(i);
                                    var p = this.getValuesToPrint({ i: n, j: r });
                                    this.printLabels({ i: n, j: r, values: p, ttItems: a, shared: i, e: g });
                                    var x = this.ttCtx.getElTooltip();
                                    (this.ttCtx.tooltipRect.ttWidth = x.getBoundingClientRect().width), (this.ttCtx.tooltipRect.ttHeight = x.getBoundingClientRect().height);
                                },
                            },
                            {
                                key: "printLabels",
                                value: function (t) {
                                    var e,
                                        i = this,
                                        a = t.i,
                                        s = t.j,
                                        n = t.values,
                                        o = t.ttItems,
                                        r = t.shared,
                                        d = t.e,
                                        c = this.w,
                                        g = [],
                                        u = function (v) {
                                            return c.globals.seriesGoals[v] && c.globals.seriesGoals[v][s] && Array.isArray(c.globals.seriesGoals[v][s]);
                                        },
                                        p = n.xVal,
                                        x = n.zVal,
                                        y = n.xAxisTTVal,
                                        C = "",
                                        w = c.globals.colors[a];
                                    null !== s && c.config.plotOptions.bar.distributed && (w = c.globals.colors[s]);
                                    for (
                                        var P = function (v, S) {
                                                var M = i.getFormatters(a);
                                                (C = i.getSeriesName({ fn: M.yLbTitleFormatter, index: a, seriesIndex: a, j: s })),
                                                    "treemap" === c.config.chart.type && (C = M.yLbTitleFormatter(String(c.config.series[a].data[s].x), { series: c.globals.series, seriesIndex: a, dataPointIndex: s, w: c }));
                                                var L = c.config.tooltip.inverseOrder ? S : v;
                                                if (c.globals.axisCharts) {
                                                    var k = function (D) {
                                                        var O, N, Q, tt;
                                                        return c.globals.isRangeData
                                                            ? M.yLbFormatter(null === (O = c.globals.seriesRangeStart) || void 0 === O || null === (N = O[D]) || void 0 === N ? void 0 : N[s], {
                                                                  series: c.globals.seriesRangeStart,
                                                                  seriesIndex: D,
                                                                  dataPointIndex: s,
                                                                  w: c,
                                                              }) +
                                                                  " - " +
                                                                  M.yLbFormatter(null === (Q = c.globals.seriesRangeEnd) || void 0 === Q || null === (tt = Q[D]) || void 0 === tt ? void 0 : tt[s], {
                                                                      series: c.globals.seriesRangeEnd,
                                                                      seriesIndex: D,
                                                                      dataPointIndex: s,
                                                                      w: c,
                                                                  })
                                                            : M.yLbFormatter(c.globals.series[D][s], { series: c.globals.series, seriesIndex: D, dataPointIndex: s, w: c });
                                                    };
                                                    if (r)
                                                        (M = i.getFormatters(L)),
                                                            (C = i.getSeriesName({ fn: M.yLbTitleFormatter, index: L, seriesIndex: a, j: s })),
                                                            (w = c.globals.colors[L]),
                                                            (e = k(L)),
                                                            u(L) &&
                                                                (g = c.globals.seriesGoals[L][s].map(function (D) {
                                                                    return { attrs: D, val: M.yLbFormatter(D.value, { seriesIndex: L, dataPointIndex: s, w: c }) };
                                                                }));
                                                    else {
                                                        var I,
                                                            Y = null == d || null === (I = d.target) || void 0 === I ? void 0 : I.getAttribute("fill");
                                                        Y && (w = -1 !== Y.indexOf("url") ? document.querySelector(Y.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke") : Y),
                                                            (e = k(a)),
                                                            u(a) &&
                                                                Array.isArray(c.globals.seriesGoals[a][s]) &&
                                                                (g = c.globals.seriesGoals[a][s].map(function (D) {
                                                                    return { attrs: D, val: M.yLbFormatter(D.value, { seriesIndex: a, dataPointIndex: s, w: c }) };
                                                                }));
                                                    }
                                                }
                                                null === s && (e = M.yLbFormatter(c.globals.series[a], F(F({}, c), {}, { seriesIndex: a, dataPointIndex: a }))),
                                                    i.DOMHandling({ i: a, t: L, j: s, ttItems: o, values: { val: e, goalVals: g, xVal: p, xAxisTTVal: y, zVal: x }, seriesName: C, shared: r, pColor: w });
                                            },
                                            l = 0,
                                            f = c.globals.series.length - 1;
                                        l < c.globals.series.length;
                                        l++, f--
                                    )
                                        P(l, f);
                                },
                            },
                            {
                                key: "getFormatters",
                                value: function (t) {
                                    var e,
                                        i = this.w,
                                        a = i.globals.yLabelFormatters[t];
                                    return (
                                        void 0 !== i.globals.ttVal
                                            ? Array.isArray(i.globals.ttVal)
                                                ? ((a = i.globals.ttVal[t] && i.globals.ttVal[t].formatter), (e = i.globals.ttVal[t] && i.globals.ttVal[t].title && i.globals.ttVal[t].title.formatter))
                                                : ((a = i.globals.ttVal.formatter), "function" == typeof i.globals.ttVal.title.formatter && (e = i.globals.ttVal.title.formatter))
                                            : (e = i.config.tooltip.y.title.formatter),
                                        "function" != typeof a &&
                                            (a = i.globals.yLabelFormatters[0]
                                                ? i.globals.yLabelFormatters[0]
                                                : function (s) {
                                                      return s;
                                                  }),
                                        "function" != typeof e &&
                                            (e = function (s) {
                                                return s;
                                            }),
                                        { yLbFormatter: a, yLbTitleFormatter: e }
                                    );
                                },
                            },
                            {
                                key: "getSeriesName",
                                value: function (t) {
                                    var a = t.seriesIndex,
                                        s = t.j,
                                        n = this.w;
                                    return (0, t.fn)(String(n.globals.seriesNames[t.index]), { series: n.globals.series, seriesIndex: a, dataPointIndex: s, w: n });
                                },
                            },
                            {
                                key: "DOMHandling",
                                value: function (t) {
                                    var e = t.t,
                                        i = t.j,
                                        a = t.ttItems,
                                        s = t.values,
                                        n = t.seriesName,
                                        o = t.shared,
                                        r = t.pColor,
                                        d = this.w,
                                        c = this.ttCtx,
                                        g = s.val,
                                        u = s.goalVals,
                                        p = s.xVal,
                                        x = s.xAxisTTVal,
                                        y = s.zVal,
                                        C = null;
                                    (C = a[e].children),
                                        d.config.tooltip.fillSeriesColor && ((a[e].style.backgroundColor = r), (C[0].style.display = "none")),
                                        c.showTooltipTitle && (null === c.tooltipTitle && (c.tooltipTitle = d.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), (c.tooltipTitle.innerHTML = p)),
                                        c.isXAxisTooltipEnabled && (c.xaxisTooltipText.innerHTML = "" !== x ? x : p);
                                    var w = a[e].querySelector(".apexcharts-tooltip-text-y-label");
                                    w && (w.innerHTML = n || "");
                                    var P = a[e].querySelector(".apexcharts-tooltip-text-y-value");
                                    P && (P.innerHTML = void 0 !== g ? g : ""),
                                        C[0] &&
                                            C[0].classList.contains("apexcharts-tooltip-marker") &&
                                            (d.config.tooltip.marker.fillColors && Array.isArray(d.config.tooltip.marker.fillColors) && (r = d.config.tooltip.marker.fillColors[e]), (C[0].style.backgroundColor = r)),
                                        d.config.tooltip.marker.show || (C[0].style.display = "none");
                                    var l = a[e].querySelector(".apexcharts-tooltip-text-goals-label"),
                                        f = a[e].querySelector(".apexcharts-tooltip-text-goals-value");
                                    if (u.length && d.globals.seriesGoals[e]) {
                                        var v = function () {
                                            var S = "<div >",
                                                M = "<div>";
                                            u.forEach(function (L, k) {
                                                (S += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '
                                                    .concat(L.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ')
                                                    .concat(L.attrs.name, "</div>")),
                                                    (M += "<div>".concat(L.val, "</div>"));
                                            }),
                                                (l.innerHTML = S + "</div>"),
                                                (f.innerHTML = M + "</div>");
                                        };
                                        o ? (d.globals.seriesGoals[e][i] && Array.isArray(d.globals.seriesGoals[e][i]) ? v() : ((l.innerHTML = ""), (f.innerHTML = ""))) : v();
                                    } else (l.innerHTML = ""), (f.innerHTML = "");
                                    null !== y && ((a[e].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = d.config.tooltip.z.title), (a[e].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== y ? y : "")),
                                        o &&
                                            C[0] &&
                                            (C[0].parentNode.style.display =
                                                null == g || d.globals.ancillaryCollapsedSeriesIndices.indexOf(e) > -1 || d.globals.collapsedSeriesIndices.indexOf(e) > -1 ? "none" : d.config.tooltip.items.display);
                                },
                            },
                            {
                                key: "toggleActiveInactiveSeries",
                                value: function (t) {
                                    var e = this.w;
                                    if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
                                    else {
                                        this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
                                        var i = e.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
                                        i && (i.classList.add("apexcharts-active"), (i.style.display = e.config.tooltip.items.display));
                                    }
                                },
                            },
                            {
                                key: "getValuesToPrint",
                                value: function (t) {
                                    var e = t.i,
                                        i = t.j,
                                        a = this.w,
                                        s = this.ctx.series.filteredSeriesX(),
                                        n = "",
                                        o = "",
                                        r = null,
                                        d = null,
                                        c = { series: a.globals.series, seriesIndex: e, dataPointIndex: i, w: a },
                                        g = a.globals.ttZFormatter;
                                    null === i
                                        ? (d = a.globals.series[e])
                                        : a.globals.isXNumeric && "treemap" !== a.config.chart.type
                                        ? ((n = s[e][i]), 0 === s[e].length && (n = s[this.tooltipUtil.getFirstActiveXArray(s)][i]))
                                        : (n = void 0 !== a.globals.labels[i] ? a.globals.labels[i] : "");
                                    var u = n;
                                    return (
                                        (n =
                                            a.globals.isXNumeric && "datetime" === a.config.xaxis.type
                                                ? new At(this.ctx).xLabelFormat(a.globals.ttKeyFormatter, u, u, { i: void 0, dateFormatter: new gt(this.ctx).formatDate, w: this.w })
                                                : a.globals.isBarHorizontal
                                                ? a.globals.yLabelFormatters[0](u, c)
                                                : a.globals.xLabelFormatter(u, c)),
                                        void 0 !== a.config.tooltip.x.formatter && (n = a.globals.ttKeyFormatter(u, c)),
                                        a.globals.seriesZ.length > 0 && a.globals.seriesZ[e].length > 0 && (r = g(a.globals.seriesZ[e][i], a)),
                                        (o = "function" == typeof a.config.xaxis.tooltip.formatter ? a.globals.xaxisTooltipFormatter(u, c) : n),
                                        { val: Array.isArray(d) ? d.join(" ") : d, xVal: Array.isArray(n) ? n.join(" ") : n, xAxisTTVal: Array.isArray(o) ? o.join(" ") : o, zVal: r }
                                    );
                                },
                            },
                            {
                                key: "handleCustomTooltip",
                                value: function (t) {
                                    var e = t.i,
                                        i = t.j,
                                        a = t.y1,
                                        s = t.y2,
                                        n = t.w,
                                        o = this.ttCtx.getElTooltip(),
                                        r = n.config.tooltip.custom;
                                    Array.isArray(r) && r[e] && (r = r[e]), (o.innerHTML = r({ ctx: this.ctx, series: n.globals.series, seriesIndex: e, dataPointIndex: i, y1: a, y2: s, w: n }));
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ae = (function () {
                    function A(t) {
                        B(this, A), (this.ttCtx = t), (this.ctx = t.ctx), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "moveXCrosshairs",
                                value: function (t) {
                                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                        i = this.ttCtx,
                                        a = this.w,
                                        s = i.getElXCrosshairs(),
                                        n = t - i.xcrosshairsWidth / 2,
                                        o = a.globals.labels.slice().length;
                                    if (
                                        (null !== e && (n = (a.globals.gridWidth / o) * e),
                                        null === s || a.globals.isBarHorizontal || (s.setAttribute("x", n), s.setAttribute("x1", n), s.setAttribute("x2", n), s.setAttribute("y2", a.globals.gridHeight), s.classList.add("apexcharts-active")),
                                        n < 0 && (n = 0),
                                        n > a.globals.gridWidth && (n = a.globals.gridWidth),
                                        i.isXAxisTooltipEnabled)
                                    ) {
                                        var r = n;
                                        ("tickWidth" !== a.config.xaxis.crosshairs.width && "barWidth" !== a.config.xaxis.crosshairs.width) || (r = n + i.xcrosshairsWidth / 2), this.moveXAxisTooltip(r);
                                    }
                                },
                            },
                            {
                                key: "moveYCrosshairs",
                                value: function (t) {
                                    var e = this.ttCtx;
                                    null !== e.ycrosshairs && E.setAttrs(e.ycrosshairs, { y1: t, y2: t }), null !== e.ycrosshairsHidden && E.setAttrs(e.ycrosshairsHidden, { y1: t, y2: t });
                                },
                            },
                            {
                                key: "moveXAxisTooltip",
                                value: function (t) {
                                    var e = this.w,
                                        i = this.ttCtx;
                                    if (null !== i.xaxisTooltip && 0 !== i.xcrosshairsWidth) {
                                        i.xaxisTooltip.classList.add("apexcharts-active");
                                        var s,
                                            a = i.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;
                                        (t -= i.xaxisTooltip.getBoundingClientRect().width / 2),
                                            isNaN(t) ||
                                                ((t += e.globals.translateX),
                                                (s = new E(this.ctx).getTextRects(i.xaxisTooltipText.innerHTML)),
                                                (i.xaxisTooltipText.style.minWidth = s.width + "px"),
                                                (i.xaxisTooltip.style.left = t + "px"),
                                                (i.xaxisTooltip.style.top = a + "px"));
                                    }
                                },
                            },
                            {
                                key: "moveYAxisTooltip",
                                value: function (t) {
                                    var e = this.w,
                                        i = this.ttCtx;
                                    null === i.yaxisTTEls && (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
                                    var a = parseInt(i.ycrosshairsHidden.getAttribute("y1"), 10),
                                        s = e.globals.translateY + a,
                                        n = i.yaxisTTEls[t].getBoundingClientRect().height,
                                        o = e.globals.translateYAxisX[t] - 2;
                                    e.config.yaxis[t].opposite && (o -= 26),
                                        (s -= n / 2),
                                        -1 === e.globals.ignoreYAxisIndexes.indexOf(t)
                                            ? (i.yaxisTTEls[t].classList.add("apexcharts-active"), (i.yaxisTTEls[t].style.top = s + "px"), (i.yaxisTTEls[t].style.left = o + e.config.yaxis[t].tooltip.offsetX + "px"))
                                            : i.yaxisTTEls[t].classList.remove("apexcharts-active");
                                },
                            },
                            {
                                key: "moveTooltip",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                        a = this.w,
                                        s = this.ttCtx,
                                        n = s.getElTooltip(),
                                        o = s.tooltipRect,
                                        r = null !== i ? parseFloat(i) : 1,
                                        d = parseFloat(t) + r + 5,
                                        c = parseFloat(e) + r / 2;
                                    if ((d > a.globals.gridWidth / 2 && (d = d - o.ttWidth - r - 10), d > a.globals.gridWidth - o.ttWidth - 10 && (d = a.globals.gridWidth - o.ttWidth), d < -20 && (d = -20), a.config.tooltip.followCursor)) {
                                        var g = s.getElGrid().getBoundingClientRect();
                                        (d = s.e.clientX - g.left) > a.globals.gridWidth / 2 && (d -= s.tooltipRect.ttWidth), (c = s.e.clientY + a.globals.translateY - g.top) > a.globals.gridHeight / 2 && (c -= s.tooltipRect.ttHeight);
                                    } else a.globals.isBarHorizontal || (o.ttHeight / 2 + c > a.globals.gridHeight && (c = a.globals.gridHeight - o.ttHeight + a.globals.translateY));
                                    isNaN(d) || ((n.style.left = (d += a.globals.translateX) + "px"), (n.style.top = c + "px"));
                                },
                            },
                            {
                                key: "moveMarkers",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = this.ttCtx;
                                    if (i.globals.markers.size[t] > 0)
                                        for (var s = i.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t, "'] .apexcharts-marker")), n = 0; n < s.length; n++)
                                            parseInt(s[n].getAttribute("rel"), 10) === e && (a.marker.resetPointsSize(), a.marker.enlargeCurrentPoint(e, s[n]));
                                    else a.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t);
                                },
                            },
                            {
                                key: "moveDynamicPointOnHover",
                                value: function (t, e) {
                                    var i,
                                        a,
                                        s = this.w,
                                        n = this.ttCtx,
                                        o = s.globals.pointsArray,
                                        r = n.tooltipUtil.getHoverMarkerSize(e),
                                        d = s.config.series[e].type;
                                    if (!d || ("column" !== d && "candlestick" !== d && "boxPlot" !== d)) {
                                        (i = o[e][t][0]), (a = o[e][t][1] ? o[e][t][1] : 0);
                                        var c = s.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e, "'] .apexcharts-series-markers circle"));
                                        c && a < s.globals.gridHeight && a > 0 && (c.setAttribute("r", r), c.setAttribute("cx", i), c.setAttribute("cy", a)), this.moveXCrosshairs(i), n.fixedTooltip || this.moveTooltip(i, a, r);
                                    }
                                },
                            },
                            {
                                key: "moveDynamicPointsOnHover",
                                value: function (t) {
                                    var e,
                                        i = this.ttCtx,
                                        a = i.w,
                                        s = 0,
                                        n = 0,
                                        o = a.globals.pointsArray;
                                    e = new bt(this.ctx).getActiveConfigSeriesIndex("asc", ["line", "area", "scatter", "bubble"]);
                                    var r = i.tooltipUtil.getHoverMarkerSize(e);
                                    o[e] && ((s = o[e][t][0]), (n = o[e][t][1]));
                                    var d = i.tooltipUtil.getAllMarkers();
                                    if (null !== d)
                                        for (var c = 0; c < a.globals.series.length; c++) {
                                            var g = o[c];
                                            if ((a.globals.comboCharts && void 0 === g && d.splice(c, 0, null), g && g.length)) {
                                                var u = o[c][t][1];
                                                d[c].setAttribute("cx", s),
                                                    "rangeArea" !== a.config.chart.type || a.globals.comboCharts || (u -= Math.abs(u - o[c][t + a.globals.series[c].length][1]) / 2),
                                                    null !== u && !isNaN(u) && u < a.globals.gridHeight + r && u + r > 0 ? (d[c] && d[c].setAttribute("r", r), d[c] && d[c].setAttribute("cy", u)) : d[c] && d[c].setAttribute("r", 0);
                                            }
                                        }
                                    this.moveXCrosshairs(s), i.fixedTooltip || this.moveTooltip(s, n || a.globals.gridHeight, r);
                                },
                            },
                            {
                                key: "moveStickyTooltipOverBars",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = this.ttCtx,
                                        s = i.globals.columnSeries ? i.globals.columnSeries.length : i.globals.series.length,
                                        n = s >= 2 && s % 2 == 0 ? Math.floor(s / 2) : Math.floor(s / 2) + 1;
                                    i.globals.isBarHorizontal && (n = new bt(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
                                    var o = i.globals.dom.baseEl.querySelector(
                                        ".apexcharts-bar-series .apexcharts-series[rel='"
                                            .concat(n, "'] path[j='")
                                            .concat(t, "'], .apexcharts-candlestick-series .apexcharts-series[rel='")
                                            .concat(n, "'] path[j='")
                                            .concat(t, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='")
                                            .concat(n, "'] path[j='")
                                            .concat(t, "'], .apexcharts-rangebar-series .apexcharts-series[rel='")
                                            .concat(n, "'] path[j='")
                                            .concat(t, "']")
                                    );
                                    o ||
                                        "number" != typeof e ||
                                        (o = i.globals.dom.baseEl.querySelector(
                                            ".apexcharts-bar-series .apexcharts-series[data\\:realIndex='"
                                                .concat(e, "'] path[j='")
                                                .concat(t, "'],\n        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='")
                                                .concat(e, "'] path[j='")
                                                .concat(t, "'],\n        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='")
                                                .concat(e, "'] path[j='")
                                                .concat(t, "'],\n        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='")
                                                .concat(e, "'] path[j='")
                                                .concat(t, "']")
                                        ));
                                    var r = o ? parseFloat(o.getAttribute("cx")) : 0,
                                        d = o ? parseFloat(o.getAttribute("cy")) : 0,
                                        c = o ? parseFloat(o.getAttribute("barWidth")) : 0,
                                        g = a.getElGrid().getBoundingClientRect(),
                                        u = o && (o.classList.contains("apexcharts-candlestick-area") || o.classList.contains("apexcharts-boxPlot-area"));
                                    i.globals.isXNumeric
                                        ? (o && !u && (r -= s % 2 != 0 ? c / 2 : 0), o && u && i.globals.comboCharts && (r -= c / 2))
                                        : i.globals.isBarHorizontal || ((r = a.xAxisTicksPositions[t - 1] + a.dataPointsDividedWidth / 2), isNaN(r) && (r = a.xAxisTicksPositions[t] - a.dataPointsDividedWidth / 2)),
                                        i.globals.isBarHorizontal
                                            ? (d -= a.tooltipRect.ttHeight)
                                            : i.config.tooltip.followCursor
                                            ? (d = a.e.clientY - g.top - a.tooltipRect.ttHeight / 2)
                                            : d + a.tooltipRect.ttHeight + 15 > i.globals.gridHeight && (d = i.globals.gridHeight),
                                        i.globals.isBarHorizontal || this.moveXCrosshairs(r),
                                        a.fixedTooltip || this.moveTooltip(r, d || i.globals.gridHeight);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Se = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.ttCtx = t), (this.ctx = t.ctx), (this.tooltipPosition = new ae(t));
                    }
                    return (
                        m(A, [
                            {
                                key: "drawDynamicPoints",
                                value: function () {
                                    var t = this.w,
                                        e = new E(this.ctx),
                                        i = new Dt(this.ctx),
                                        a = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                                    (a = G(a)),
                                        t.config.chart.stacked &&
                                            a.sort(function (g, u) {
                                                return parseFloat(g.getAttribute("data:realIndex")) - parseFloat(u.getAttribute("data:realIndex"));
                                            });
                                    for (var s = 0; s < a.length; s++) {
                                        var n = a[s].querySelector(".apexcharts-series-markers-wrap");
                                        if (null !== n) {
                                            var o = void 0,
                                                r = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
                                            ("line" !== t.config.chart.type && "area" !== t.config.chart.type) || t.globals.comboCharts || t.config.tooltip.intersect || (r += " no-pointer-events");
                                            var d = i.getMarkerConfig({ cssClass: r, seriesIndex: Number(n.getAttribute("data:realIndex")) });
                                            (o = e.drawMarker(0, 0, d)).node.setAttribute("default-marker-size", 0);
                                            var c = document.createElementNS(t.globals.SVGNS, "g");
                                            c.classList.add("apexcharts-series-markers"), c.appendChild(o.node), n.appendChild(c);
                                        }
                                    }
                                },
                            },
                            {
                                key: "enlargeCurrentPoint",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                        a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                                        s = this.w;
                                    "bubble" !== s.config.chart.type && this.newPointSize(t, e);
                                    var n = e.getAttribute("cx"),
                                        o = e.getAttribute("cy");
                                    if ((null !== i && null !== a && ((n = i), (o = a)), this.tooltipPosition.moveXCrosshairs(n), !this.fixedTooltip)) {
                                        if ("radar" === s.config.chart.type) {
                                            var r = this.ttCtx.getElGrid().getBoundingClientRect();
                                            n = this.ttCtx.e.clientX - r.left;
                                        }
                                        this.tooltipPosition.moveTooltip(n, o, s.config.markers.hover.size);
                                    }
                                },
                            },
                            {
                                key: "enlargePoints",
                                value: function (t) {
                                    for (
                                        var e = this.w,
                                            i = this,
                                            a = this.ttCtx,
                                            s = t,
                                            n = e.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"),
                                            o = e.config.markers.hover.size,
                                            r = 0;
                                        r < n.length;
                                        r++
                                    ) {
                                        var d = n[r].getAttribute("rel"),
                                            c = n[r].getAttribute("index");
                                        if ((void 0 === o && (o = e.globals.markers.size[c] + e.config.markers.hover.sizeOffset), s === parseInt(d, 10))) {
                                            i.newPointSize(s, n[r]);
                                            var g = n[r].getAttribute("cx"),
                                                u = n[r].getAttribute("cy");
                                            i.tooltipPosition.moveXCrosshairs(g), a.fixedTooltip || i.tooltipPosition.moveTooltip(g, u, o);
                                        } else i.oldPointSize(n[r]);
                                    }
                                },
                            },
                            {
                                key: "newPointSize",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = i.config.markers.hover.size,
                                        s = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;
                                    if ("0" !== s.getAttribute("default-marker-size")) {
                                        var n = parseInt(s.getAttribute("index"), 10);
                                        void 0 === a && (a = i.globals.markers.size[n] + i.config.markers.hover.sizeOffset), a < 0 && (a = 0), s.setAttribute("r", a);
                                    }
                                },
                            },
                            {
                                key: "oldPointSize",
                                value: function (t) {
                                    var e = parseFloat(t.getAttribute("default-marker-size"));
                                    t.setAttribute("r", e);
                                },
                            },
                            {
                                key: "resetPointsSize",
                                value: function () {
                                    for (var t = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e = 0; e < t.length; e++) {
                                        var i = parseFloat(t[e].getAttribute("default-marker-size"));
                                        z.isNumber(i) && i >= 0 ? t[e].setAttribute("r", i) : t[e].setAttribute("r", 0);
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                we = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w);
                        var e = this.w;
                        (this.ttCtx = t), (this.isVerticalGroupedRangeBar = !e.globals.isBarHorizontal && "rangeBar" === e.config.chart.type && e.config.plotOptions.bar.rangeBarGroupRows);
                    }
                    return (
                        m(A, [
                            {
                                key: "getAttr",
                                value: function (t, e) {
                                    return parseFloat(t.target.getAttribute(e));
                                },
                            },
                            {
                                key: "handleHeatTreeTooltip",
                                value: function (t) {
                                    var e = t.e,
                                        i = t.opt,
                                        a = t.x,
                                        s = t.y,
                                        o = this.ttCtx,
                                        r = this.w;
                                    if (e.target.classList.contains("apexcharts-".concat(t.type, "-rect"))) {
                                        var d = this.getAttr(e, "i"),
                                            c = this.getAttr(e, "j"),
                                            g = this.getAttr(e, "cx"),
                                            u = this.getAttr(e, "cy"),
                                            p = this.getAttr(e, "width"),
                                            x = this.getAttr(e, "height");
                                        if (
                                            (o.tooltipLabels.drawSeriesTexts({ ttItems: i.ttItems, i: d, j: c, shared: !1, e }),
                                            (r.globals.capturedSeriesIndex = d),
                                            (r.globals.capturedDataPointIndex = c),
                                            (a = g + o.tooltipRect.ttWidth / 2 + p),
                                            (s = u + o.tooltipRect.ttHeight / 2 - x / 2),
                                            o.tooltipPosition.moveXCrosshairs(g + p / 2),
                                            a > r.globals.gridWidth / 2 && (a = g - o.tooltipRect.ttWidth / 2 + p),
                                            o.w.config.tooltip.followCursor)
                                        ) {
                                            var y = r.globals.dom.elWrap.getBoundingClientRect();
                                            (a = r.globals.clientX - y.left - (a > r.globals.gridWidth / 2 ? o.tooltipRect.ttWidth : 0)), (s = r.globals.clientY - y.top - (s > r.globals.gridHeight / 2 ? o.tooltipRect.ttHeight : 0));
                                        }
                                    }
                                    return { x: a, y: s };
                                },
                            },
                            {
                                key: "handleMarkerTooltip",
                                value: function (t) {
                                    var e,
                                        i,
                                        a = t.e,
                                        s = t.opt,
                                        n = t.x,
                                        o = t.y,
                                        r = this.w,
                                        d = this.ttCtx;
                                    if (a.target.classList.contains("apexcharts-marker")) {
                                        var c = parseInt(s.paths.getAttribute("cx"), 10),
                                            g = parseInt(s.paths.getAttribute("cy"), 10),
                                            u = parseFloat(s.paths.getAttribute("val"));
                                        if (((i = parseInt(s.paths.getAttribute("rel"), 10)), (e = parseInt(s.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1), d.intersect)) {
                                            var p = z.findAncestor(s.paths, "apexcharts-series");
                                            p && (e = parseInt(p.getAttribute("data:realIndex"), 10));
                                        }
                                        if (
                                            (d.tooltipLabels.drawSeriesTexts({ ttItems: s.ttItems, i: e, j: i, shared: !d.showOnIntersect && r.config.tooltip.shared, e: a }),
                                            "mouseup" === a.type && d.markerClick(a, e, i),
                                            (r.globals.capturedSeriesIndex = e),
                                            (r.globals.capturedDataPointIndex = i),
                                            (n = c),
                                            (o = g + r.globals.translateY - 1.4 * d.tooltipRect.ttHeight),
                                            d.w.config.tooltip.followCursor)
                                        ) {
                                            var x = d.getElGrid().getBoundingClientRect();
                                            o = d.e.clientY + r.globals.translateY - x.top;
                                        }
                                        u < 0 && (o = g), d.marker.enlargeCurrentPoint(i, s.paths, n, o);
                                    }
                                    return { x: n, y: o };
                                },
                            },
                            {
                                key: "handleBarTooltip",
                                value: function (t) {
                                    var e,
                                        i,
                                        a = t.e,
                                        s = t.opt,
                                        n = this.w,
                                        o = this.ttCtx,
                                        r = o.getElTooltip(),
                                        d = 0,
                                        c = 0,
                                        g = 0,
                                        u = this.getBarTooltipXY({ e: a, opt: s }),
                                        p = u.barHeight,
                                        x = u.j;
                                    (n.globals.capturedSeriesIndex = e = u.i),
                                        (n.globals.capturedDataPointIndex = x),
                                        (n.globals.isBarHorizontal && o.tooltipUtil.hasBars()) || !n.config.tooltip.shared
                                            ? ((c = u.x), (g = u.y), (i = Array.isArray(n.config.stroke.width) ? n.config.stroke.width[e] : n.config.stroke.width), (d = c))
                                            : n.globals.comboCharts || n.config.tooltip.shared || (d /= 2),
                                        isNaN(g) && (g = n.globals.svgHeight - o.tooltipRect.ttHeight);
                                    var y = parseInt(s.paths.parentNode.getAttribute("data:realIndex"), 10),
                                        C = n.globals.isMultipleYAxis ? n.config.yaxis[y] && n.config.yaxis[y].reversed : n.config.yaxis[0].reversed;
                                    if ((c + o.tooltipRect.ttWidth > n.globals.gridWidth && !C ? (c -= o.tooltipRect.ttWidth) : c < 0 && (c = 0), o.w.config.tooltip.followCursor)) {
                                        var w = o.getElGrid().getBoundingClientRect();
                                        g = o.e.clientY - w.top;
                                    }
                                    null === o.tooltip && (o.tooltip = n.globals.dom.baseEl.querySelector(".apexcharts-tooltip")),
                                        n.config.tooltip.shared || o.tooltipPosition.moveXCrosshairs(n.globals.comboBarCount > 0 ? d + i / 2 : d),
                                        !o.fixedTooltip &&
                                            (!n.config.tooltip.shared || (n.globals.isBarHorizontal && o.tooltipUtil.hasBars())) &&
                                            (C && (c -= o.tooltipRect.ttWidth) < 0 && (c = 0),
                                            !C || (n.globals.isBarHorizontal && o.tooltipUtil.hasBars()) || (g = g + p - 2 * (n.globals.series[e][x] < 0 ? p : 0)),
                                            (g = g + n.globals.translateY - o.tooltipRect.ttHeight / 2),
                                            (r.style.left = c + n.globals.translateX + "px"),
                                            (r.style.top = g + "px"));
                                },
                            },
                            {
                                key: "getBarTooltipXY",
                                value: function (t) {
                                    var e = this,
                                        i = t.e,
                                        a = t.opt,
                                        s = this.w,
                                        n = null,
                                        o = this.ttCtx,
                                        r = 0,
                                        d = 0,
                                        c = 0,
                                        g = 0,
                                        u = 0,
                                        p = i.target.classList;
                                    if (p.contains("apexcharts-bar-area") || p.contains("apexcharts-candlestick-area") || p.contains("apexcharts-boxPlot-area") || p.contains("apexcharts-rangebar-area")) {
                                        var x = i.target,
                                            y = x.getBoundingClientRect(),
                                            C = a.elGrid.getBoundingClientRect(),
                                            w = y.height;
                                        u = y.height;
                                        var P = y.width,
                                            l = parseInt(x.getAttribute("cx"), 10),
                                            f = parseInt(x.getAttribute("cy"), 10);
                                        g = parseFloat(x.getAttribute("barWidth"));
                                        var v = "touchmove" === i.type ? i.touches[0].clientX : i.clientX;
                                        (n = parseInt(x.getAttribute("j"), 10)), (r = parseInt(x.parentNode.getAttribute("rel"), 10) - 1);
                                        var S = x.getAttribute("data-range-y1"),
                                            M = x.getAttribute("data-range-y2");
                                        s.globals.comboCharts && (r = parseInt(x.parentNode.getAttribute("data:realIndex"), 10));
                                        var L = function (I) {
                                                return s.globals.isXNumeric ? l - P / 2 : e.isVerticalGroupedRangeBar ? l + P / 2 : l - o.dataPointsDividedWidth + P / 2;
                                            },
                                            k = function () {
                                                return f - o.dataPointsDividedHeight + w / 2 - o.tooltipRect.ttHeight / 2;
                                            };
                                        o.tooltipLabels.drawSeriesTexts({ ttItems: a.ttItems, i: r, j: n, y1: S ? parseInt(S, 10) : null, y2: M ? parseInt(M, 10) : null, shared: !o.showOnIntersect && s.config.tooltip.shared, e: i }),
                                            s.config.tooltip.followCursor
                                                ? s.globals.isBarHorizontal
                                                    ? ((d = v - C.left + 15), (c = k()))
                                                    : ((d = L()), (c = i.clientY - C.top - o.tooltipRect.ttHeight / 2 - 15))
                                                : s.globals.isBarHorizontal
                                                ? ((d = l) < o.xyRatios.baseLineInvertedY && (d = l - o.tooltipRect.ttWidth), (c = k()))
                                                : ((d = L()), (c = f));
                                    }
                                    return { x: d, y: c, barHeight: u, barWidth: g, i: r, j: n };
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Pe = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.ttCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "drawXaxisTooltip",
                                value: function () {
                                    var t = this.w,
                                        e = this.ttCtx,
                                        i = "bottom" === t.config.xaxis.position;
                                    e.xaxisOffY = i ? t.globals.gridHeight + 1 : -t.globals.xAxisHeight - t.config.xaxis.axisTicks.height + 3;
                                    var a = i ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
                                        s = t.globals.dom.elWrap;
                                    e.isXAxisTooltipEnabled &&
                                        null === t.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") &&
                                        ((e.xaxisTooltip = document.createElement("div")),
                                        e.xaxisTooltip.setAttribute("class", a + " apexcharts-theme-" + t.config.tooltip.theme),
                                        s.appendChild(e.xaxisTooltip),
                                        (e.xaxisTooltipText = document.createElement("div")),
                                        e.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"),
                                        (e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily),
                                        (e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize),
                                        e.xaxisTooltip.appendChild(e.xaxisTooltipText));
                                },
                            },
                            {
                                key: "drawYaxisTooltip",
                                value: function () {
                                    for (
                                        var t = this.w,
                                            e = this.ttCtx,
                                            i = function (s) {
                                                var n = t.config.yaxis[s].opposite || t.config.yaxis[s].crosshairs.opposite;
                                                e.yaxisOffX = n ? t.globals.gridWidth + 1 : 1;
                                                var o = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(s, n ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left");
                                                t.globals.yAxisSameScaleIndices.map(function (d, c) {
                                                    d.map(function (g, u) {
                                                        u === s && (o += t.config.yaxis[u].show ? " " : " apexcharts-yaxistooltip-hidden");
                                                    });
                                                });
                                                var r = t.globals.dom.elWrap;
                                                null === t.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(s)) &&
                                                    ((e.yaxisTooltip = document.createElement("div")),
                                                    e.yaxisTooltip.setAttribute("class", o + " apexcharts-theme-" + t.config.tooltip.theme),
                                                    r.appendChild(e.yaxisTooltip),
                                                    0 === s && (e.yaxisTooltipText = []),
                                                    (e.yaxisTooltipText[s] = document.createElement("div")),
                                                    e.yaxisTooltipText[s].classList.add("apexcharts-yaxistooltip-text"),
                                                    e.yaxisTooltip.appendChild(e.yaxisTooltipText[s]));
                                            },
                                            a = 0;
                                        a < t.config.yaxis.length;
                                        a++
                                    )
                                        i(a);
                                },
                            },
                            {
                                key: "setXCrosshairWidth",
                                value: function () {
                                    var t = this.w,
                                        e = this.ttCtx,
                                        i = e.getElXCrosshairs();
                                    if (((e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width, 10)), t.globals.comboCharts)) {
                                        var a = t.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
                                        if (null !== a && "barWidth" === t.config.xaxis.crosshairs.width) {
                                            var s = parseFloat(a.getAttribute("barWidth"));
                                            e.xcrosshairsWidth = s;
                                        } else "tickWidth" === t.config.xaxis.crosshairs.width && (e.xcrosshairsWidth = t.globals.gridWidth / t.globals.labels.length);
                                    } else if ("tickWidth" === t.config.xaxis.crosshairs.width) e.xcrosshairsWidth = t.globals.gridWidth / t.globals.labels.length;
                                    else if ("barWidth" === t.config.xaxis.crosshairs.width) {
                                        var r = t.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
                                        if (null !== r) {
                                            var d = parseFloat(r.getAttribute("barWidth"));
                                            e.xcrosshairsWidth = d;
                                        } else e.xcrosshairsWidth = 1;
                                    }
                                    t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== i && e.xcrosshairsWidth > 0 && i.setAttribute("width", e.xcrosshairsWidth);
                                },
                            },
                            {
                                key: "handleYCrosshair",
                                value: function () {
                                    var t = this.w,
                                        e = this.ttCtx;
                                    (e.ycrosshairs = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs")), (e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden"));
                                },
                            },
                            {
                                key: "drawYaxisTooltipText",
                                value: function (t, e, i) {
                                    var a = this.ttCtx,
                                        s = this.w,
                                        n = s.globals.yLabelFormatters[t];
                                    if (a.yaxisTooltips[t]) {
                                        var o = a.getElGrid().getBoundingClientRect(),
                                            c = s.globals.minYArr[t] + (s.globals.maxYArr[t] - s.globals.minYArr[t] - (e - o.top) * i.yRatio[t]);
                                        a.tooltipPosition.moveYCrosshairs(e - o.top), (a.yaxisTooltipText[t].innerHTML = n(c)), a.tooltipPosition.moveYAxisTooltip(t);
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                se = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                        var e = this.w;
                        (this.tConfig = e.config.tooltip),
                            (this.tooltipUtil = new ie(this)),
                            (this.tooltipLabels = new Ae(this)),
                            (this.tooltipPosition = new ae(this)),
                            (this.marker = new Se(this)),
                            (this.intersect = new we(this)),
                            (this.axesTooltip = new Pe(this)),
                            (this.showOnIntersect = this.tConfig.intersect),
                            (this.showTooltipTitle = this.tConfig.x.show),
                            (this.fixedTooltip = this.tConfig.fixed.enabled),
                            (this.xaxisTooltip = null),
                            (this.yaxisTTEls = null),
                            (this.isBarShared = !e.globals.isBarHorizontal && this.tConfig.shared),
                            (this.lastHoverTime = Date.now());
                    }
                    return (
                        m(A, [
                            {
                                key: "getElTooltip",
                                value: function (t) {
                                    return t || (t = this), t.w.globals.dom.baseEl ? t.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
                                },
                            },
                            {
                                key: "getElXCrosshairs",
                                value: function () {
                                    return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
                                },
                            },
                            {
                                key: "getElGrid",
                                value: function () {
                                    return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
                                },
                            },
                            {
                                key: "drawTooltip",
                                value: function (t) {
                                    var e = this.w;
                                    (this.xyRatios = t),
                                        (this.isXAxisTooltipEnabled = e.config.xaxis.tooltip.enabled && e.globals.axisCharts),
                                        (this.yaxisTooltips = e.config.yaxis.map(function (n, o) {
                                            return !!(n.show && n.tooltip.enabled && e.globals.axisCharts);
                                        })),
                                        (this.allTooltipSeriesGroups = []),
                                        e.globals.axisCharts || (this.showTooltipTitle = !1);
                                    var i = document.createElement("div");
                                    if (
                                        (i.classList.add("apexcharts-tooltip"),
                                        e.config.tooltip.cssClass && i.classList.add(e.config.tooltip.cssClass),
                                        i.classList.add("apexcharts-theme-".concat(this.tConfig.theme)),
                                        e.globals.dom.elWrap.appendChild(i),
                                        e.globals.axisCharts)
                                    ) {
                                        this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
                                        var a = new Yt(this.ctx);
                                        this.xAxisTicksPositions = a.getXAxisTicksPositions();
                                    }
                                    if (
                                        ((!e.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e.config.chart.type) || this.tConfig.shared || (this.showOnIntersect = !0),
                                        (0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize) || this.marker.drawDynamicPoints(this),
                                        e.globals.collapsedSeries.length !== e.globals.series.length)
                                    ) {
                                        (this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints),
                                            (this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints),
                                            this.showTooltipTitle &&
                                                ((this.tooltipTitle = document.createElement("div")),
                                                this.tooltipTitle.classList.add("apexcharts-tooltip-title"),
                                                (this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily),
                                                (this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize),
                                                i.appendChild(this.tooltipTitle));
                                        var s = e.globals.series.length;
                                        (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (s = this.showOnIntersect ? 1 : e.globals.series.length),
                                            (this.legendLabels = e.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text")),
                                            (this.ttItems = this.createTTElements(s)),
                                            this.addSVGEvents();
                                    }
                                },
                            },
                            {
                                key: "createTTElements",
                                value: function (t) {
                                    for (
                                        var e = this,
                                            i = this.w,
                                            a = [],
                                            s = this.getElTooltip(),
                                            n = function (r) {
                                                var d = document.createElement("div");
                                                d.classList.add("apexcharts-tooltip-series-group"),
                                                    (d.style.order = i.config.tooltip.inverseOrder ? t - r : r + 1),
                                                    e.tConfig.shared &&
                                                        e.tConfig.enabledOnSeries &&
                                                        Array.isArray(e.tConfig.enabledOnSeries) &&
                                                        e.tConfig.enabledOnSeries.indexOf(r) < 0 &&
                                                        d.classList.add("apexcharts-tooltip-series-group-hidden");
                                                var c = document.createElement("span");
                                                c.classList.add("apexcharts-tooltip-marker"), (c.style.backgroundColor = i.globals.colors[r]), d.appendChild(c);
                                                var g = document.createElement("div");
                                                g.classList.add("apexcharts-tooltip-text"),
                                                    (g.style.fontFamily = e.tConfig.style.fontFamily || i.config.chart.fontFamily),
                                                    (g.style.fontSize = e.tConfig.style.fontSize),
                                                    ["y", "goals", "z"].forEach(function (u) {
                                                        var p = document.createElement("div");
                                                        p.classList.add("apexcharts-tooltip-".concat(u, "-group"));
                                                        var x = document.createElement("span");
                                                        x.classList.add("apexcharts-tooltip-text-".concat(u, "-label")), p.appendChild(x);
                                                        var y = document.createElement("span");
                                                        y.classList.add("apexcharts-tooltip-text-".concat(u, "-value")), p.appendChild(y), g.appendChild(p);
                                                    }),
                                                    d.appendChild(g),
                                                    s.appendChild(d),
                                                    a.push(d);
                                            },
                                            o = 0;
                                        o < t;
                                        o++
                                    )
                                        n(o);
                                    return a;
                                },
                            },
                            {
                                key: "addSVGEvents",
                                value: function () {
                                    var t = this.w,
                                        e = t.config.chart.type,
                                        i = this.getElTooltip(),
                                        a = !("bar" !== e && "candlestick" !== e && "boxPlot" !== e && "rangeBar" !== e),
                                        s = "area" === e || "line" === e || "scatter" === e || "bubble" === e || "radar" === e,
                                        n = t.globals.dom.Paper.node,
                                        o = this.getElGrid();
                                    o && (this.seriesBound = o.getBoundingClientRect());
                                    var r,
                                        d = [],
                                        c = [],
                                        g = { hoverArea: n, elGrid: o, tooltipEl: i, tooltipY: d, tooltipX: c, ttItems: this.ttItems };
                                    if (
                                        t.globals.axisCharts &&
                                        (s
                                            ? (r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"))
                                            : a
                                            ? (r = t.globals.dom.baseEl.querySelectorAll(
                                                  ".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area"
                                              ))
                                            : ("heatmap" !== e && "treemap" !== e) || (r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")),
                                        r && r.length)
                                    )
                                        for (var u = 0; u < r.length; u++) d.push(r[u].getAttribute("cy")), c.push(r[u].getAttribute("cx"));
                                    if ((t.globals.xyCharts && !this.showOnIntersect) || (t.globals.comboCharts && !this.showOnIntersect) || (a && this.tooltipUtil.hasBars() && this.tConfig.shared)) this.addPathsEventListeners([n], g);
                                    else if ((a && !t.globals.comboCharts) || (s && this.showOnIntersect)) this.addDatapointEventsListeners(g);
                                    else if (!t.globals.axisCharts || "heatmap" === e || "treemap" === e) {
                                        var p = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                                        this.addPathsEventListeners(p, g);
                                    }
                                    if (this.showOnIntersect) {
                                        var x = t.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
                                        x.length > 0 && this.addPathsEventListeners(x, g), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(g);
                                    }
                                },
                            },
                            {
                                key: "drawFixedTooltipRect",
                                value: function () {
                                    var t = this.w,
                                        e = this.getElTooltip(),
                                        i = e.getBoundingClientRect(),
                                        a = i.width + 10,
                                        s = i.height + 10,
                                        n = this.tConfig.fixed.offsetX,
                                        o = this.tConfig.fixed.offsetY,
                                        r = this.tConfig.fixed.position.toLowerCase();
                                    return (
                                        r.indexOf("right") > -1 && (n = n + t.globals.svgWidth - a + 10),
                                        r.indexOf("bottom") > -1 && (o = o + t.globals.svgHeight - s - 10),
                                        (e.style.left = n + "px"),
                                        (e.style.top = o + "px"),
                                        { x: n, y: o, ttWidth: a, ttHeight: s }
                                    );
                                },
                            },
                            {
                                key: "addDatapointEventsListeners",
                                value: function (t) {
                                    var e = this.w.globals.dom.baseEl.querySelectorAll(
                                        ".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area"
                                    );
                                    this.addPathsEventListeners(e, t);
                                },
                            },
                            {
                                key: "addPathsEventListeners",
                                value: function (t, e) {
                                    for (
                                        var i = this,
                                            a = function (n) {
                                                var o = { paths: t[n], tooltipEl: e.tooltipEl, tooltipY: e.tooltipY, tooltipX: e.tooltipX, elGrid: e.elGrid, hoverArea: e.hoverArea, ttItems: e.ttItems };
                                                ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function (r) {
                                                    return t[n].addEventListener(r, i.onSeriesHover.bind(i, o), { capture: !1, passive: !0 });
                                                });
                                            },
                                            s = 0;
                                        s < t.length;
                                        s++
                                    )
                                        a(s);
                                },
                            },
                            {
                                key: "onSeriesHover",
                                value: function (t, e) {
                                    var i = this,
                                        a = Date.now() - this.lastHoverTime;
                                    a >= 100
                                        ? this.seriesHover(t, e)
                                        : (clearTimeout(this.seriesHoverTimeout),
                                          (this.seriesHoverTimeout = setTimeout(function () {
                                              i.seriesHover(t, e);
                                          }, 100 - a)));
                                },
                            },
                            {
                                key: "seriesHover",
                                value: function (t, e) {
                                    var i = this;
                                    this.lastHoverTime = Date.now();
                                    var a = [],
                                        s = this.w;
                                    s.config.chart.group && (a = this.ctx.getGroupedCharts()),
                                        (s.globals.axisCharts && ((s.globals.minX === -1 / 0 && s.globals.maxX === 1 / 0) || 0 === s.globals.dataPoints)) ||
                                            (a.length
                                                ? a.forEach(function (n) {
                                                      var o = i.getElTooltip(n);
                                                      n.w.globals.minX === i.w.globals.minX &&
                                                          n.w.globals.maxX === i.w.globals.maxX &&
                                                          n.w.globals.tooltip.seriesHoverByContext({
                                                              chartCtx: n,
                                                              ttCtx: n.w.globals.tooltip,
                                                              opt: { paths: t.paths, tooltipEl: o, tooltipY: t.tooltipY, tooltipX: t.tooltipX, elGrid: t.elGrid, hoverArea: t.hoverArea, ttItems: n.w.globals.tooltip.ttItems },
                                                              e,
                                                          });
                                                  })
                                                : this.seriesHoverByContext({ chartCtx: this.ctx, ttCtx: this.w.globals.tooltip, opt: t, e }));
                                },
                            },
                            {
                                key: "seriesHoverByContext",
                                value: function (t) {
                                    var e = t.chartCtx,
                                        i = t.ttCtx,
                                        a = t.opt,
                                        s = t.e,
                                        n = e.w,
                                        o = this.getElTooltip();
                                    o &&
                                        ((i.tooltipRect = { x: 0, y: 0, ttWidth: o.getBoundingClientRect().width, ttHeight: o.getBoundingClientRect().height }),
                                        (i.e = s),
                                        i.tooltipUtil.hasBars() && !n.globals.comboCharts && !i.isBarShared && this.tConfig.onDatasetHover.highlightDataSeries && new bt(e).toggleSeriesOnHover(s, s.target.parentNode),
                                        i.fixedTooltip && i.drawFixedTooltipRect(),
                                        n.globals.axisCharts ? i.axisChartsTooltips({ e: s, opt: a, tooltipRect: i.tooltipRect }) : i.nonAxisChartsTooltips({ e: s, opt: a, tooltipRect: i.tooltipRect }));
                                },
                            },
                            {
                                key: "axisChartsTooltips",
                                value: function (t) {
                                    var e,
                                        i,
                                        a = t.e,
                                        s = t.opt,
                                        n = this.w,
                                        o = s.elGrid.getBoundingClientRect(),
                                        r = "touchmove" === a.type ? a.touches[0].clientX : a.clientX,
                                        d = "touchmove" === a.type ? a.touches[0].clientY : a.clientY;
                                    if (((this.clientY = d), (this.clientX = r), (n.globals.capturedSeriesIndex = -1), (n.globals.capturedDataPointIndex = -1), d < o.top || d > o.top + o.height)) this.handleMouseOut(s);
                                    else {
                                        if (Array.isArray(this.tConfig.enabledOnSeries) && !n.config.tooltip.shared) {
                                            var c = parseInt(s.paths.getAttribute("index"), 10);
                                            if (this.tConfig.enabledOnSeries.indexOf(c) < 0) return void this.handleMouseOut(s);
                                        }
                                        var g = this.getElTooltip(),
                                            u = this.getElXCrosshairs(),
                                            p =
                                                n.globals.xyCharts ||
                                                ("bar" === n.config.chart.type && !n.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared) ||
                                                (n.globals.comboCharts && this.tooltipUtil.hasBars());
                                        if ("mousemove" === a.type || "touchmove" === a.type || "mouseup" === a.type) {
                                            if (n.globals.collapsedSeries.length + n.globals.ancillaryCollapsedSeries.length === n.globals.series.length) return;
                                            null !== u && u.classList.add("apexcharts-active");
                                            var x = this.yaxisTooltips.filter(function (w) {
                                                return !0 === w;
                                            });
                                            if ((null !== this.ycrosshairs && x.length && this.ycrosshairs.classList.add("apexcharts-active"), p && !this.showOnIntersect)) this.handleStickyTooltip(a, r, d, s);
                                            else if ("heatmap" === n.config.chart.type || "treemap" === n.config.chart.type) {
                                                var y = this.intersect.handleHeatTreeTooltip({ e: a, opt: s, x: e, y: i, type: n.config.chart.type });
                                                (i = y.y), (g.style.left = (e = y.x) + "px"), (g.style.top = i + "px");
                                            } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({ e: a, opt: s }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({ e: a, opt: s, x: e, y: i });
                                            if (this.yaxisTooltips.length) for (var C = 0; C < n.config.yaxis.length; C++) this.axesTooltip.drawYaxisTooltipText(C, d, this.xyRatios);
                                            s.tooltipEl.classList.add("apexcharts-active");
                                        } else ("mouseout" !== a.type && "touchend" !== a.type) || this.handleMouseOut(s);
                                    }
                                },
                            },
                            {
                                key: "nonAxisChartsTooltips",
                                value: function (t) {
                                    var e = t.e,
                                        i = t.opt,
                                        a = t.tooltipRect,
                                        s = this.w,
                                        n = i.paths.getAttribute("rel"),
                                        o = this.getElTooltip(),
                                        r = s.globals.dom.elWrap.getBoundingClientRect();
                                    if ("mousemove" === e.type || "touchmove" === e.type) {
                                        o.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({ ttItems: i.ttItems, i: parseInt(n, 10) - 1, shared: !1 });
                                        var c = s.globals.clientY - r.top - a.ttHeight - 10;
                                        if (((o.style.left = s.globals.clientX - r.left - a.ttWidth / 2 + "px"), (o.style.top = c + "px"), s.config.legend.tooltipHoverFormatter)) {
                                            var g = n - 1,
                                                u = (0, s.config.legend.tooltipHoverFormatter)(this.legendLabels[g].getAttribute("data:default-text"), { seriesIndex: g, dataPointIndex: g, w: s });
                                            this.legendLabels[g].innerHTML = u;
                                        }
                                    } else
                                        ("mouseout" !== e.type && "touchend" !== e.type) ||
                                            (o.classList.remove("apexcharts-active"),
                                            s.config.legend.tooltipHoverFormatter &&
                                                this.legendLabels.forEach(function (p) {
                                                    var x = p.getAttribute("data:default-text");
                                                    p.innerHTML = decodeURIComponent(x);
                                                }));
                                },
                            },
                            {
                                key: "handleStickyTooltip",
                                value: function (t, e, i, a) {
                                    var s = this.w,
                                        n = this.tooltipUtil.getNearestValues({ context: this, hoverArea: a.hoverArea, elGrid: a.elGrid, clientX: e, clientY: i }),
                                        o = n.j,
                                        r = n.capturedSeries;
                                    s.globals.collapsedSeriesIndices.includes(r) && (r = null);
                                    var d = a.elGrid.getBoundingClientRect();
                                    if (n.hoverX < 0 || n.hoverX > d.width) this.handleMouseOut(a);
                                    else if (null !== r) this.handleStickyCapturedSeries(t, r, a, o);
                                    else if (this.tooltipUtil.isXoverlap(o) || s.globals.isBarHorizontal) {
                                        var c = s.globals.series.findIndex(function (g, u) {
                                            return !s.globals.collapsedSeriesIndices.includes(u);
                                        });
                                        this.create(t, this, c, o, a.ttItems);
                                    }
                                },
                            },
                            {
                                key: "handleStickyCapturedSeries",
                                value: function (t, e, i, a) {
                                    var s = this.w;
                                    if (this.tConfig.shared || null !== s.globals.series[e][a]) {
                                        if (void 0 !== s.globals.series[e][a])
                                            this.tConfig.shared && this.tooltipUtil.isXoverlap(a) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t, this, e, a, i.ttItems) : this.create(t, this, e, a, i.ttItems, !1);
                                        else if (this.tooltipUtil.isXoverlap(a)) {
                                            var n = s.globals.series.findIndex(function (o, r) {
                                                return !s.globals.collapsedSeriesIndices.includes(r);
                                            });
                                            this.create(t, this, n, a, i.ttItems);
                                        }
                                    } else this.handleMouseOut(i);
                                },
                            },
                            {
                                key: "deactivateHoverFilter",
                                value: function () {
                                    for (var t = this.w, e = new E(this.ctx), i = t.globals.dom.Paper.select(".apexcharts-bar-area"), a = 0; a < i.length; a++) e.pathMouseLeave(i[a]);
                                },
                            },
                            {
                                key: "handleMouseOut",
                                value: function (t) {
                                    var e = this.w,
                                        i = this.getElXCrosshairs();
                                    if (
                                        (t.tooltipEl.classList.remove("apexcharts-active"),
                                        this.deactivateHoverFilter(),
                                        "bubble" !== e.config.chart.type && this.marker.resetPointsSize(),
                                        null !== i && i.classList.remove("apexcharts-active"),
                                        null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"),
                                        this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"),
                                        this.yaxisTooltips.length)
                                    ) {
                                        null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
                                        for (var a = 0; a < this.yaxisTTEls.length; a++) this.yaxisTTEls[a].classList.remove("apexcharts-active");
                                    }
                                    e.config.legend.tooltipHoverFormatter &&
                                        this.legendLabels.forEach(function (s) {
                                            var n = s.getAttribute("data:default-text");
                                            s.innerHTML = decodeURIComponent(n);
                                        });
                                },
                            },
                            {
                                key: "markerClick",
                                value: function (t, e, i) {
                                    var a = this.w;
                                    "function" == typeof a.config.chart.events.markerClick && a.config.chart.events.markerClick(t, this.ctx, { seriesIndex: e, dataPointIndex: i, w: a }),
                                        this.ctx.events.fireEvent("markerClick", [t, this.ctx, { seriesIndex: e, dataPointIndex: i, w: a }]);
                                },
                            },
                            {
                                key: "create",
                                value: function (t, e, i, a, s) {
                                    var n,
                                        o,
                                        r,
                                        d,
                                        c,
                                        g,
                                        u,
                                        p,
                                        x,
                                        y,
                                        C,
                                        w,
                                        P,
                                        l,
                                        f,
                                        v,
                                        S = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
                                        M = this.w,
                                        L = e;
                                    "mouseup" === t.type && this.markerClick(t, i, a), null === S && (S = this.tConfig.shared);
                                    var k = this.tooltipUtil.hasMarkers(i),
                                        I = this.tooltipUtil.getElBars();
                                    if (M.config.legend.tooltipHoverFormatter) {
                                        var Y = M.config.legend.tooltipHoverFormatter,
                                            D = Array.from(this.legendLabels);
                                        D.forEach(function (zt) {
                                            var Ft = zt.getAttribute("data:default-text");
                                            zt.innerHTML = decodeURIComponent(Ft);
                                        });
                                        for (var O = 0; O < D.length; O++) {
                                            var N = D[O],
                                                Q = parseInt(N.getAttribute("i"), 10),
                                                tt = decodeURIComponent(N.getAttribute("data:default-text")),
                                                et = Y(tt, { seriesIndex: S ? Q : i, dataPointIndex: a, w: M });
                                            if (S) N.innerHTML = M.globals.collapsedSeriesIndices.indexOf(Q) < 0 ? et : tt;
                                            else if (((N.innerHTML = Q === i ? et : tt), i === Q)) break;
                                        }
                                    }
                                    var at = F(
                                        F(
                                            { ttItems: s, i, j: a },
                                            void 0 !==
                                                (null === (n = M.globals.seriesRange) || void 0 === n || null === (o = n[i]) || void 0 === o || null === (r = o[a]) || void 0 === r || null === (d = r.y[0]) || void 0 === d
                                                    ? void 0
                                                    : d.y1) && {
                                                y1: null === (c = M.globals.seriesRange) || void 0 === c || null === (g = c[i]) || void 0 === g || null === (u = g[a]) || void 0 === u || null === (p = u.y[0]) || void 0 === p ? void 0 : p.y1,
                                            }
                                        ),
                                        void 0 !==
                                            (null === (x = M.globals.seriesRange) || void 0 === x || null === (y = x[i]) || void 0 === y || null === (C = y[a]) || void 0 === C || null === (w = C.y[0]) || void 0 === w ? void 0 : w.y2) && {
                                            y2: null === (P = M.globals.seriesRange) || void 0 === P || null === (l = P[i]) || void 0 === l || null === (f = l[a]) || void 0 === f || null === (v = f.y[0]) || void 0 === v ? void 0 : v.y2,
                                        }
                                    );
                                    if (S) {
                                        if ((L.tooltipLabels.drawSeriesTexts(F(F({}, at), {}, { shared: !this.showOnIntersect && this.tConfig.shared })), k))
                                            M.globals.markers.largestSize > 0 ? L.marker.enlargePoints(a) : L.tooltipPosition.moveDynamicPointsOnHover(a);
                                        else if (this.tooltipUtil.hasBars() && ((this.barSeriesHeight = this.tooltipUtil.getBarsHeight(I)), this.barSeriesHeight > 0)) {
                                            var ct = new E(this.ctx),
                                                ht = M.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(a, "']"));
                                            this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a, i);
                                            for (var ft = 0; ft < ht.length; ft++) ct.pathMouseEnter(ht[ft]);
                                        }
                                    } else L.tooltipLabels.drawSeriesTexts(F({ shared: !1 }, at)), this.tooltipUtil.hasBars() && L.tooltipPosition.moveStickyTooltipOverBars(a, i), k && L.tooltipPosition.moveMarkers(i, a);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Me = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.barCtx = t), (this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter), this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);
                    }
                    return (
                        m(A, [
                            {
                                key: "handleBarDataLabels",
                                value: function (t) {
                                    var e = t.x,
                                        i = t.y,
                                        a = t.y1,
                                        s = t.y2,
                                        n = t.i,
                                        o = t.j,
                                        r = t.realIndex,
                                        d = t.groupIndex,
                                        c = t.series,
                                        g = t.barHeight,
                                        u = t.barWidth,
                                        p = t.barXPosition,
                                        x = t.barYPosition,
                                        y = t.visibleSeries,
                                        C = t.renderedPath,
                                        w = this.w,
                                        P = new E(this.barCtx.ctx),
                                        l = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[r] : this.barCtx.strokeWidth,
                                        f = e + parseFloat(u * y),
                                        v = i + parseFloat(g * y);
                                    w.globals.isXNumeric && !w.globals.isBarHorizontal && ((f = e + parseFloat(u * (y + 1))), (v = i + parseFloat(g * (y + 1)) - l));
                                    var S,
                                        I,
                                        M = null,
                                        L = e,
                                        k = i,
                                        Y = w.config.dataLabels,
                                        D = this.barCtx.barOptions.dataLabels,
                                        O = this.barCtx.barOptions.dataLabels.total;
                                    void 0 !== x && this.barCtx.isRangeBar && ((v = x), (k = x)), void 0 !== p && this.barCtx.isVerticalGroupedRangeBar && ((f = p), (L = p));
                                    var N = Y.offsetX,
                                        Q = Y.offsetY,
                                        tt = { width: 0, height: 0 };
                                    w.config.dataLabels.enabled && (tt = P.getTextRects(w.globals.yLabelFormatters[0](this.barCtx.series[n][o]), parseFloat(Y.style.fontSize)));
                                    var at = {
                                        x: e,
                                        y: i,
                                        i: n,
                                        j: o,
                                        realIndex: r,
                                        groupIndex: d || -1,
                                        renderedPath: C,
                                        bcx: f,
                                        bcy: v,
                                        barHeight: g,
                                        barWidth: u,
                                        textRects: tt,
                                        strokeWidth: l,
                                        dataLabelsX: L,
                                        dataLabelsY: k,
                                        dataLabelsConfig: Y,
                                        barDataLabelsConfig: D,
                                        barTotalDataLabelsConfig: O,
                                        offX: N,
                                        offY: Q,
                                    };
                                    return (
                                        (I = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(at) : this.calculateColumnsDataLabelsPosition(at)),
                                        C.attr({ cy: I.bcy, cx: I.bcx, j: o, val: c[n][o], barHeight: g, barWidth: u }),
                                        (S = this.drawCalculatedDataLabels({ x: I.dataLabelsX, y: I.dataLabelsY, val: this.barCtx.isRangeBar ? [a, s] : c[n][o], i: r, j: o, barWidth: u, barHeight: g, textRects: tt, dataLabelsConfig: Y })),
                                        w.config.chart.stacked &&
                                            O.enabled &&
                                            (M = this.drawTotalDataLabels({
                                                x: I.totalDataLabelsX,
                                                y: I.totalDataLabelsY,
                                                realIndex: r,
                                                textAnchor: I.totalDataLabelsAnchor,
                                                val: this.getStackedTotalDataLabel({ realIndex: r, j: o }),
                                                dataLabelsConfig: Y,
                                                barTotalDataLabelsConfig: O,
                                            })),
                                        { dataLabels: S, totalDataLabels: M }
                                    );
                                },
                            },
                            {
                                key: "getStackedTotalDataLabel",
                                value: function (t) {
                                    var e = t.realIndex,
                                        i = t.j,
                                        a = this.w,
                                        s = this.barCtx.stackedSeriesTotals[i];
                                    return this.totalFormatter && (s = this.totalFormatter(s, F(F({}, a), {}, { seriesIndex: e, dataPointIndex: i, w: a }))), s;
                                },
                            },
                            {
                                key: "calculateColumnsDataLabelsPosition",
                                value: function (t) {
                                    var e,
                                        i,
                                        a = this.w,
                                        s = t.i,
                                        n = t.j,
                                        o = t.realIndex,
                                        r = t.groupIndex,
                                        d = t.y,
                                        c = t.bcx,
                                        g = t.barWidth,
                                        u = t.barHeight,
                                        p = t.textRects,
                                        x = t.dataLabelsX,
                                        y = t.dataLabelsY,
                                        C = t.dataLabelsConfig,
                                        w = t.barDataLabelsConfig,
                                        P = t.barTotalDataLabelsConfig,
                                        l = t.strokeWidth,
                                        f = t.offX,
                                        v = t.offY;
                                    u = Math.abs(u);
                                    var S = "vertical" === a.config.plotOptions.bar.dataLabels.orientation;
                                    (c = c - l / 2 + (-1 !== r ? r * g : 0)),
                                        this.barCtx.isVerticalGroupedRangeBar ? (x += g / 2) : (x = a.globals.isXNumeric ? c - g / 2 + f : c - a.globals.gridWidth / a.globals.dataPoints + g / 2 + f),
                                        S && (x = x + p.height / 2 - l / 2 - 2);
                                    var L = this.barCtx.series[s][n] < 0,
                                        k = d;
                                    switch ((this.barCtx.isReversed && ((k = d - u + (L ? 2 * u : 0)), (d -= u)), w.position)) {
                                        case "center":
                                            y = S ? (L ? k + u / 2 + v : k + u / 2 - v) : L ? k - u / 2 + p.height / 2 + v : k + u / 2 + p.height / 2 - v;
                                            break;
                                        case "bottom":
                                            y = S ? (L ? k + u + v : k + u - v) : L ? k - u + p.height + l + v : k + u - p.height / 2 + l - v;
                                            break;
                                        case "top":
                                            y = S ? (L ? k + v : k - v) : L ? k - p.height / 2 - v : k + p.height + v;
                                    }
                                    if (this.barCtx.lastActiveBarSerieIndex === o && P.enabled) {
                                        var I = new E(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: o, j: n }), C.fontSize);
                                        (e = L ? k - I.height / 2 - v - P.offsetY + 18 : k + I.height + v + P.offsetY - 18), (i = x + P.offsetX);
                                    }
                                    return (
                                        a.config.chart.stacked || (y < 0 ? (y = 0 + l) : y + p.height / 3 > a.globals.gridHeight && (y = a.globals.gridHeight - l)),
                                        { bcx: c, bcy: d, dataLabelsX: x, dataLabelsY: y, totalDataLabelsX: i, totalDataLabelsY: e, totalDataLabelsAnchor: "middle" }
                                    );
                                },
                            },
                            {
                                key: "calculateBarsDataLabelsPosition",
                                value: function (t) {
                                    var e = this.w,
                                        i = t.x,
                                        a = t.i,
                                        s = t.j,
                                        n = t.realIndex,
                                        o = t.groupIndex,
                                        r = t.bcy,
                                        d = t.barHeight,
                                        c = t.barWidth,
                                        g = t.textRects,
                                        u = t.dataLabelsX,
                                        p = t.strokeWidth,
                                        x = t.dataLabelsConfig,
                                        y = t.barDataLabelsConfig,
                                        C = t.barTotalDataLabelsConfig,
                                        w = t.offX,
                                        P = t.offY,
                                        l = e.globals.gridHeight / e.globals.dataPoints;
                                    c = Math.abs(c);
                                    var f,
                                        v,
                                        S = (r += -1 !== o ? o * d : 0) - (this.barCtx.isRangeBar ? 0 : l) + d / 2 + g.height / 2 + P - 3,
                                        M = "start",
                                        L = this.barCtx.series[a][s] < 0,
                                        k = i;
                                    switch ((this.barCtx.isReversed && ((k = i + c - (L ? 2 * c : 0)), (i = e.globals.gridWidth - c)), y.position)) {
                                        case "center":
                                            u = L ? k + c / 2 - w : Math.max(g.width / 2, k - c / 2) + w;
                                            break;
                                        case "bottom":
                                            u = L ? k + c - p - Math.round(g.width / 2) - w : k - c + p + Math.round(g.width / 2) + w;
                                            break;
                                        case "top":
                                            u = L ? k - p + Math.round(g.width / 2) - w : k - p - Math.round(g.width / 2) + w;
                                    }
                                    if (this.barCtx.lastActiveBarSerieIndex === n && C.enabled) {
                                        var I = new E(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: n, j: s }), x.fontSize);
                                        L ? ((f = k - p + Math.round(I.width / 2) - w - C.offsetX - 15), (M = "end")) : (f = k - p - Math.round(I.width / 2) + w + C.offsetX + 15), (v = S + C.offsetY);
                                    }
                                    return (
                                        e.config.chart.stacked || (u < 0 ? (u = u + g.width + p) : u + g.width / 2 > e.globals.gridWidth && (u = e.globals.gridWidth - g.width - p)),
                                        { bcx: i, bcy: r, dataLabelsX: u, dataLabelsY: S, totalDataLabelsX: f, totalDataLabelsY: v, totalDataLabelsAnchor: M }
                                    );
                                },
                            },
                            {
                                key: "drawCalculatedDataLabels",
                                value: function (t) {
                                    var e = t.x,
                                        i = t.y,
                                        a = t.val,
                                        s = t.i,
                                        n = t.j,
                                        o = t.textRects,
                                        r = t.barHeight,
                                        d = t.barWidth,
                                        c = t.dataLabelsConfig,
                                        g = this.w,
                                        u = "rotate(0)";
                                    "vertical" === g.config.plotOptions.bar.dataLabels.orientation && (u = "rotate(-90, ".concat(e, ", ").concat(i, ")"));
                                    var p = new Mt(this.barCtx.ctx),
                                        x = new E(this.barCtx.ctx),
                                        y = c.formatter,
                                        C = null,
                                        w = g.globals.collapsedSeriesIndices.indexOf(s) > -1;
                                    if (c.enabled && !w) {
                                        C = x.group({ class: "apexcharts-data-labels", transform: u });
                                        var P = "";
                                        void 0 !== a && (P = y(a, F(F({}, g), {}, { seriesIndex: s, dataPointIndex: n, w: g }))), !a && g.config.plotOptions.bar.hideZeroBarsWhenGrouped && (P = "");
                                        var l = g.globals.series[s][n] < 0,
                                            f = g.config.plotOptions.bar.dataLabels.position;
                                        "vertical" === g.config.plotOptions.bar.dataLabels.orientation &&
                                            ("top" === f && (c.textAnchor = l ? "end" : "start"), "center" === f && (c.textAnchor = "middle"), "bottom" === f && (c.textAnchor = l ? "end" : "start")),
                                            this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && d < x.getTextRects(P, parseFloat(c.style.fontSize)).width && (P = ""),
                                            g.config.chart.stacked &&
                                                this.barCtx.barOptions.dataLabels.hideOverflowingLabels &&
                                                (this.barCtx.isHorizontal ? o.width / 1.6 > Math.abs(d) && (P = "") : o.height / 1.6 > Math.abs(r) && (P = ""));
                                        var v = F({}, c);
                                        this.barCtx.isHorizontal && a < 0 && ("start" === c.textAnchor ? (v.textAnchor = "end") : "end" === c.textAnchor && (v.textAnchor = "start")),
                                            p.plotDataLabelsText({ x: e, y: i, text: P, i: s, j: n, parent: C, dataLabelsConfig: v, alwaysDrawDataLabel: !0, offsetCorrection: !0 });
                                    }
                                    return C;
                                },
                            },
                            {
                                key: "drawTotalDataLabels",
                                value: function (t) {
                                    var e,
                                        i = t.x,
                                        a = t.y,
                                        s = t.val,
                                        n = t.realIndex,
                                        o = t.textAnchor,
                                        r = t.barTotalDataLabelsConfig,
                                        d = new E(this.barCtx.ctx);
                                    return (
                                        r.enabled &&
                                            void 0 !== i &&
                                            void 0 !== a &&
                                            this.barCtx.lastActiveBarSerieIndex === n &&
                                            (e = d.drawText({ x: i, y: a, foreColor: r.style.color, text: s, textAnchor: o, fontFamily: r.style.fontFamily, fontSize: r.style.fontSize, fontWeight: r.style.fontWeight })),
                                        e
                                    );
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Le = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.barCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "initVariables",
                                value: function (t) {
                                    var e = this.w;
                                    (this.barCtx.series = t), (this.barCtx.totalItems = 0), (this.barCtx.seriesLen = 0), (this.barCtx.visibleI = -1), (this.barCtx.visibleItems = 1);
                                    for (var i = 0; i < t.length; i++)
                                        if ((t[i].length > 0 && ((this.barCtx.seriesLen = this.barCtx.seriesLen + 1), (this.barCtx.totalItems += t[i].length)), e.globals.isXNumeric))
                                            for (var a = 0; a < t[i].length; a++) e.globals.seriesX[i][a] > e.globals.minX && e.globals.seriesX[i][a] < e.globals.maxX && this.barCtx.visibleItems++;
                                        else this.barCtx.visibleItems = e.globals.dataPoints;
                                    0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), (this.barCtx.zeroSerieses = []), e.globals.comboCharts || this.checkZeroSeries({ series: t });
                                },
                            },
                            {
                                key: "initialPositions",
                                value: function () {
                                    var t,
                                        e,
                                        i,
                                        a,
                                        s,
                                        n,
                                        o,
                                        r,
                                        d = this.w,
                                        c = d.globals.dataPoints;
                                    this.barCtx.isRangeBar && (c = d.globals.labels.length);
                                    var g = this.barCtx.seriesLen;
                                    if ((d.config.plotOptions.bar.rangeBarGroupRows && (g = 1), this.barCtx.isHorizontal))
                                        (s = (i = d.globals.gridHeight / c) / g),
                                            d.globals.isXNumeric && (s = (i = d.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen),
                                            (s = (s * parseInt(this.barCtx.barOptions.barHeight, 10)) / 100),
                                            -1 === String(this.barCtx.barOptions.barHeight).indexOf("%") && (s = parseInt(this.barCtx.barOptions.barHeight, 10)),
                                            (r = this.barCtx.baseLineInvertedY + d.globals.padHorizontal + (this.barCtx.isReversed ? d.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0)),
                                            this.barCtx.isFunnel && (r = d.globals.gridWidth / 2),
                                            (e = (i - s * this.barCtx.seriesLen) / 2);
                                    else {
                                        if (
                                            ((a = d.globals.gridWidth / this.barCtx.visibleItems),
                                            d.config.xaxis.convertedCatToNumeric && (a = d.globals.gridWidth / d.globals.dataPoints),
                                            (n = ((a / g) * parseInt(this.barCtx.barOptions.columnWidth, 10)) / 100),
                                            d.globals.isXNumeric)
                                        ) {
                                            var u = this.barCtx.xRatio;
                                            d.config.xaxis.convertedCatToNumeric && (u = this.barCtx.initialXRatio),
                                                d.globals.minXDiff && 0.5 !== d.globals.minXDiff && d.globals.minXDiff / u > 0 && (a = d.globals.minXDiff / u),
                                                (n = ((a / g) * parseInt(this.barCtx.barOptions.columnWidth, 10)) / 100) < 1 && (n = 1);
                                        }
                                        -1 === String(this.barCtx.barOptions.columnWidth).indexOf("%") && (n = parseInt(this.barCtx.barOptions.columnWidth, 10)),
                                            (o =
                                                d.globals.gridHeight -
                                                this.barCtx.baseLineY[this.barCtx.yaxisIndex] -
                                                (this.barCtx.isReversed ? d.globals.gridHeight : 0) +
                                                (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0)),
                                            (t = d.globals.padHorizontal + (a - n * this.barCtx.seriesLen) / 2);
                                    }
                                    return { x: t, y: e, yDivision: i, xDivision: a, barHeight: s, barWidth: n, zeroH: o, zeroW: r };
                                },
                            },
                            {
                                key: "initializeStackedPrevVars",
                                value: function (t) {
                                    var e = t.w;
                                    e.globals.hasSeriesGroups
                                        ? e.globals.seriesGroups.forEach(function (i) {
                                              t[i] || (t[i] = {}), (t[i].prevY = []), (t[i].prevX = []), (t[i].prevYF = []), (t[i].prevXF = []), (t[i].prevYVal = []), (t[i].prevXVal = []);
                                          })
                                        : ((t.prevY = []), (t.prevX = []), (t.prevYF = []), (t.prevXF = []), (t.prevYVal = []), (t.prevXVal = []));
                                },
                            },
                            {
                                key: "initializeStackedXYVars",
                                value: function (t) {
                                    var e = t.w;
                                    e.globals.hasSeriesGroups
                                        ? e.globals.seriesGroups.forEach(function (i) {
                                              t[i] || (t[i] = {}), (t[i].xArrj = []), (t[i].xArrjF = []), (t[i].xArrjVal = []), (t[i].yArrj = []), (t[i].yArrjF = []), (t[i].yArrjVal = []);
                                          })
                                        : ((t.xArrj = []), (t.xArrjF = []), (t.xArrjVal = []), (t.yArrj = []), (t.yArrjF = []), (t.yArrjVal = []));
                                },
                            },
                            {
                                key: "getPathFillColor",
                                value: function (t, e, i, a) {
                                    var s,
                                        n,
                                        o,
                                        r,
                                        d = this.w,
                                        c = new vt(this.barCtx.ctx),
                                        g = null,
                                        u = this.barCtx.barOptions.distributed ? i : e;
                                    return (
                                        this.barCtx.barOptions.colors.ranges.length > 0 &&
                                            this.barCtx.barOptions.colors.ranges.map(function (p) {
                                                t[e][i] >= p.from && t[e][i] <= p.to && (g = p.color);
                                            }),
                                        d.config.series[e].data[i] && d.config.series[e].data[i].fillColor && (g = d.config.series[e].data[i].fillColor),
                                        c.fillPath({
                                            seriesNumber: this.barCtx.barOptions.distributed ? u : a,
                                            dataPointIndex: i,
                                            color: g,
                                            value: t[e][i],
                                            fillConfig: null === (s = d.config.series[e].data[i]) || void 0 === s ? void 0 : s.fill,
                                            fillType:
                                                null !== (n = d.config.series[e].data[i]) && void 0 !== n && null !== (o = n.fill) && void 0 !== o && o.type
                                                    ? null === (r = d.config.series[e].data[i]) || void 0 === r
                                                        ? void 0
                                                        : r.fill.type
                                                    : d.config.fill.type,
                                        })
                                    );
                                },
                            },
                            {
                                key: "getStrokeWidth",
                                value: function (t, e, i) {
                                    var a = 0,
                                        s = this.w;
                                    return (
                                        (this.barCtx.isNullValue = !this.barCtx.series[t][e]),
                                        s.config.stroke.show && (this.barCtx.isNullValue || (a = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i] : this.barCtx.strokeWidth)),
                                        a
                                    );
                                },
                            },
                            {
                                key: "shouldApplyRadius",
                                value: function (t) {
                                    var e = this.w,
                                        i = !1;
                                    return (
                                        e.config.plotOptions.bar.borderRadius > 0 && (e.config.chart.stacked && "last" === e.config.plotOptions.bar.borderRadiusWhenStacked ? this.barCtx.lastActiveBarSerieIndex === t && (i = !0) : (i = !0)),
                                        i
                                    );
                                },
                            },
                            {
                                key: "barBackground",
                                value: function (t) {
                                    var e = t.j,
                                        i = t.i,
                                        a = t.x1,
                                        s = t.x2,
                                        n = t.y1,
                                        o = t.y2,
                                        r = t.elSeries,
                                        d = this.w,
                                        c = new E(this.barCtx.ctx),
                                        g = new bt(this.barCtx.ctx).getActiveConfigSeriesIndex();
                                    if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && g === i) {
                                        e >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e %= this.barCtx.barOptions.colors.backgroundBarColors.length);
                                        var p = c.drawRect(
                                            void 0 !== a ? a : 0,
                                            void 0 !== n ? n : 0,
                                            void 0 !== s ? s : d.globals.gridWidth,
                                            void 0 !== o ? o : d.globals.gridHeight,
                                            this.barCtx.barOptions.colors.backgroundBarRadius,
                                            this.barCtx.barOptions.colors.backgroundBarColors[e],
                                            this.barCtx.barOptions.colors.backgroundBarOpacity
                                        );
                                        r.add(p), p.node.classList.add("apexcharts-backgroundBar");
                                    }
                                },
                            },
                            {
                                key: "getColumnPaths",
                                value: function (t) {
                                    var e,
                                        i = t.barWidth,
                                        a = t.barXPosition,
                                        s = t.y1,
                                        n = t.y2,
                                        o = t.strokeWidth,
                                        r = t.seriesGroup,
                                        d = t.realIndex,
                                        c = t.i,
                                        g = t.j,
                                        u = t.w,
                                        p = new E(this.barCtx.ctx);
                                    (o = Array.isArray(o) ? o[d] : o) || (o = 0);
                                    var x = i,
                                        y = a;
                                    null !== (e = u.config.series[d].data[g]) && void 0 !== e && e.columnWidthOffset && ((y = a - u.config.series[d].data[g].columnWidthOffset / 2), (x = i + u.config.series[d].data[g].columnWidthOffset));
                                    var C = y,
                                        w = y + x;
                                    n += 0.001;
                                    var P = p.move(C, (s += 0.001)),
                                        l = p.move(C, s),
                                        f = p.line(w - o, s);
                                    if (
                                        (u.globals.previousPaths.length > 0 && (l = this.barCtx.getPreviousPath(d, g, !1)),
                                        (P = P + p.line(C, n) + p.line(w - o, n) + p.line(w - o, s) + ("around" === u.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z")),
                                        (l = l + p.line(C, s) + f + f + f + f + f + p.line(C, s) + ("around" === u.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z")),
                                        this.shouldApplyRadius(d) && (P = p.roundPathCorners(P, u.config.plotOptions.bar.borderRadius)),
                                        u.config.chart.stacked)
                                    ) {
                                        var v = this.barCtx;
                                        u.globals.hasSeriesGroups && r && (v = this.barCtx[r]), v.yArrj.push(n), v.yArrjF.push(Math.abs(s - n)), v.yArrjVal.push(this.barCtx.series[c][g]);
                                    }
                                    return { pathTo: P, pathFrom: l };
                                },
                            },
                            {
                                key: "getBarpaths",
                                value: function (t) {
                                    var e,
                                        i = t.barYPosition,
                                        a = t.barHeight,
                                        s = t.x1,
                                        n = t.x2,
                                        o = t.strokeWidth,
                                        r = t.seriesGroup,
                                        d = t.realIndex,
                                        c = t.i,
                                        g = t.j,
                                        u = t.w,
                                        p = new E(this.barCtx.ctx);
                                    (o = Array.isArray(o) ? o[d] : o) || (o = 0);
                                    var x = i,
                                        y = a;
                                    null !== (e = u.config.series[d].data[g]) && void 0 !== e && e.barHeightOffset && ((x = i - u.config.series[d].data[g].barHeightOffset / 2), (y = a + u.config.series[d].data[g].barHeightOffset));
                                    var C = x,
                                        w = x + y;
                                    n += 0.001;
                                    var P = p.move((s += 0.001), C),
                                        l = p.move(s, C);
                                    u.globals.previousPaths.length > 0 && (l = this.barCtx.getPreviousPath(d, g, !1));
                                    var f = p.line(s, w - o);
                                    if (
                                        ((P = P + p.line(n, C) + p.line(n, w - o) + f + ("around" === u.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z")),
                                        (l = l + p.line(s, C) + f + f + f + f + f + p.line(s, C) + ("around" === u.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z")),
                                        this.shouldApplyRadius(d) && (P = p.roundPathCorners(P, u.config.plotOptions.bar.borderRadius)),
                                        u.config.chart.stacked)
                                    ) {
                                        var v = this.barCtx;
                                        u.globals.hasSeriesGroups && r && (v = this.barCtx[r]), v.xArrj.push(n), v.xArrjF.push(Math.abs(s - n)), v.xArrjVal.push(this.barCtx.series[c][g]);
                                    }
                                    return { pathTo: P, pathFrom: l };
                                },
                            },
                            {
                                key: "checkZeroSeries",
                                value: function (t) {
                                    for (var e = t.series, i = this.w, a = 0; a < e.length; a++) {
                                        for (var s = 0, n = 0; n < e[i.globals.maxValsInArrayIndex].length; n++) s += e[a][n];
                                        0 === s && this.barCtx.zeroSerieses.push(a);
                                    }
                                },
                            },
                            {
                                key: "getXForValue",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] && !arguments[2] ? null : e;
                                    return null != t && (i = e + t / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t / this.barCtx.invertedYRatio : 0)), i;
                                },
                            },
                            {
                                key: "getYForValue",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] && !arguments[2] ? null : e;
                                    return null != t && (i = e - t / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), i;
                                },
                            },
                            {
                                key: "getGoalValues",
                                value: function (t, e, i, a, s) {
                                    var n = this,
                                        o = this.w,
                                        r = [],
                                        d = function (u, p) {
                                            var x;
                                            r.push((q((x = {}), t, "x" === t ? n.getXForValue(u, e, !1) : n.getYForValue(u, i, !1)), q(x, "attrs", p), x));
                                        };
                                    if (
                                        (o.globals.seriesGoals[a] &&
                                            o.globals.seriesGoals[a][s] &&
                                            Array.isArray(o.globals.seriesGoals[a][s]) &&
                                            o.globals.seriesGoals[a][s].forEach(function (u) {
                                                d(u.value, u);
                                            }),
                                        this.barCtx.barOptions.isDumbbell && o.globals.seriesRange.length)
                                    ) {
                                        var c = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : o.globals.colors,
                                            g = {
                                                strokeHeight: "x" === t ? 0 : o.globals.markers.size[a],
                                                strokeWidth: "x" === t ? o.globals.markers.size[a] : 0,
                                                strokeDashArray: 0,
                                                strokeLineCap: "round",
                                                strokeColor: Array.isArray(c[a]) ? c[a][0] : c[a],
                                            };
                                        d(o.globals.seriesRangeStart[a][s], g), d(o.globals.seriesRangeEnd[a][s], F(F({}, g), {}, { strokeColor: Array.isArray(c[a]) ? c[a][1] : c[a] }));
                                    }
                                    return r;
                                },
                            },
                            {
                                key: "drawGoalLine",
                                value: function (t) {
                                    var e = t.barXPosition,
                                        i = t.barYPosition,
                                        a = t.goalX,
                                        s = t.goalY,
                                        n = t.barWidth,
                                        o = t.barHeight,
                                        r = new E(this.barCtx.ctx),
                                        d = r.group({ className: "apexcharts-bar-goals-groups" });
                                    d.node.classList.add("apexcharts-element-hidden"), this.barCtx.w.globals.delayedElements.push({ el: d.node }), d.attr("clip-path", "url(#gridRectMarkerMask".concat(this.barCtx.w.globals.cuid, ")"));
                                    var c = null;
                                    return (
                                        this.barCtx.isHorizontal
                                            ? Array.isArray(a) &&
                                              a.forEach(function (g) {
                                                  var u = void 0 !== g.attrs.strokeHeight ? g.attrs.strokeHeight : o / 2,
                                                      p = i + u + o / 2;
                                                  (c = r.drawLine(g.x, p - 2 * u, g.x, p, g.attrs.strokeColor ? g.attrs.strokeColor : void 0, g.attrs.strokeDashArray, g.attrs.strokeWidth ? g.attrs.strokeWidth : 2, g.attrs.strokeLineCap)),
                                                      d.add(c);
                                              })
                                            : Array.isArray(s) &&
                                              s.forEach(function (g) {
                                                  var u = void 0 !== g.attrs.strokeWidth ? g.attrs.strokeWidth : n / 2,
                                                      p = e + u + n / 2;
                                                  (c = r.drawLine(p - 2 * u, g.y, p, g.y, g.attrs.strokeColor ? g.attrs.strokeColor : void 0, g.attrs.strokeDashArray, g.attrs.strokeHeight ? g.attrs.strokeHeight : 2, g.attrs.strokeLineCap)),
                                                      d.add(c);
                                              }),
                                        d
                                    );
                                },
                            },
                            {
                                key: "drawBarShadow",
                                value: function (t) {
                                    var e = t.prevPaths,
                                        i = t.currPaths,
                                        a = t.color,
                                        s = this.w,
                                        n = e.x,
                                        o = e.x1,
                                        d = i.x,
                                        c = i.x1,
                                        g = i.barYPosition,
                                        u = e.barYPosition + i.barHeight,
                                        p = new E(this.barCtx.ctx),
                                        x = new z(),
                                        y = p.move(o, u) + p.line(n, u) + p.line(d, g) + p.line(c, g) + p.line(o, u) + ("around" === s.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z");
                                    return p.drawPath({ d: y, fill: x.shadeColor(0.5, z.rgb2hex(a)), stroke: "none", strokeWidth: 0, fillOpacity: 1, classes: "apexcharts-bar-shadows" });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Tt = (function () {
                    function A(t, e) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                        var i = this.w;
                        (this.barOptions = i.config.plotOptions.bar),
                            (this.isHorizontal = this.barOptions.horizontal),
                            (this.strokeWidth = i.config.stroke.width),
                            (this.isNullValue = !1),
                            (this.isRangeBar = i.globals.seriesRange.length && this.isHorizontal),
                            (this.isVerticalGroupedRangeBar = !i.globals.isBarHorizontal && i.globals.seriesRange.length && i.config.plotOptions.bar.rangeBarGroupRows),
                            (this.isFunnel = this.barOptions.isFunnel),
                            (this.xyRatios = e),
                            null !== this.xyRatios &&
                                ((this.xRatio = e.xRatio),
                                (this.initialXRatio = e.initialXRatio),
                                (this.yRatio = e.yRatio),
                                (this.invertedXRatio = e.invertedXRatio),
                                (this.invertedYRatio = e.invertedYRatio),
                                (this.baseLineY = e.baseLineY),
                                (this.baseLineInvertedY = e.baseLineInvertedY)),
                            (this.yaxisIndex = 0),
                            (this.seriesLen = 0),
                            (this.pathArr = []);
                        var a = new bt(this.ctx);
                        this.lastActiveBarSerieIndex = a.getActiveConfigSeriesIndex("desc", ["bar", "column"]);
                        var s = a.getBarSeriesIndices(),
                            n = new $(this.ctx);
                        (this.stackedSeriesTotals = n.getStackedSeriesTotals(
                            this.w.config.series
                                .map(function (o, r) {
                                    return -1 === s.indexOf(r) ? r : -1;
                                })
                                .filter(function (o) {
                                    return -1 !== o;
                                })
                        )),
                            (this.barHelpers = new Le(this));
                    }
                    return (
                        m(A, [
                            {
                                key: "draw",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = new E(this.ctx),
                                        s = new $(this.ctx, i);
                                    (t = s.getLogSeries(t)), (this.series = t), (this.yRatio = s.getLogYRatios(this.yRatio)), this.barHelpers.initVariables(t);
                                    var n = a.group({ class: "apexcharts-bar-series apexcharts-plot-series" });
                                    i.config.dataLabels.enabled &&
                                        this.totalItems > this.barOptions.dataLabels.maxItems &&
                                        console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");
                                    for (var o = 0, r = 0; o < t.length; o++, r++) {
                                        var d,
                                            c,
                                            g,
                                            u,
                                            p = void 0,
                                            x = void 0,
                                            y = [],
                                            C = [],
                                            w = i.globals.comboCharts ? e[o] : o,
                                            P = a.group({ class: "apexcharts-series", rel: o + 1, seriesName: z.escapeString(i.globals.seriesNames[w]), "data:realIndex": w });
                                        this.ctx.series.addCollapsedClassToSeries(P, w), t[o].length > 0 && (this.visibleI = this.visibleI + 1);
                                        var l = 0,
                                            f = 0;
                                        this.yRatio.length > 1 && (this.yaxisIndex = w), (this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed);
                                        var v = this.barHelpers.initialPositions();
                                        (x = v.y), (l = v.barHeight), (c = v.yDivision), (u = v.zeroW), (p = v.x), (f = v.barWidth), (d = v.xDivision), (g = v.zeroH), this.horizontal || C.push(p + f / 2);
                                        var S = a.group({ class: "apexcharts-datalabels", "data:realIndex": w });
                                        i.globals.delayedElements.push({ el: S.node }), S.node.classList.add("apexcharts-element-hidden");
                                        var M = a.group({ class: "apexcharts-bar-goals-markers" }),
                                            L = a.group({ class: "apexcharts-bar-shadows" });
                                        i.globals.delayedElements.push({ el: L.node }), L.node.classList.add("apexcharts-element-hidden");
                                        for (var k = 0; k < i.globals.dataPoints; k++) {
                                            var I = this.barHelpers.getStrokeWidth(o, k, w),
                                                Y = null,
                                                D = { indexes: { i: o, j: k, realIndex: w, bc: r }, x: p, y: x, strokeWidth: I, elSeries: P };
                                            this.isHorizontal
                                                ? ((Y = this.drawBarPaths(F(F({}, D), {}, { barHeight: l, zeroW: u, yDivision: c }))), (f = this.series[o][k] / this.invertedYRatio))
                                                : ((Y = this.drawColumnPaths(F(F({}, D), {}, { xDivision: d, barWidth: f, zeroH: g }))), (l = this.series[o][k] / this.yRatio[this.yaxisIndex]));
                                            var O = this.barHelpers.getPathFillColor(t, o, k, w);
                                            if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && k > 0) {
                                                var N = this.barHelpers.drawBarShadow({
                                                    color: "string" == typeof O && -1 === (null == O ? void 0 : O.indexOf("url")) ? O : z.hexToRgba(i.globals.colors[o]),
                                                    prevPaths: this.pathArr[this.pathArr.length - 1],
                                                    currPaths: Y,
                                                });
                                                N && L.add(N);
                                            }
                                            this.pathArr.push(Y);
                                            var Q = this.barHelpers.drawGoalLine({ barXPosition: Y.barXPosition, barYPosition: Y.barYPosition, goalX: Y.goalX, goalY: Y.goalY, barHeight: l, barWidth: f });
                                            Q && M.add(Q),
                                                (x = Y.y),
                                                (p = Y.x),
                                                k > 0 && C.push(p + f / 2),
                                                y.push(x),
                                                this.renderSeries({
                                                    realIndex: w,
                                                    pathFill: O,
                                                    j: k,
                                                    i: o,
                                                    pathFrom: Y.pathFrom,
                                                    pathTo: Y.pathTo,
                                                    strokeWidth: I,
                                                    elSeries: P,
                                                    x: p,
                                                    y: x,
                                                    series: t,
                                                    barHeight: Y.barHeight ? Y.barHeight : l,
                                                    barWidth: Y.barWidth ? Y.barWidth : f,
                                                    elDataLabelsWrap: S,
                                                    elGoalsMarkers: M,
                                                    elBarShadows: L,
                                                    visibleSeries: this.visibleI,
                                                    type: "bar",
                                                });
                                        }
                                        (i.globals.seriesXvalues[w] = C), (i.globals.seriesYvalues[w] = y), n.add(P);
                                    }
                                    return n;
                                },
                            },
                            {
                                key: "renderSeries",
                                value: function (t) {
                                    var e = t.realIndex,
                                        i = t.pathFill,
                                        a = t.lineFill,
                                        s = t.j,
                                        n = t.i,
                                        o = t.groupIndex,
                                        r = t.pathFrom,
                                        d = t.pathTo,
                                        c = t.strokeWidth,
                                        g = t.elSeries,
                                        u = t.x,
                                        p = t.y,
                                        x = t.y1,
                                        y = t.y2,
                                        C = t.series,
                                        w = t.barHeight,
                                        P = t.barWidth,
                                        l = t.barXPosition,
                                        f = t.barYPosition,
                                        v = t.elDataLabelsWrap,
                                        S = t.elGoalsMarkers,
                                        M = t.elBarShadows,
                                        L = t.visibleSeries,
                                        k = t.type,
                                        I = this.w,
                                        Y = new E(this.ctx);
                                    a || (a = this.barOptions.distributed ? I.globals.stroke.colors[s] : I.globals.stroke.colors[e]),
                                        I.config.series[n].data[s] && I.config.series[n].data[s].strokeColor && (a = I.config.series[n].data[s].strokeColor),
                                        this.isNullValue && (i = "none");
                                    var O = Y.renderPaths({
                                        i: n,
                                        j: s,
                                        realIndex: e,
                                        pathFrom: r,
                                        pathTo: d,
                                        stroke: a,
                                        strokeWidth: c,
                                        strokeLineCap: I.config.stroke.lineCap,
                                        fill: i,
                                        animationDelay: ((s / I.config.chart.animations.animateGradually.delay) * (I.config.chart.animations.speed / I.globals.dataPoints)) / 2.4,
                                        initialSpeed: I.config.chart.animations.speed,
                                        dataChangeSpeed: I.config.chart.animations.dynamicAnimation.speed,
                                        className: "apexcharts-".concat(k, "-area"),
                                    });
                                    O.attr("clip-path", "url(#gridRectMask".concat(I.globals.cuid, ")"));
                                    var N = I.config.forecastDataPoints;
                                    N.count > 0 &&
                                        s >= I.globals.dataPoints - N.count &&
                                        (O.node.setAttribute("stroke-dasharray", N.dashArray), O.node.setAttribute("stroke-width", N.strokeWidth), O.node.setAttribute("fill-opacity", N.fillOpacity)),
                                        void 0 !== x && void 0 !== y && (O.attr("data-range-y1", x), O.attr("data-range-y2", y)),
                                        new H(this.ctx).setSelectionFilter(O, e, s),
                                        g.add(O);
                                    var Q = new Me(this).handleBarDataLabels({
                                        x: u,
                                        y: p,
                                        y1: x,
                                        y2: y,
                                        i: n,
                                        j: s,
                                        series: C,
                                        realIndex: e,
                                        groupIndex: o,
                                        barHeight: w,
                                        barWidth: P,
                                        barXPosition: l,
                                        barYPosition: f,
                                        renderedPath: O,
                                        visibleSeries: L,
                                    });
                                    return null !== Q.dataLabels && v.add(Q.dataLabels), Q.totalDataLabels && v.add(Q.totalDataLabels), g.add(v), S && g.add(S), M && g.add(M), g;
                                },
                            },
                            {
                                key: "drawBarPaths",
                                value: function (t) {
                                    var e,
                                        o,
                                        i = t.indexes,
                                        a = t.barHeight,
                                        s = t.strokeWidth,
                                        n = t.zeroW,
                                        r = t.y,
                                        d = t.yDivision,
                                        c = t.elSeries,
                                        g = this.w,
                                        u = i.i,
                                        p = i.j;
                                    if (g.globals.isXNumeric) e = (r = (g.globals.seriesX[u][p] - g.globals.minX) / this.invertedXRatio - a) + a * this.visibleI;
                                    else if (g.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
                                        var x = 0,
                                            y = 0;
                                        g.globals.seriesPercent.forEach(function (w, P) {
                                            w[p] && x++, P < u && 0 === w[p] && y++;
                                        }),
                                            x > 0 && (a = (this.seriesLen * a) / x),
                                            (e = r + a * this.visibleI),
                                            (e -= a * y);
                                    } else e = r + a * this.visibleI;
                                    this.isFunnel && (n -= (this.barHelpers.getXForValue(this.series[u][p], n) - n) / 2), (o = this.barHelpers.getXForValue(this.series[u][p], n));
                                    var C = this.barHelpers.getBarpaths({ barYPosition: e, barHeight: a, x1: n, x2: o, strokeWidth: s, series: this.series, realIndex: i.realIndex, i: u, j: p, w: g });
                                    return (
                                        g.globals.isXNumeric || (r += d),
                                        this.barHelpers.barBackground({ j: p, i: u, y1: e - a * this.visibleI, y2: a * this.seriesLen, elSeries: c }),
                                        { pathTo: C.pathTo, pathFrom: C.pathFrom, x1: n, x: o, y: r, goalX: this.barHelpers.getGoalValues("x", n, null, u, p), barYPosition: e, barHeight: a }
                                    );
                                },
                            },
                            {
                                key: "drawColumnPaths",
                                value: function (t) {
                                    var e,
                                        s,
                                        i = t.indexes,
                                        a = t.x,
                                        n = t.xDivision,
                                        o = t.barWidth,
                                        r = t.zeroH,
                                        d = t.strokeWidth,
                                        c = t.elSeries,
                                        g = this.w,
                                        u = i.realIndex,
                                        p = i.i,
                                        x = i.j,
                                        y = i.bc;
                                    if (g.globals.isXNumeric) {
                                        var C = u;
                                        g.globals.seriesX[u].length || (C = g.globals.maxValsInArrayIndex),
                                            g.globals.seriesX[C][x] && (a = (g.globals.seriesX[C][x] - g.globals.minX) / this.xRatio - (o * this.seriesLen) / 2),
                                            (e = a + o * this.visibleI);
                                    } else if (g.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
                                        var w = 0,
                                            P = 0;
                                        g.globals.seriesPercent.forEach(function (f, v) {
                                            f[x] && w++, v < p && 0 === f[x] && P++;
                                        }),
                                            w > 0 && (o = (this.seriesLen * o) / w),
                                            (e = a + o * this.visibleI),
                                            (e -= o * P);
                                    } else e = a + o * this.visibleI;
                                    s = this.barHelpers.getYForValue(this.series[p][x], r);
                                    var l = this.barHelpers.getColumnPaths({ barXPosition: e, barWidth: o, y1: r, y2: s, strokeWidth: d, series: this.series, realIndex: i.realIndex, i: p, j: x, w: g });
                                    return (
                                        g.globals.isXNumeric || (a += n),
                                        this.barHelpers.barBackground({ bc: y, j: x, i: p, x1: e - d / 2 - o * this.visibleI, x2: o * this.seriesLen + d / 2, elSeries: c }),
                                        { pathTo: l.pathTo, pathFrom: l.pathFrom, x: a, y: s, goalY: this.barHelpers.getGoalValues("y", null, r, p, x), barXPosition: e, barWidth: o }
                                    );
                                },
                            },
                            {
                                key: "getPreviousPath",
                                value: function (t, e) {
                                    for (var i, a = this.w, s = 0; s < a.globals.previousPaths.length; s++) {
                                        var n = a.globals.previousPaths[s];
                                        n.paths && n.paths.length > 0 && parseInt(n.realIndex, 10) === parseInt(t, 10) && void 0 !== a.globals.previousPaths[s].paths[e] && (i = a.globals.previousPaths[s].paths[e].d);
                                    }
                                    return i;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ne = (function (A) {
                    st(e, Tt);
                    var t = V(e);
                    function e() {
                        return B(this, e), t.apply(this, arguments);
                    }
                    return (
                        m(e, [
                            {
                                key: "draw",
                                value: function (i, a) {
                                    var s = this,
                                        n = this.w;
                                    (this.graphics = new E(this.ctx)), (this.bar = new Tt(this.ctx, this.xyRatios));
                                    var o = new $(this.ctx, n);
                                    (i = o.getLogSeries(i)),
                                        (this.yRatio = o.getLogYRatios(this.yRatio)),
                                        this.barHelpers.initVariables(i),
                                        "100%" === n.config.chart.stackType && (i = n.globals.seriesPercent.slice()),
                                        (this.series = i),
                                        this.barHelpers.initializeStackedPrevVars(this);
                                    for (
                                        var r = this.graphics.group({ class: "apexcharts-bar-series apexcharts-plot-series" }),
                                            d = 0,
                                            c = 0,
                                            g = function (x, y) {
                                                var C = void 0,
                                                    w = void 0,
                                                    P = void 0,
                                                    l = void 0,
                                                    f = -1;
                                                (s.groupCtx = s),
                                                    n.globals.seriesGroups.forEach(function (ht, ft) {
                                                        ht.indexOf(n.config.series[x].name) > -1 && (f = ft);
                                                    }),
                                                    -1 !== f && (s.groupCtx = s[n.globals.seriesGroups[f]]);
                                                var v = [],
                                                    S = [],
                                                    M = n.globals.comboCharts ? a[x] : x;
                                                s.yRatio.length > 1 && (s.yaxisIndex = M), (s.isReversed = n.config.yaxis[s.yaxisIndex] && n.config.yaxis[s.yaxisIndex].reversed);
                                                var L = s.graphics.group({ class: "apexcharts-series", seriesName: z.escapeString(n.globals.seriesNames[M]), rel: x + 1, "data:realIndex": M });
                                                s.ctx.series.addCollapsedClassToSeries(L, M);
                                                var k = s.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": M }),
                                                    I = s.graphics.group({ class: "apexcharts-bar-goals-markers" }),
                                                    Y = 0,
                                                    D = 0,
                                                    O = s.initialPositions(d, c, C, w, P, l);
                                                (c = O.y),
                                                    (Y = O.barHeight),
                                                    (w = O.yDivision),
                                                    (l = O.zeroW),
                                                    (d = O.x),
                                                    (D = O.barWidth),
                                                    (C = O.xDivision),
                                                    (P = O.zeroH),
                                                    s.barHelpers.initializeStackedXYVars(s),
                                                    1 === s.groupCtx.prevY.length &&
                                                        s.groupCtx.prevY[0].every(function (ht) {
                                                            return isNaN(ht);
                                                        }) &&
                                                        ((s.groupCtx.prevY[0] = s.groupCtx.prevY[0].map(function (ht) {
                                                            return P;
                                                        })),
                                                        (s.groupCtx.prevYF[0] = s.groupCtx.prevYF[0].map(function (ht) {
                                                            return 0;
                                                        })));
                                                for (var N = 0; N < n.globals.dataPoints; N++) {
                                                    var Q = s.barHelpers.getStrokeWidth(x, N, M),
                                                        tt = { indexes: { i: x, j: N, realIndex: M, bc: y }, strokeWidth: Q, x: d, y: c, elSeries: L, groupIndex: f, seriesGroup: n.globals.seriesGroups[f] },
                                                        et = null;
                                                    s.isHorizontal
                                                        ? ((et = s.drawStackedBarPaths(F(F({}, tt), {}, { zeroW: l, barHeight: Y, yDivision: w }))), (D = s.series[x][N] / s.invertedYRatio))
                                                        : ((et = s.drawStackedColumnPaths(F(F({}, tt), {}, { xDivision: C, barWidth: D, zeroH: P }))), (Y = s.series[x][N] / s.yRatio[s.yaxisIndex]));
                                                    var at = s.barHelpers.drawGoalLine({ barXPosition: et.barXPosition, barYPosition: et.barYPosition, goalX: et.goalX, goalY: et.goalY, barHeight: Y, barWidth: D });
                                                    at && I.add(at), (c = et.y), v.push((d = et.x)), S.push(c);
                                                    var ct = s.barHelpers.getPathFillColor(i, x, N, M);
                                                    L = s.renderSeries({
                                                        realIndex: M,
                                                        pathFill: ct,
                                                        j: N,
                                                        i: x,
                                                        groupIndex: f,
                                                        pathFrom: et.pathFrom,
                                                        pathTo: et.pathTo,
                                                        strokeWidth: Q,
                                                        elSeries: L,
                                                        x: d,
                                                        y: c,
                                                        series: i,
                                                        barHeight: Y,
                                                        barWidth: D,
                                                        elDataLabelsWrap: k,
                                                        elGoalsMarkers: I,
                                                        type: "bar",
                                                        visibleSeries: 0,
                                                    });
                                                }
                                                (n.globals.seriesXvalues[M] = v),
                                                    (n.globals.seriesYvalues[M] = S),
                                                    s.groupCtx.prevY.push(s.groupCtx.yArrj),
                                                    s.groupCtx.prevYF.push(s.groupCtx.yArrjF),
                                                    s.groupCtx.prevYVal.push(s.groupCtx.yArrjVal),
                                                    s.groupCtx.prevX.push(s.groupCtx.xArrj),
                                                    s.groupCtx.prevXF.push(s.groupCtx.xArrjF),
                                                    s.groupCtx.prevXVal.push(s.groupCtx.xArrjVal),
                                                    r.add(L);
                                            },
                                            u = 0,
                                            p = 0;
                                        u < i.length;
                                        u++, p++
                                    )
                                        g(u, p);
                                    return r;
                                },
                            },
                            {
                                key: "initialPositions",
                                value: function (i, a, s, n, o, r) {
                                    var d,
                                        c,
                                        g,
                                        u,
                                        p = this.w;
                                    return (
                                        this.isHorizontal
                                            ? ((g = ((g = n = p.globals.gridHeight / p.globals.dataPoints) * parseInt(p.config.plotOptions.bar.barHeight, 10)) / 100),
                                              -1 === String(p.config.plotOptions.bar.barHeight).indexOf("%") && (g = parseInt(p.config.plotOptions.bar.barHeight, 10)),
                                              (r = this.baseLineInvertedY + p.globals.padHorizontal + (this.isReversed ? p.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0)),
                                              (a = (n - g) / 2))
                                            : ((u = s = p.globals.gridWidth / p.globals.dataPoints),
                                              (u =
                                                  p.globals.isXNumeric && p.globals.dataPoints > 1
                                                      ? ((s = p.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10)) / 100
                                                      : (u * parseInt(p.config.plotOptions.bar.columnWidth, 10)) / 100),
                                              -1 === String(p.config.plotOptions.bar.columnWidth).indexOf("%") && (u = parseInt(p.config.plotOptions.bar.columnWidth, 10)),
                                              (o = p.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? p.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0)),
                                              (i = p.globals.padHorizontal + (s - u) / 2)),
                                        {
                                            x: i,
                                            y: a,
                                            yDivision: n,
                                            xDivision: s,
                                            barHeight: null !== (d = p.globals.seriesGroups) && void 0 !== d && d.length ? g / p.globals.seriesGroups.length : g,
                                            barWidth: null !== (c = p.globals.seriesGroups) && void 0 !== c && c.length ? u / p.globals.seriesGroups.length : u,
                                            zeroH: o,
                                            zeroW: r,
                                        }
                                    );
                                },
                            },
                            {
                                key: "drawStackedBarPaths",
                                value: function (i) {
                                    for (
                                        var a,
                                            d,
                                            s = i.indexes,
                                            n = i.barHeight,
                                            o = i.strokeWidth,
                                            r = i.zeroW,
                                            c = i.y,
                                            g = i.groupIndex,
                                            u = i.seriesGroup,
                                            p = i.yDivision,
                                            x = i.elSeries,
                                            y = this.w,
                                            C = c + (-1 !== g ? g * n : 0),
                                            w = s.i,
                                            P = s.j,
                                            l = 0,
                                            f = 0;
                                        f < this.groupCtx.prevXF.length;
                                        f++
                                    )
                                        l += this.groupCtx.prevXF[f][P];
                                    var v = w;
                                    if ((u && (v = u.indexOf(y.config.series[w].name)), v > 0)) {
                                        var S = r;
                                        this.groupCtx.prevXVal[v - 1][P] < 0
                                            ? (S = this.series[w][P] >= 0 ? this.groupCtx.prevX[v - 1][P] + l - 2 * (this.isReversed ? l : 0) : this.groupCtx.prevX[v - 1][P])
                                            : this.groupCtx.prevXVal[v - 1][P] >= 0 && (S = this.series[w][P] >= 0 ? this.groupCtx.prevX[v - 1][P] : this.groupCtx.prevX[v - 1][P] - l + 2 * (this.isReversed ? l : 0)),
                                            (a = S);
                                    } else a = r;
                                    var M = this.barHelpers.getBarpaths({
                                        barYPosition: C,
                                        barHeight: n,
                                        x1: a,
                                        x2: (d = null === this.series[w][P] ? a : a + this.series[w][P] / this.invertedYRatio - 2 * (this.isReversed ? this.series[w][P] / this.invertedYRatio : 0)),
                                        strokeWidth: o,
                                        series: this.series,
                                        realIndex: s.realIndex,
                                        seriesGroup: u,
                                        i: w,
                                        j: P,
                                        w: y,
                                    });
                                    return (
                                        this.barHelpers.barBackground({ j: P, i: w, y1: C, y2: n, elSeries: x }),
                                        (c += p),
                                        { pathTo: M.pathTo, pathFrom: M.pathFrom, goalX: this.barHelpers.getGoalValues("x", r, null, w, P), barYPosition: C, x: d, y: c }
                                    );
                                },
                            },
                            {
                                key: "drawStackedColumnPaths",
                                value: function (i) {
                                    var n,
                                        a = i.indexes,
                                        s = i.x,
                                        o = i.xDivision,
                                        r = i.barWidth,
                                        d = i.zeroH,
                                        c = i.groupIndex,
                                        g = i.seriesGroup,
                                        u = i.elSeries,
                                        p = this.w,
                                        x = a.i,
                                        y = a.j,
                                        C = a.bc;
                                    if (p.globals.isXNumeric) {
                                        var w = p.globals.seriesX[x][y];
                                        w || (w = 0), (s = (w - p.globals.minX) / this.xRatio - r / 2), p.globals.seriesGroups.length && (s = (w - p.globals.minX) / this.xRatio - (r / 2) * p.globals.seriesGroups.length);
                                    }
                                    for (var P, l = s + (-1 !== c ? c * r : 0), f = 0, v = 0; v < this.groupCtx.prevYF.length; v++) f += isNaN(this.groupCtx.prevYF[v][y]) ? 0 : this.groupCtx.prevYF[v][y];
                                    var S = x;
                                    if ((g && (S = g.indexOf(p.config.series[x].name)), (S > 0 && !p.globals.isXNumeric) || (S > 0 && p.globals.isXNumeric && p.globals.seriesX[x - 1][y] === p.globals.seriesX[x][y]))) {
                                        var M,
                                            L,
                                            k,
                                            I = Math.min(this.yRatio.length + 1, x + 1);
                                        if (void 0 !== this.groupCtx.prevY[S - 1] && this.groupCtx.prevY[S - 1].length)
                                            for (var Y = 1; Y < I; Y++) {
                                                var D;
                                                if (!isNaN(null === (D = this.groupCtx.prevY[S - Y]) || void 0 === D ? void 0 : D[y])) {
                                                    k = this.groupCtx.prevY[S - Y][y];
                                                    break;
                                                }
                                            }
                                        for (var O = 1; O < I; O++) {
                                            var N, Q;
                                            if ((null === (N = this.groupCtx.prevYVal[S - O]) || void 0 === N ? void 0 : N[y]) < 0) {
                                                L = this.series[x][y] >= 0 ? k - f + 2 * (this.isReversed ? f : 0) : k;
                                                break;
                                            }
                                            if ((null === (Q = this.groupCtx.prevYVal[S - O]) || void 0 === Q ? void 0 : Q[y]) >= 0) {
                                                L = this.series[x][y] >= 0 ? k : k + f - 2 * (this.isReversed ? f : 0);
                                                break;
                                            }
                                        }
                                        void 0 === L && (L = p.globals.gridHeight),
                                            (P =
                                                null !== (M = this.groupCtx.prevYF[0]) &&
                                                void 0 !== M &&
                                                M.every(function (et) {
                                                    return 0 === et;
                                                }) &&
                                                this.groupCtx.prevYF.slice(1, S).every(function (et) {
                                                    return et.every(function (at) {
                                                        return isNaN(at);
                                                    });
                                                })
                                                    ? d
                                                    : L);
                                    } else P = d;
                                    var tt = this.barHelpers.getColumnPaths({
                                        barXPosition: l,
                                        barWidth: r,
                                        y1: P,
                                        y2: (n = this.series[x][y] ? P - this.series[x][y] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[x][y] / this.yRatio[this.yaxisIndex] : 0) : P),
                                        yRatio: this.yRatio[this.yaxisIndex],
                                        strokeWidth: this.strokeWidth,
                                        series: this.series,
                                        seriesGroup: g,
                                        realIndex: a.realIndex,
                                        i: x,
                                        j: y,
                                        w: p,
                                    });
                                    return (
                                        this.barHelpers.barBackground({ bc: C, j: y, i: x, x1: l, x2: r, elSeries: u }),
                                        (s += o),
                                        { pathTo: tt.pathTo, pathFrom: tt.pathFrom, goalY: this.barHelpers.getGoalValues("y", null, d, x, y), barXPosition: l, x: p.globals.isXNumeric ? s - o : s, y: n }
                                    );
                                },
                            },
                        ]),
                        e
                    );
                })(),
                Qt = (function (A) {
                    st(e, Tt);
                    var t = V(e);
                    function e() {
                        return B(this, e), t.apply(this, arguments);
                    }
                    return (
                        m(e, [
                            {
                                key: "draw",
                                value: function (i, a, s) {
                                    var n = this,
                                        o = this.w,
                                        r = new E(this.ctx),
                                        d = o.globals.comboCharts ? a : o.config.chart.type,
                                        c = new vt(this.ctx);
                                    (this.candlestickOptions = this.w.config.plotOptions.candlestick), (this.boxOptions = this.w.config.plotOptions.boxPlot), (this.isHorizontal = o.config.plotOptions.bar.horizontal);
                                    var g = new $(this.ctx, o);
                                    (i = g.getLogSeries(i)), (this.series = i), (this.yRatio = g.getLogYRatios(this.yRatio)), this.barHelpers.initVariables(i);
                                    for (
                                        var u = r.group({ class: "apexcharts-".concat(d, "-series apexcharts-plot-series") }),
                                            p = function (y) {
                                                n.isBoxPlot = "boxPlot" === o.config.chart.type || "boxPlot" === o.config.series[y].type;
                                                var C,
                                                    w,
                                                    P,
                                                    l,
                                                    I,
                                                    Y,
                                                    f = void 0,
                                                    v = void 0,
                                                    S = [],
                                                    M = [],
                                                    L = o.globals.comboCharts ? s[y] : y,
                                                    k = r.group({ class: "apexcharts-series", seriesName: z.escapeString(o.globals.seriesNames[L]), rel: y + 1, "data:realIndex": L });
                                                n.ctx.series.addCollapsedClassToSeries(k, L), i[y].length > 0 && (n.visibleI = n.visibleI + 1), n.yRatio.length > 1 && (n.yaxisIndex = L);
                                                var D = n.barHelpers.initialPositions();
                                                (v = D.y), (I = D.barHeight), (w = D.yDivision), (l = D.zeroW), (C = D.xDivision), (P = D.zeroH), M.push((f = D.x) + (Y = D.barWidth) / 2);
                                                for (
                                                    var O = r.group({ class: "apexcharts-datalabels", "data:realIndex": L }),
                                                        N = function (tt) {
                                                            var et = n.barHelpers.getStrokeWidth(y, tt, L),
                                                                at = null,
                                                                ct = { indexes: { i: y, j: tt, realIndex: L }, x: f, y: v, strokeWidth: et, elSeries: k };
                                                            (at = n.isHorizontal
                                                                ? n.drawHorizontalBoxPaths(F(F({}, ct), {}, { yDivision: w, barHeight: I, zeroW: l }))
                                                                : n.drawVerticalBoxPaths(F(F({}, ct), {}, { xDivision: C, barWidth: Y, zeroH: P }))),
                                                                (v = at.y),
                                                                (f = at.x),
                                                                tt > 0 && M.push(f + Y / 2),
                                                                S.push(v),
                                                                at.pathTo.forEach(function (ht, ft) {
                                                                    var zt = !n.isBoxPlot && n.candlestickOptions.wick.useFillColor ? at.color[ft] : o.globals.stroke.colors[y],
                                                                        Ft = c.fillPath({ seriesNumber: L, dataPointIndex: tt, color: at.color[ft], value: i[y][tt] });
                                                                    n.renderSeries({
                                                                        realIndex: L,
                                                                        pathFill: Ft,
                                                                        lineFill: zt,
                                                                        j: tt,
                                                                        i: y,
                                                                        pathFrom: at.pathFrom,
                                                                        pathTo: ht,
                                                                        strokeWidth: et,
                                                                        elSeries: k,
                                                                        x: f,
                                                                        y: v,
                                                                        series: i,
                                                                        barHeight: I,
                                                                        barWidth: Y,
                                                                        elDataLabelsWrap: O,
                                                                        visibleSeries: n.visibleI,
                                                                        type: o.config.chart.type,
                                                                    });
                                                                });
                                                        },
                                                        Q = 0;
                                                    Q < o.globals.dataPoints;
                                                    Q++
                                                )
                                                    N(Q);
                                                (o.globals.seriesXvalues[L] = M), (o.globals.seriesYvalues[L] = S), u.add(k);
                                            },
                                            x = 0;
                                        x < i.length;
                                        x++
                                    )
                                        p(x);
                                    return u;
                                },
                            },
                            {
                                key: "drawVerticalBoxPaths",
                                value: function (i) {
                                    var a = i.indexes,
                                        s = i.x,
                                        n = i.xDivision,
                                        o = i.barWidth,
                                        r = i.zeroH,
                                        d = i.strokeWidth,
                                        c = this.w,
                                        g = new E(this.ctx),
                                        u = a.i,
                                        p = a.j,
                                        x = !0,
                                        y = c.config.plotOptions.candlestick.colors.upward,
                                        C = c.config.plotOptions.candlestick.colors.downward,
                                        w = "";
                                    this.isBoxPlot && (w = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
                                    var P = this.yRatio[this.yaxisIndex],
                                        l = a.realIndex,
                                        f = this.getOHLCValue(l, p),
                                        v = r,
                                        S = r;
                                    f.o > f.c && (x = !1);
                                    var M = Math.min(f.o, f.c),
                                        L = Math.max(f.o, f.c),
                                        k = f.m;
                                    c.globals.isXNumeric && (s = (c.globals.seriesX[l][p] - c.globals.minX) / this.xRatio - o / 2);
                                    var I = s + o * this.visibleI;
                                    null == this.series[u][p] ? ((M = r), (L = r)) : ((M = r - M / P), (L = r - L / P), (v = r - f.h / P), (S = r - f.l / P), (k = r - f.m / P));
                                    var Y = g.move(I, r),
                                        D = g.move(I + o / 2, M);
                                    return (
                                        c.globals.previousPaths.length > 0 && (D = this.getPreviousPath(l, p, !0)),
                                        (Y = this.isBoxPlot
                                            ? [
                                                  g.move(I, M) +
                                                      g.line(I + o / 2, M) +
                                                      g.line(I + o / 2, v) +
                                                      g.line(I + o / 4, v) +
                                                      g.line(I + o - o / 4, v) +
                                                      g.line(I + o / 2, v) +
                                                      g.line(I + o / 2, M) +
                                                      g.line(I + o, M) +
                                                      g.line(I + o, k) +
                                                      g.line(I, k) +
                                                      g.line(I, M + d / 2),
                                                  g.move(I, k) +
                                                      g.line(I + o, k) +
                                                      g.line(I + o, L) +
                                                      g.line(I + o / 2, L) +
                                                      g.line(I + o / 2, S) +
                                                      g.line(I + o - o / 4, S) +
                                                      g.line(I + o / 4, S) +
                                                      g.line(I + o / 2, S) +
                                                      g.line(I + o / 2, L) +
                                                      g.line(I, L) +
                                                      g.line(I, k) +
                                                      "z",
                                              ]
                                            : [
                                                  g.move(I, L) +
                                                      g.line(I + o / 2, L) +
                                                      g.line(I + o / 2, v) +
                                                      g.line(I + o / 2, L) +
                                                      g.line(I + o, L) +
                                                      g.line(I + o, M) +
                                                      g.line(I + o / 2, M) +
                                                      g.line(I + o / 2, S) +
                                                      g.line(I + o / 2, M) +
                                                      g.line(I, M) +
                                                      g.line(I, L - d / 2),
                                              ]),
                                        (D += g.move(I, M)),
                                        c.globals.isXNumeric || (s += n),
                                        { pathTo: Y, pathFrom: D, x: s, y: L, barXPosition: I, color: this.isBoxPlot ? w : x ? [y] : [C] }
                                    );
                                },
                            },
                            {
                                key: "drawHorizontalBoxPaths",
                                value: function (i) {
                                    var a = i.indexes,
                                        s = i.y,
                                        n = i.yDivision,
                                        o = i.barHeight,
                                        r = i.zeroW,
                                        d = i.strokeWidth,
                                        c = this.w,
                                        g = new E(this.ctx),
                                        u = a.i,
                                        p = a.j,
                                        x = this.boxOptions.colors.lower;
                                    this.isBoxPlot && (x = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
                                    var y = this.invertedYRatio,
                                        C = a.realIndex,
                                        w = this.getOHLCValue(C, p),
                                        P = r,
                                        l = r,
                                        f = Math.min(w.o, w.c),
                                        v = Math.max(w.o, w.c),
                                        S = w.m;
                                    c.globals.isXNumeric && (s = (c.globals.seriesX[C][p] - c.globals.minX) / this.invertedXRatio - o / 2);
                                    var M = s + o * this.visibleI;
                                    null == this.series[u][p] ? ((f = r), (v = r)) : ((f = r + f / y), (v = r + v / y), (P = r + w.h / y), (l = r + w.l / y), (S = r + w.m / y));
                                    var L = g.move(r, M),
                                        k = g.move(f, M + o / 2);
                                    return (
                                        c.globals.previousPaths.length > 0 && (k = this.getPreviousPath(C, p, !0)),
                                        (L = [
                                            g.move(f, M) +
                                                g.line(f, M + o / 2) +
                                                g.line(P, M + o / 2) +
                                                g.line(P, M + o / 2 - o / 4) +
                                                g.line(P, M + o / 2 + o / 4) +
                                                g.line(P, M + o / 2) +
                                                g.line(f, M + o / 2) +
                                                g.line(f, M + o) +
                                                g.line(S, M + o) +
                                                g.line(S, M) +
                                                g.line(f + d / 2, M),
                                            g.move(S, M) +
                                                g.line(S, M + o) +
                                                g.line(v, M + o) +
                                                g.line(v, M + o / 2) +
                                                g.line(l, M + o / 2) +
                                                g.line(l, M + o - o / 4) +
                                                g.line(l, M + o / 4) +
                                                g.line(l, M + o / 2) +
                                                g.line(v, M + o / 2) +
                                                g.line(v, M) +
                                                g.line(S, M) +
                                                "z",
                                        ]),
                                        (k += g.move(f, M)),
                                        c.globals.isXNumeric || (s += n),
                                        { pathTo: L, pathFrom: k, x: v, y: s, barYPosition: M, color: x }
                                    );
                                },
                            },
                            {
                                key: "getOHLCValue",
                                value: function (i, a) {
                                    var s = this.w;
                                    return {
                                        o: this.isBoxPlot ? s.globals.seriesCandleH[i][a] : s.globals.seriesCandleO[i][a],
                                        h: this.isBoxPlot ? s.globals.seriesCandleO[i][a] : s.globals.seriesCandleH[i][a],
                                        m: s.globals.seriesCandleM[i][a],
                                        l: this.isBoxPlot ? s.globals.seriesCandleC[i][a] : s.globals.seriesCandleL[i][a],
                                        c: this.isBoxPlot ? s.globals.seriesCandleL[i][a] : s.globals.seriesCandleC[i][a],
                                    };
                                },
                            },
                        ]),
                        e
                    );
                })(),
                oe = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "checkColorRange",
                                value: function () {
                                    var t = this.w,
                                        e = !1,
                                        i = t.config.plotOptions[t.config.chart.type];
                                    return (
                                        i.colorScale.ranges.length > 0 &&
                                            i.colorScale.ranges.map(function (a, s) {
                                                a.from <= 0 && (e = !0);
                                            }),
                                        e
                                    );
                                },
                            },
                            {
                                key: "getShadeColor",
                                value: function (t, e, i, a) {
                                    var s = this.w,
                                        n = 1,
                                        o = s.config.plotOptions[t].shadeIntensity,
                                        r = this.determineColor(t, e, i);
                                    s.globals.hasNegs || a
                                        ? (n = s.config.plotOptions[t].reverseNegativeShade
                                              ? r.percent < 0
                                                  ? (r.percent / 100) * (1.25 * o)
                                                  : 1.25 * o * (1 - r.percent / 100)
                                              : r.percent <= 0
                                              ? 1 - (1 + r.percent / 100) * o
                                              : (1 - r.percent / 100) * o)
                                        : ((n = 1 - r.percent / 100), "treemap" === t && (n = 1.25 * o * (1 - r.percent / 100)));
                                    var d = r.color,
                                        c = new z();
                                    return s.config.plotOptions[t].enableShades && (d = z.hexToRgba(c.shadeColor("dark" === this.w.config.theme.mode ? -1 * n : n, r.color), s.config.fill.opacity)), { color: d, colorProps: r };
                                },
                            },
                            {
                                key: "determineColor",
                                value: function (t, e, i) {
                                    var a = this.w,
                                        s = a.globals.series[e][i],
                                        n = a.config.plotOptions[t],
                                        o = n.colorScale.inverse ? i : e;
                                    n.distributed && "treemap" === a.config.chart.type && (o = i);
                                    var r = a.globals.colors[o],
                                        d = null,
                                        c = Math.min.apply(Math, G(a.globals.series[e])),
                                        g = Math.max.apply(Math, G(a.globals.series[e]));
                                    n.distributed || "heatmap" !== t || ((c = a.globals.minY), (g = a.globals.maxY)),
                                        void 0 !== n.colorScale.min && ((c = n.colorScale.min < a.globals.minY ? n.colorScale.min : a.globals.minY), (g = n.colorScale.max > a.globals.maxY ? n.colorScale.max : a.globals.maxY));
                                    var u = Math.abs(g) + Math.abs(c),
                                        p = (100 * s) / (0 === u ? u - 1e-6 : u);
                                    return (
                                        n.colorScale.ranges.length > 0 &&
                                            n.colorScale.ranges.map(function (x, y) {
                                                if (s >= x.from && s <= x.to) {
                                                    (r = x.color), (d = x.foreColor ? x.foreColor : null), (c = x.from), (g = x.to);
                                                    var C = Math.abs(g) + Math.abs(c);
                                                    p = (100 * s) / (0 === C ? C - 1e-6 : C);
                                                }
                                            }),
                                        { color: r, foreColor: d, percent: p }
                                    );
                                },
                            },
                            {
                                key: "calculateDataLabels",
                                value: function (t) {
                                    var e = t.text,
                                        i = t.x,
                                        a = t.y,
                                        s = t.i,
                                        n = t.j,
                                        o = t.colorProps,
                                        r = t.fontSize,
                                        d = this.w.config.dataLabels,
                                        c = new E(this.ctx),
                                        g = new Mt(this.ctx),
                                        u = null;
                                    if (d.enabled) {
                                        u = c.group({ class: "apexcharts-data-labels" });
                                        var x = d.offsetY,
                                            y = i + d.offsetX,
                                            C = a + parseFloat(d.style.fontSize) / 3 + x;
                                        g.plotDataLabelsText({ x: y, y: C, text: e, i: s, j: n, color: o.foreColor, parent: u, fontSize: r, dataLabelsConfig: d });
                                    }
                                    return u;
                                },
                            },
                            {
                                key: "addListeners",
                                value: function (t) {
                                    var e = new E(this.ctx);
                                    t.node.addEventListener("mouseenter", e.pathMouseEnter.bind(this, t)),
                                        t.node.addEventListener("mouseleave", e.pathMouseLeave.bind(this, t)),
                                        t.node.addEventListener("mousedown", e.pathMouseDown.bind(this, t));
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Te = (function () {
                    function A(t, e) {
                        B(this, A),
                            (this.ctx = t),
                            (this.w = t.w),
                            (this.xRatio = e.xRatio),
                            (this.yRatio = e.yRatio),
                            (this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation),
                            (this.helpers = new oe(t)),
                            (this.rectRadius = this.w.config.plotOptions.heatmap.radius),
                            (this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0);
                    }
                    return (
                        m(A, [
                            {
                                key: "draw",
                                value: function (t) {
                                    var e = this.w,
                                        i = new E(this.ctx),
                                        a = i.group({ class: "apexcharts-heatmap" });
                                    a.attr("clip-path", "url(#gridRectMask".concat(e.globals.cuid, ")"));
                                    var s = e.globals.gridWidth / e.globals.dataPoints,
                                        n = e.globals.gridHeight / e.globals.series.length,
                                        o = 0,
                                        r = !1;
                                    this.negRange = this.helpers.checkColorRange();
                                    var d = t.slice();
                                    e.config.yaxis[0].reversed && ((r = !0), d.reverse());
                                    for (var c = r ? 0 : d.length - 1; r ? c < d.length : c >= 0; r ? c++ : c--) {
                                        var g = i.group({ class: "apexcharts-series apexcharts-heatmap-series", seriesName: z.escapeString(e.globals.seriesNames[c]), rel: c + 1, "data:realIndex": c });
                                        if ((this.ctx.series.addCollapsedClassToSeries(g, c), e.config.chart.dropShadow.enabled)) {
                                            var u = e.config.chart.dropShadow;
                                            new H(this.ctx).dropShadow(g, u, c);
                                        }
                                        for (var p = 0, x = e.config.plotOptions.heatmap.shadeIntensity, y = 0; y < d[c].length; y++) {
                                            var C = this.helpers.getShadeColor(e.config.chart.type, c, y, this.negRange),
                                                w = C.color,
                                                P = C.colorProps;
                                            "image" === e.config.fill.type &&
                                                (w = new vt(this.ctx).fillPath({
                                                    seriesNumber: c,
                                                    dataPointIndex: y,
                                                    opacity: e.globals.hasNegs ? (P.percent < 0 ? 1 - (1 + P.percent / 100) : x + P.percent / 100) : P.percent / 100,
                                                    patternID: z.randomId(),
                                                    width: e.config.fill.image.width ? e.config.fill.image.width : s,
                                                    height: e.config.fill.image.height ? e.config.fill.image.height : n,
                                                }));
                                            var f = i.drawRect(p, o, s, n, this.rectRadius);
                                            if (
                                                (f.attr({ cx: p, cy: o }),
                                                f.node.classList.add("apexcharts-heatmap-rect"),
                                                g.add(f),
                                                f.attr({ fill: w, i: c, index: c, j: y, val: d[c][y], "stroke-width": this.strokeWidth, stroke: e.config.plotOptions.heatmap.useFillColorAsStroke ? w : e.globals.stroke.colors[0], color: w }),
                                                this.helpers.addListeners(f),
                                                e.config.chart.animations.enabled && !e.globals.dataChanged)
                                            ) {
                                                var v = 1;
                                                e.globals.resized || (v = e.config.chart.animations.speed), this.animateHeatMap(f, p, o, s, n, v);
                                            }
                                            if (e.globals.dataChanged) {
                                                var S = 1;
                                                if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {
                                                    S = this.dynamicAnim.speed;
                                                    var M = e.globals.previousPaths[c] && e.globals.previousPaths[c][y] && e.globals.previousPaths[c][y].color;
                                                    M || (M = "rgba(255, 255, 255, 0)"), this.animateHeatColor(f, z.isColorHex(M) ? M : z.rgb2hex(M), z.isColorHex(w) ? w : z.rgb2hex(w), S);
                                                }
                                            }
                                            var L = (0, e.config.dataLabels.formatter)(e.globals.series[c][y], { value: e.globals.series[c][y], seriesIndex: c, dataPointIndex: y, w: e }),
                                                k = this.helpers.calculateDataLabels({ text: L, x: p + s / 2, y: o + n / 2, i: c, j: y, colorProps: P, series: d });
                                            null !== k && g.add(k), (p += s);
                                        }
                                        (o += n), a.add(g);
                                    }
                                    var I = e.globals.yAxisScale[0].result.slice();
                                    return e.config.yaxis[0].reversed ? I.unshift("") : I.push(""), (e.globals.yAxisScale[0].result = I), (e.config.yaxis[0].labels.offsetY = -e.globals.gridHeight / e.globals.series.length / 2), a;
                                },
                            },
                            {
                                key: "animateHeatMap",
                                value: function (t, e, i, a, s, n) {
                                    var o = new j(this.ctx);
                                    o.animateRect(t, { x: e + a / 2, y: i + s / 2, width: 0, height: 0 }, { x: e, y: i, width: a, height: s }, n, function () {
                                        o.animationCompleted(t);
                                    });
                                },
                            },
                            {
                                key: "animateHeatColor",
                                value: function (t, e, i, a) {
                                    t.attr({ fill: e }).animate(a).attr({ fill: i });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                re = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "drawYAxisTexts",
                                value: function (t, e, i, a) {
                                    var s = this.w,
                                        n = s.config.yaxis[0],
                                        o = s.globals.yLabelFormatters[0];
                                    return new E(this.ctx).drawText({
                                        x: t + n.labels.offsetX,
                                        y: e + n.labels.offsetY,
                                        text: o(a, i),
                                        textAnchor: "middle",
                                        fontSize: n.labels.style.fontSize,
                                        fontFamily: n.labels.style.fontFamily,
                                        foreColor: Array.isArray(n.labels.style.colors) ? n.labels.style.colors[i] : n.labels.style.colors,
                                    });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Ot = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                        var e = this.w;
                        (this.chartType = this.w.config.chart.type),
                            (this.initialAnim = this.w.config.chart.animations.enabled),
                            (this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled),
                            (this.animBeginArr = [0]),
                            (this.animDur = 0),
                            (this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels),
                            (this.lineColorArr = void 0 !== e.globals.stroke.colors ? e.globals.stroke.colors : e.globals.colors),
                            (this.defaultSize = Math.min(e.globals.gridWidth, e.globals.gridHeight)),
                            (this.centerY = this.defaultSize / 2),
                            (this.centerX = e.globals.gridWidth / 2),
                            (this.fullAngle = "radialBar" === e.config.chart.type ? 360 : Math.abs(e.config.plotOptions.pie.endAngle - e.config.plotOptions.pie.startAngle)),
                            (this.initialAngle = e.config.plotOptions.pie.startAngle % this.fullAngle),
                            (e.globals.radialSize = this.defaultSize / 2.05 - e.config.stroke.width - (e.config.chart.sparkline.enabled ? 0 : e.config.chart.dropShadow.blur)),
                            (this.donutSize = (e.globals.radialSize * parseInt(e.config.plotOptions.pie.donut.size, 10)) / 100),
                            (this.maxY = 0),
                            (this.sliceLabels = []),
                            (this.sliceSizes = []),
                            (this.prevSectorAngleArr = []);
                    }
                    return (
                        m(A, [
                            {
                                key: "draw",
                                value: function (t) {
                                    var e = this,
                                        i = this.w,
                                        a = new E(this.ctx);
                                    if (((this.ret = a.group({ class: "apexcharts-pie" })), i.globals.noData)) return this.ret;
                                    for (var s = 0, n = 0; n < t.length; n++) s += z.negToZero(t[n]);
                                    var o = [],
                                        r = a.group();
                                    0 === s && (s = 1e-5),
                                        t.forEach(function (M) {
                                            e.maxY = Math.max(e.maxY, M);
                                        }),
                                        i.config.yaxis[0].max && (this.maxY = i.config.yaxis[0].max),
                                        "back" === i.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret);
                                    for (var d = 0; d < t.length; d++) {
                                        var c = (this.fullAngle * z.negToZero(t[d])) / s;
                                        o.push(c), "polarArea" === this.chartType ? ((o[d] = this.fullAngle / t.length), this.sliceSizes.push((i.globals.radialSize * t[d]) / this.maxY)) : this.sliceSizes.push(i.globals.radialSize);
                                    }
                                    if (i.globals.dataChanged) {
                                        for (var g, u = 0, p = 0; p < i.globals.previousPaths.length; p++) u += z.negToZero(i.globals.previousPaths[p]);
                                        for (var x = 0; x < i.globals.previousPaths.length; x++) (g = (this.fullAngle * z.negToZero(i.globals.previousPaths[x])) / u), this.prevSectorAngleArr.push(g);
                                    }
                                    this.donutSize < 0 && (this.donutSize = 0);
                                    var y = i.config.plotOptions.pie.customScale,
                                        P = i.globals.gridWidth / 2 - (i.globals.gridWidth / 2) * y,
                                        l = i.globals.gridHeight / 2 - (i.globals.gridHeight / 2) * y;
                                    if ("donut" === this.chartType) {
                                        var f = a.drawCircle(this.donutSize);
                                        f.attr({ cx: this.centerX, cy: this.centerY, fill: i.config.plotOptions.pie.donut.background ? i.config.plotOptions.pie.donut.background : "transparent" }), r.add(f);
                                    }
                                    var v = this.drawArcs(o, t);
                                    if (
                                        (this.sliceLabels.forEach(function (M) {
                                            v.add(M);
                                        }),
                                        r.attr({ transform: "translate(".concat(P, ", ").concat(l, ") scale(").concat(y, ")") }),
                                        r.add(v),
                                        this.ret.add(r),
                                        this.donutDataLabels.show)
                                    ) {
                                        var S = this.renderInnerDataLabels(this.donutDataLabels, {
                                            hollowSize: this.donutSize,
                                            centerX: this.centerX,
                                            centerY: this.centerY,
                                            opacity: this.donutDataLabels.show,
                                            translateX: P,
                                            translateY: l,
                                        });
                                        this.ret.add(S);
                                    }
                                    return "front" === i.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret), this.ret;
                                },
                            },
                            {
                                key: "drawArcs",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = new H(this.ctx),
                                        s = new E(this.ctx),
                                        n = new vt(this.ctx),
                                        o = s.group({ class: "apexcharts-slices" }),
                                        r = this.initialAngle,
                                        d = this.initialAngle,
                                        c = this.initialAngle,
                                        g = this.initialAngle;
                                    this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0;
                                    for (var u = 0; u < t.length; u++) {
                                        var p = s.group({ class: "apexcharts-series apexcharts-pie-series", seriesName: z.escapeString(i.globals.seriesNames[u]), rel: u + 1, "data:realIndex": u });
                                        o.add(p), (c = (r = c) + t[u]), (g = (d = g) + this.prevSectorAngleArr[u]);
                                        var x = c < r ? this.fullAngle + c - r : c - r,
                                            y = n.fillPath({ seriesNumber: u, size: this.sliceSizes[u], value: e[u] }),
                                            C = this.getChangedPath(d, g),
                                            w = s.drawPath({
                                                d: C,
                                                stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[u] : this.lineColorArr,
                                                strokeWidth: 0,
                                                fill: y,
                                                fillOpacity: i.config.fill.opacity,
                                                classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(u),
                                            });
                                        w.attr({ index: 0, j: u }),
                                            a.setSelectionFilter(w, 0, u),
                                            i.config.chart.dropShadow.enabled && a.dropShadow(w, i.config.chart.dropShadow, u),
                                            this.addListeners(w, this.donutDataLabels),
                                            E.setAttrs(w.node, { "data:angle": x, "data:startAngle": r, "data:strokeWidth": this.strokeWidth, "data:value": e[u] });
                                        var l = { x: 0, y: 0 };
                                        "pie" === this.chartType || "polarArea" === this.chartType
                                            ? (l = z.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize / 1.25 + i.config.plotOptions.pie.dataLabels.offset, (r + x / 2) % this.fullAngle))
                                            : "donut" === this.chartType &&
                                              (l = z.polarToCartesian(this.centerX, this.centerY, (i.globals.radialSize + this.donutSize) / 2 + i.config.plotOptions.pie.dataLabels.offset, (r + x / 2) % this.fullAngle)),
                                            p.add(w);
                                        var f = 0;
                                        if (
                                            (!this.initialAnim || i.globals.resized || i.globals.dataChanged
                                                ? this.animBeginArr.push(0)
                                                : (0 == (f = (x / this.fullAngle) * i.config.chart.animations.speed) && (f = 1), (this.animDur = f + this.animDur), this.animBeginArr.push(this.animDur)),
                                            this.animatePaths(
                                                w,
                                                this.dynamicAnim && i.globals.dataChanged
                                                    ? {
                                                          size: this.sliceSizes[u],
                                                          endAngle: c,
                                                          startAngle: r,
                                                          prevStartAngle: d,
                                                          prevEndAngle: g,
                                                          animateStartingPos: !0,
                                                          i: u,
                                                          animBeginArr: this.animBeginArr,
                                                          shouldSetPrevPaths: !0,
                                                          dur: i.config.chart.animations.dynamicAnimation.speed,
                                                      }
                                                    : { size: this.sliceSizes[u], endAngle: c, startAngle: r, i: u, totalItems: t.length - 1, animBeginArr: this.animBeginArr, dur: f }
                                            ),
                                            i.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && w.click(this.pieClicked.bind(this, u)),
                                            void 0 !== i.globals.selectedDataPoints[0] && i.globals.selectedDataPoints[0].indexOf(u) > -1 && this.pieClicked(u),
                                            i.config.dataLabels.enabled)
                                        ) {
                                            var v = l.x,
                                                S = l.y,
                                                M = (100 * x) / this.fullAngle + "%";
                                            if (0 !== x && i.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[u]) {
                                                var L = i.config.dataLabels.formatter;
                                                void 0 !== L && (M = L(i.globals.seriesPercent[u][0], { seriesIndex: u, w: i }));
                                                var k = i.globals.dataLabels.style.colors[u],
                                                    I = s.group({ class: "apexcharts-datalabels" }),
                                                    Y = s.drawText({
                                                        x: v,
                                                        y: S,
                                                        text: M,
                                                        textAnchor: "middle",
                                                        fontSize: i.config.dataLabels.style.fontSize,
                                                        fontFamily: i.config.dataLabels.style.fontFamily,
                                                        fontWeight: i.config.dataLabels.style.fontWeight,
                                                        foreColor: k,
                                                    });
                                                I.add(Y),
                                                    i.config.dataLabels.dropShadow.enabled && a.dropShadow(Y, i.config.dataLabels.dropShadow),
                                                    Y.node.classList.add("apexcharts-pie-label"),
                                                    i.config.chart.animations.animate &&
                                                        !1 === i.globals.resized &&
                                                        (Y.node.classList.add("apexcharts-pie-label-delay"), (Y.node.style.animationDelay = i.config.chart.animations.speed / 940 + "s")),
                                                    this.sliceLabels.push(I);
                                            }
                                        }
                                    }
                                    return o;
                                },
                            },
                            {
                                key: "addListeners",
                                value: function (t, e) {
                                    var i = new E(this.ctx);
                                    t.node.addEventListener("mouseenter", i.pathMouseEnter.bind(this, t)),
                                        t.node.addEventListener("mouseleave", i.pathMouseLeave.bind(this, t)),
                                        t.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t.node, e)),
                                        t.node.addEventListener("mousedown", i.pathMouseDown.bind(this, t)),
                                        this.donutDataLabels.total.showAlways ||
                                            (t.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t.node, e)));
                                },
                            },
                            {
                                key: "animatePaths",
                                value: function (t, e) {
                                    var a = e.endAngle < e.startAngle ? this.fullAngle + e.endAngle - e.startAngle : e.endAngle - e.startAngle,
                                        s = a,
                                        n = e.startAngle,
                                        o = e.startAngle;
                                    void 0 !== e.prevStartAngle &&
                                        void 0 !== e.prevEndAngle &&
                                        ((n = e.prevEndAngle), (s = e.prevEndAngle < e.prevStartAngle ? this.fullAngle + e.prevEndAngle - e.prevStartAngle : e.prevEndAngle - e.prevStartAngle)),
                                        e.i === this.w.config.series.length - 1 && (a + o > this.fullAngle ? (e.endAngle = e.endAngle - (a + o)) : a + o < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (a + o)))),
                                        a === this.fullAngle && (a = this.fullAngle - 0.01),
                                        this.animateArc(t, n, o, a, s, e);
                                },
                            },
                            {
                                key: "animateArc",
                                value: function (t, e, i, a, s, n) {
                                    var o,
                                        r = this,
                                        d = this.w,
                                        c = new j(this.ctx),
                                        g = n.size;
                                    (isNaN(e) || isNaN(s)) && ((e = i), (s = a), (n.dur = 0));
                                    var u = a,
                                        p = i,
                                        x = e < i ? this.fullAngle + e - i : e - i;
                                    d.globals.dataChanged &&
                                        n.shouldSetPrevPaths &&
                                        n.prevEndAngle &&
                                        ((o = r.getPiePath({
                                            me: r,
                                            startAngle: n.prevStartAngle,
                                            angle: n.prevEndAngle < n.prevStartAngle ? this.fullAngle + n.prevEndAngle - n.prevStartAngle : n.prevEndAngle - n.prevStartAngle,
                                            size: g,
                                        })),
                                        t.attr({ d: o })),
                                        0 !== n.dur
                                            ? t
                                                  .animate(n.dur, d.globals.easing, n.animBeginArr[n.i])
                                                  .afterAll(function () {
                                                      ("pie" !== r.chartType && "donut" !== r.chartType && "polarArea" !== r.chartType) ||
                                                          this.animate(d.config.chart.animations.dynamicAnimation.speed).attr({ "stroke-width": r.strokeWidth }),
                                                          n.i === d.config.series.length - 1 && c.animationCompleted(t);
                                                  })
                                                  .during(function (y) {
                                                      (u = x + (a - x) * y),
                                                          n.animateStartingPos && ((u = s + (a - s) * y), (p = e - s + (i - (e - s)) * y)),
                                                          (o = r.getPiePath({ me: r, startAngle: p, angle: u, size: g })),
                                                          t.node.setAttribute("data:pathOrig", o),
                                                          t.attr({ d: o });
                                                  })
                                            : ((o = r.getPiePath({ me: r, startAngle: p, angle: a, size: g })),
                                              n.isTrack || (d.globals.animationEnded = !0),
                                              t.node.setAttribute("data:pathOrig", o),
                                              t.attr({ d: o, "stroke-width": r.strokeWidth }));
                                },
                            },
                            {
                                key: "pieClicked",
                                value: function (t) {
                                    var e,
                                        i = this.w,
                                        a = this,
                                        s = a.sliceSizes[t] + (i.config.plotOptions.pie.expandOnClick ? 4 : 0),
                                        n = i.globals.dom.Paper.select(".apexcharts-".concat(a.chartType.toLowerCase(), "-slice-").concat(t)).members[0];
                                    if ("true" !== n.attr("data:pieClicked")) {
                                        var o = i.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
                                        Array.prototype.forEach.call(o, function (g) {
                                            g.setAttribute("data:pieClicked", "false");
                                            var u = g.getAttribute("data:pathOrig");
                                            u && g.setAttribute("d", u);
                                        }),
                                            n.attr("data:pieClicked", "true");
                                        var r = parseInt(n.attr("data:startAngle"), 10),
                                            d = parseInt(n.attr("data:angle"), 10);
                                        (e = a.getPiePath({ me: a, startAngle: r, angle: d, size: s })), 360 !== d && n.plot(e);
                                    } else {
                                        n.attr({ "data:pieClicked": "false" }), this.revertDataLabelsInner(n.node, this.donutDataLabels);
                                        var c = n.attr("data:pathOrig");
                                        n.attr({ d: c });
                                    }
                                },
                            },
                            {
                                key: "getChangedPath",
                                value: function (t, e) {
                                    var i = "";
                                    return this.dynamicAnim && this.w.globals.dataChanged && (i = this.getPiePath({ me: this, startAngle: t, angle: e - t, size: this.size })), i;
                                },
                            },
                            {
                                key: "getPiePath",
                                value: function (t) {
                                    var e = t.me,
                                        i = t.startAngle,
                                        a = t.angle,
                                        s = t.size,
                                        n = i,
                                        o = (Math.PI * (n - 90)) / 180,
                                        r = a + i;
                                    Math.ceil(r) >= this.fullAngle + (this.w.config.plotOptions.pie.startAngle % this.fullAngle) && (r = this.fullAngle + (this.w.config.plotOptions.pie.startAngle % this.fullAngle) - 0.01),
                                        Math.ceil(r) > this.fullAngle && (r -= this.fullAngle);
                                    var d = (Math.PI * (r - 90)) / 180,
                                        c = e.centerX + s * Math.cos(o),
                                        g = e.centerY + s * Math.sin(o),
                                        u = e.centerX + s * Math.cos(d),
                                        p = e.centerY + s * Math.sin(d),
                                        x = z.polarToCartesian(e.centerX, e.centerY, e.donutSize, r),
                                        y = z.polarToCartesian(e.centerX, e.centerY, e.donutSize, n),
                                        C = a > 180 ? 1 : 0,
                                        w = ["M", c, g, "A", s, s, 0, C, 1, u, p];
                                    return "donut" === e.chartType
                                        ? [].concat(w, ["L", x.x, x.y, "A", e.donutSize, e.donutSize, 0, C, 0, y.x, y.y, "L", c, g, "z"]).join(" ")
                                        : "pie" === e.chartType || "polarArea" === e.chartType
                                        ? [].concat(w, ["L", e.centerX, e.centerY, "L", c, g]).join(" ")
                                        : [].concat(w).join(" ");
                                },
                            },
                            {
                                key: "drawPolarElements",
                                value: function (t) {
                                    var e = this.w,
                                        i = new Lt(this.ctx),
                                        a = new E(this.ctx),
                                        s = new re(this.ctx),
                                        n = a.group(),
                                        o = a.group(),
                                        r = i.niceScale(0, Math.ceil(this.maxY), e.config.yaxis[0].tickAmount, 0, !0),
                                        d = r.result.reverse(),
                                        c = r.result.length;
                                    this.maxY = r.niceMax;
                                    for (var g = e.globals.radialSize, u = g / (c - 1), p = 0; p < c - 1; p++) {
                                        var x = a.drawCircle(g);
                                        if (
                                            (x.attr({ cx: this.centerX, cy: this.centerY, fill: "none", "stroke-width": e.config.plotOptions.polarArea.rings.strokeWidth, stroke: e.config.plotOptions.polarArea.rings.strokeColor }),
                                            e.config.yaxis[0].show)
                                        ) {
                                            var y = s.drawYAxisTexts(this.centerX, this.centerY - g + parseInt(e.config.yaxis[0].labels.style.fontSize, 10) / 2, p, d[p]);
                                            o.add(y);
                                        }
                                        n.add(x), (g -= u);
                                    }
                                    this.drawSpokes(t), t.add(n), t.add(o);
                                },
                            },
                            {
                                key: "renderInnerDataLabels",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = new E(this.ctx),
                                        s = a.group({
                                            class: "apexcharts-datalabels-group",
                                            transform: "translate("
                                                .concat(e.translateX ? e.translateX : 0, ", ")
                                                .concat(e.translateY ? e.translateY : 0, ") scale(")
                                                .concat(i.config.plotOptions.pie.customScale, ")"),
                                        }),
                                        n = t.total.show;
                                    s.node.style.opacity = e.opacity;
                                    var o,
                                        r,
                                        d = e.centerX,
                                        c = e.centerY;
                                    o = void 0 === t.name.color ? i.globals.colors[0] : t.name.color;
                                    var g = t.name.fontSize,
                                        u = t.name.fontFamily,
                                        p = t.name.fontWeight;
                                    r = void 0 === t.value.color ? i.config.chart.foreColor : t.value.color;
                                    var x = t.value.formatter,
                                        y = "",
                                        C = "";
                                    if (
                                        (n
                                            ? ((o = t.total.color), (g = t.total.fontSize), (u = t.total.fontFamily), (p = t.total.fontWeight), (C = t.total.label), (y = t.total.formatter(i)))
                                            : 1 === i.globals.series.length && ((y = x(i.globals.series[0], i)), (C = i.globals.seriesNames[0])),
                                        C && (C = t.name.formatter(C, t.total.show, i)),
                                        t.name.show)
                                    ) {
                                        var w = a.drawText({ x: d, y: c + parseFloat(t.name.offsetY), text: C, textAnchor: "middle", foreColor: o, fontSize: g, fontWeight: p, fontFamily: u });
                                        w.node.classList.add("apexcharts-datalabel-label"), s.add(w);
                                    }
                                    if (t.value.show) {
                                        var P = t.name.show ? parseFloat(t.value.offsetY) + 16 : t.value.offsetY,
                                            l = a.drawText({ x: d, y: c + P, text: y, textAnchor: "middle", foreColor: r, fontWeight: t.value.fontWeight, fontSize: t.value.fontSize, fontFamily: t.value.fontFamily });
                                        l.node.classList.add("apexcharts-datalabel-value"), s.add(l);
                                    }
                                    return s;
                                },
                            },
                            {
                                key: "printInnerLabels",
                                value: function (t, e, i, a) {
                                    var s,
                                        n = this.w;
                                    a ? (s = void 0 === t.name.color ? n.globals.colors[parseInt(a.parentNode.getAttribute("rel"), 10) - 1] : t.name.color) : n.globals.series.length > 1 && t.total.show && (s = t.total.color);
                                    var o = n.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"),
                                        r = n.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
                                    (i = (0, t.value.formatter)(i, n)),
                                        a || "function" != typeof t.total.formatter || (i = t.total.formatter(n)),
                                        (e = t.name.formatter(e, e === t.total.label, n)),
                                        null !== o && (o.textContent = e),
                                        null !== r && (r.textContent = i),
                                        null !== o && (o.style.fill = s);
                                },
                            },
                            {
                                key: "printDataLabelsInner",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = t.getAttribute("data:value"),
                                        s = i.globals.seriesNames[parseInt(t.parentNode.getAttribute("rel"), 10) - 1];
                                    i.globals.series.length > 1 && this.printInnerLabels(e, s, a, t);
                                    var n = i.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
                                    null !== n && (n.style.opacity = 1);
                                },
                            },
                            {
                                key: "drawSpokes",
                                value: function (t) {
                                    var e = this,
                                        i = this.w,
                                        a = new E(this.ctx),
                                        s = i.config.plotOptions.polarArea.spokes;
                                    if (0 !== s.strokeWidth) {
                                        for (var n = [], o = 360 / i.globals.series.length, r = 0; r < i.globals.series.length; r++)
                                            n.push(z.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize, i.config.plotOptions.pie.startAngle + o * r));
                                        n.forEach(function (d, c) {
                                            var g = a.drawLine(d.x, d.y, e.centerX, e.centerY, Array.isArray(s.connectorColors) ? s.connectorColors[c] : s.connectorColors);
                                            t.add(g);
                                        });
                                    }
                                },
                            },
                            {
                                key: "revertDataLabelsInner",
                                value: function (t, e, i) {
                                    var a = this,
                                        s = this.w,
                                        n = s.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"),
                                        o = !1,
                                        r = s.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"),
                                        d = function (u) {
                                            var p = u.makeSliceOut,
                                                x = u.printLabel;
                                            Array.prototype.forEach.call(r, function (y) {
                                                "true" === y.getAttribute("data:pieClicked") && (p && (o = !0), x && a.printDataLabelsInner(y, e));
                                            });
                                        };
                                    if ((d({ makeSliceOut: !0, printLabel: !1 }), e.total.show && s.globals.series.length > 1))
                                        o && !e.total.showAlways ? d({ makeSliceOut: !1, printLabel: !0 }) : this.printInnerLabels(e, e.total.label, e.total.formatter(s));
                                    else if ((d({ makeSliceOut: !1, printLabel: !0 }), !o))
                                        if (s.globals.selectedDataPoints.length && s.globals.series.length > 1)
                                            if (s.globals.selectedDataPoints[0].length > 0) {
                                                var c = s.globals.selectedDataPoints[0],
                                                    g = s.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(c));
                                                this.printDataLabelsInner(g, e);
                                            } else n && s.globals.selectedDataPoints.length && 0 === s.globals.selectedDataPoints[0].length && (n.style.opacity = 0);
                                        else n && s.globals.series.length > 1 && (n.style.opacity = 0);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ke = (function () {
                    function A(t) {
                        B(this, A),
                            (this.ctx = t),
                            (this.w = t.w),
                            (this.chartType = this.w.config.chart.type),
                            (this.initialAnim = this.w.config.chart.animations.enabled),
                            (this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled),
                            (this.animDur = 0);
                        var e = this.w;
                        (this.graphics = new E(this.ctx)),
                            (this.lineColorArr = void 0 !== e.globals.stroke.colors ? e.globals.stroke.colors : e.globals.colors),
                            (this.defaultSize = e.globals.svgHeight < e.globals.svgWidth ? e.globals.gridHeight + 1.5 * e.globals.goldenPadding : e.globals.gridWidth),
                            (this.isLog = e.config.yaxis[0].logarithmic),
                            (this.coreUtils = new $(this.ctx)),
                            (this.maxValue = this.isLog ? this.coreUtils.getLogVal(e.globals.maxY, 0) : e.globals.maxY),
                            (this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : e.globals.minY),
                            (this.polygons = e.config.plotOptions.radar.polygons),
                            (this.strokeWidth = e.config.stroke.show ? e.config.stroke.width : 0),
                            (this.size = this.defaultSize / 2.1 - this.strokeWidth - e.config.chart.dropShadow.blur),
                            e.config.xaxis.labels.show && (this.size = this.size - e.globals.xAxisLabelsWidth / 1.75),
                            void 0 !== e.config.plotOptions.radar.size && (this.size = e.config.plotOptions.radar.size),
                            (this.dataRadiusOfPercent = []),
                            (this.dataRadius = []),
                            (this.angleArr = []),
                            (this.yaxisLabelsTextsPos = []);
                    }
                    return (
                        m(A, [
                            {
                                key: "draw",
                                value: function (t) {
                                    var e = this,
                                        i = this.w,
                                        a = new vt(this.ctx),
                                        s = [],
                                        n = new Mt(this.ctx);
                                    t.length && (this.dataPointsLen = t[i.globals.maxValsInArrayIndex].length), (this.disAngle = (2 * Math.PI) / this.dataPointsLen);
                                    var c = i.globals.gridHeight / 2 + i.config.plotOptions.radar.offsetY,
                                        g = this.graphics.group({
                                            class: "apexcharts-radar-series apexcharts-plot-series",
                                            transform: "translate(".concat(i.globals.gridWidth / 2 + i.config.plotOptions.radar.offsetX || 0, ", ").concat(c || 0, ")"),
                                        }),
                                        u = [],
                                        p = null,
                                        x = null;
                                    if (
                                        ((this.yaxisLabels = this.graphics.group({ class: "apexcharts-yaxis" })),
                                        t.forEach(function (C, w) {
                                            var P = C.length === i.globals.dataPoints,
                                                l = e.graphics.group().attr({ class: "apexcharts-series", "data:longestSeries": P, seriesName: z.escapeString(i.globals.seriesNames[w]), rel: w + 1, "data:realIndex": w });
                                            (e.dataRadiusOfPercent[w] = []),
                                                (e.dataRadius[w] = []),
                                                (e.angleArr[w] = []),
                                                C.forEach(function (O, N) {
                                                    var Q = Math.abs(e.maxValue - e.minValue);
                                                    (O += Math.abs(e.minValue)),
                                                        e.isLog && (O = e.coreUtils.getLogVal(O, 0)),
                                                        (e.dataRadiusOfPercent[w][N] = O / Q),
                                                        (e.dataRadius[w][N] = e.dataRadiusOfPercent[w][N] * e.size),
                                                        (e.angleArr[w][N] = N * e.disAngle);
                                                }),
                                                (u = e.getDataPointsPos(e.dataRadius[w], e.angleArr[w]));
                                            var f = e.createPaths(u, { x: 0, y: 0 });
                                            (p = e.graphics.group({ class: "apexcharts-series-markers-wrap apexcharts-element-hidden" })),
                                                (x = e.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": w })),
                                                i.globals.delayedElements.push({ el: p.node, index: w });
                                            var v = {
                                                    i: w,
                                                    realIndex: w,
                                                    animationDelay: w,
                                                    initialSpeed: i.config.chart.animations.speed,
                                                    dataChangeSpeed: i.config.chart.animations.dynamicAnimation.speed,
                                                    className: "apexcharts-radar",
                                                    shouldClipToGrid: !1,
                                                    bindEventsOnPaths: !1,
                                                    stroke: i.globals.stroke.colors[w],
                                                    strokeLineCap: i.config.stroke.lineCap,
                                                },
                                                S = null;
                                            i.globals.previousPaths.length > 0 && (S = e.getPreviousPath(w));
                                            for (var M = 0; M < f.linePathsTo.length; M++) {
                                                var L = e.graphics.renderPaths(
                                                    F(
                                                        F({}, v),
                                                        {},
                                                        { pathFrom: null === S ? f.linePathsFrom[M] : S, pathTo: f.linePathsTo[M], strokeWidth: Array.isArray(e.strokeWidth) ? e.strokeWidth[w] : e.strokeWidth, fill: "none", drawShadow: !1 }
                                                    )
                                                );
                                                l.add(L);
                                                var k = a.fillPath({ seriesNumber: w }),
                                                    I = e.graphics.renderPaths(F(F({}, v), {}, { pathFrom: null === S ? f.areaPathsFrom[M] : S, pathTo: f.areaPathsTo[M], strokeWidth: 0, fill: k, drawShadow: !1 }));
                                                i.config.chart.dropShadow.enabled && new H(e.ctx).dropShadow(I, Object.assign({}, i.config.chart.dropShadow, { noUserSpaceOnUse: !0 }), w), l.add(I);
                                            }
                                            C.forEach(function (O, N) {
                                                var Q = new Dt(e.ctx).getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: w, dataPointIndex: N }),
                                                    tt = e.graphics.drawMarker(u[N].x, u[N].y, Q);
                                                tt.attr("rel", N), tt.attr("j", N), tt.attr("index", w), tt.node.setAttribute("default-marker-size", Q.pSize);
                                                var et = e.graphics.group({ class: "apexcharts-series-markers" });
                                                et && et.add(tt), p.add(et), l.add(p);
                                                var at = i.config.dataLabels;
                                                if (at.enabled) {
                                                    var ct = at.formatter(i.globals.series[w][N], { seriesIndex: w, dataPointIndex: N, w: i });
                                                    n.plotDataLabelsText({ x: u[N].x, y: u[N].y, text: ct, textAnchor: "middle", i: w, j: w, parent: x, offsetCorrection: !1, dataLabelsConfig: F({}, at) });
                                                }
                                                l.add(x);
                                            }),
                                                s.push(l);
                                        }),
                                        this.drawPolygons({ parent: g }),
                                        i.config.xaxis.labels.show)
                                    ) {
                                        var y = this.drawXAxisTexts();
                                        g.add(y);
                                    }
                                    return (
                                        s.forEach(function (C) {
                                            g.add(C);
                                        }),
                                        g.add(this.yaxisLabels),
                                        g
                                    );
                                },
                            },
                            {
                                key: "drawPolygons",
                                value: function (t) {
                                    for (var e = this, i = this.w, a = t.parent, s = new re(this.ctx), n = i.globals.yAxisScale[0].result.reverse(), o = n.length, r = [], d = this.size / (o - 1), c = 0; c < o; c++) r[c] = d * c;
                                    r.reverse();
                                    var g = [],
                                        u = [];
                                    r.forEach(function (p, x) {
                                        var y = z.getPolygonPos(p, e.dataPointsLen),
                                            C = "";
                                        y.forEach(function (w, P) {
                                            if (0 === x) {
                                                var l = e.graphics.drawLine(w.x, w.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[P] : e.polygons.connectorColors);
                                                u.push(l);
                                            }
                                            0 === P && e.yaxisLabelsTextsPos.push({ x: w.x, y: w.y }), (C += w.x + "," + w.y + " ");
                                        }),
                                            g.push(C);
                                    }),
                                        g.forEach(function (p, x) {
                                            var y = e.polygons.strokeColors,
                                                C = e.polygons.strokeWidth,
                                                w = e.graphics.drawPolygon(p, Array.isArray(y) ? y[x] : y, Array.isArray(C) ? C[x] : C, i.globals.radarPolygons.fill.colors[x]);
                                            a.add(w);
                                        }),
                                        u.forEach(function (p) {
                                            a.add(p);
                                        }),
                                        i.config.yaxis[0].show &&
                                            this.yaxisLabelsTextsPos.forEach(function (p, x) {
                                                var y = s.drawYAxisTexts(p.x, p.y, x, n[x]);
                                                e.yaxisLabels.add(y);
                                            });
                                },
                            },
                            {
                                key: "drawXAxisTexts",
                                value: function () {
                                    var t = this,
                                        e = this.w,
                                        i = e.config.xaxis.labels,
                                        a = this.graphics.group({ class: "apexcharts-xaxis" }),
                                        s = z.getPolygonPos(this.size, this.dataPointsLen);
                                    return (
                                        e.globals.labels.forEach(function (n, o) {
                                            var r = e.config.xaxis.labels.formatter,
                                                d = new Mt(t.ctx);
                                            if (s[o]) {
                                                var c = t.getTextPos(s[o], t.size),
                                                    g = r(n, { seriesIndex: -1, dataPointIndex: o, w: e });
                                                d.plotDataLabelsText({
                                                    x: c.newX,
                                                    y: c.newY,
                                                    text: g,
                                                    textAnchor: c.textAnchor,
                                                    i: o,
                                                    j: o,
                                                    parent: a,
                                                    color: Array.isArray(i.style.colors) && i.style.colors[o] ? i.style.colors[o] : "#a8a8a8",
                                                    dataLabelsConfig: F({ textAnchor: c.textAnchor, dropShadow: { enabled: !1 } }, i),
                                                    offsetCorrection: !1,
                                                });
                                            }
                                        }),
                                        a
                                    );
                                },
                            },
                            {
                                key: "createPaths",
                                value: function (t, e) {
                                    var i = this,
                                        a = [],
                                        s = [],
                                        n = [],
                                        o = [];
                                    if (t.length) {
                                        (s = [this.graphics.move(e.x, e.y)]), (o = [this.graphics.move(e.x, e.y)]);
                                        var r = this.graphics.move(t[0].x, t[0].y),
                                            d = this.graphics.move(t[0].x, t[0].y);
                                        t.forEach(function (c, g) {
                                            (r += i.graphics.line(c.x, c.y)), (d += i.graphics.line(c.x, c.y)), g === t.length - 1 && ((r += "Z"), (d += "Z"));
                                        }),
                                            a.push(r),
                                            n.push(d);
                                    }
                                    return { linePathsFrom: s, linePathsTo: a, areaPathsFrom: o, areaPathsTo: n };
                                },
                            },
                            {
                                key: "getTextPos",
                                value: function (t, e) {
                                    var i = "middle",
                                        a = t.x,
                                        s = t.y;
                                    return (
                                        Math.abs(t.x) >= 10 ? (t.x > 0 ? ((i = "start"), (a += 10)) : t.x < 0 && ((i = "end"), (a -= 10))) : (i = "middle"),
                                        Math.abs(t.y) >= e - 10 && (t.y < 0 ? (s -= 10) : t.y > 0 && (s += 10)),
                                        { textAnchor: i, newX: a, newY: s }
                                    );
                                },
                            },
                            {
                                key: "getPreviousPath",
                                value: function (t) {
                                    for (var e = this.w, i = null, a = 0; a < e.globals.previousPaths.length; a++) {
                                        var s = e.globals.previousPaths[a];
                                        s.paths.length > 0 && parseInt(s.realIndex, 10) === parseInt(t, 10) && void 0 !== e.globals.previousPaths[a].paths[0] && (i = e.globals.previousPaths[a].paths[0].d);
                                    }
                                    return i;
                                },
                            },
                            {
                                key: "getDataPointsPos",
                                value: function (t, e) {
                                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
                                    (t = t || []), (e = e || []);
                                    for (var a = [], s = 0; s < i; s++) {
                                        var n = {};
                                        (n.x = t[s] * Math.sin(e[s])), (n.y = -t[s] * Math.cos(e[s])), a.push(n);
                                    }
                                    return a;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Ie = (function (A) {
                    st(e, Ot);
                    var t = V(e);
                    function e(i) {
                        var a;
                        B(this, e), ((a = t.call(this, i)).ctx = i), (a.w = i.w), (a.animBeginArr = [0]), (a.animDur = 0);
                        var s = a.w;
                        return (
                            (a.startAngle = s.config.plotOptions.radialBar.startAngle),
                            (a.endAngle = s.config.plotOptions.radialBar.endAngle),
                            (a.totalAngle = Math.abs(s.config.plotOptions.radialBar.endAngle - s.config.plotOptions.radialBar.startAngle)),
                            (a.trackStartAngle = s.config.plotOptions.radialBar.track.startAngle),
                            (a.trackEndAngle = s.config.plotOptions.radialBar.track.endAngle),
                            (a.donutDataLabels = a.w.config.plotOptions.radialBar.dataLabels),
                            (a.radialDataLabels = a.donutDataLabels),
                            a.trackStartAngle || (a.trackStartAngle = a.startAngle),
                            a.trackEndAngle || (a.trackEndAngle = a.endAngle),
                            360 === a.endAngle && (a.endAngle = 359.99),
                            (a.margin = parseInt(s.config.plotOptions.radialBar.track.margin, 10)),
                            a
                        );
                    }
                    return (
                        m(e, [
                            {
                                key: "draw",
                                value: function (i) {
                                    var a = this.w,
                                        s = new E(this.ctx),
                                        n = s.group({ class: "apexcharts-radialbar" });
                                    if (a.globals.noData) return n;
                                    var o = s.group(),
                                        r = this.defaultSize / 2,
                                        d = a.globals.gridWidth / 2,
                                        c = this.defaultSize / 2.05;
                                    a.config.chart.sparkline.enabled || (c = c - a.config.stroke.width - a.config.chart.dropShadow.blur);
                                    var g = a.globals.fill.colors;
                                    if (a.config.plotOptions.radialBar.track.show) {
                                        var u = this.drawTracks({ size: c, centerX: d, centerY: r, colorArr: g, series: i });
                                        o.add(u);
                                    }
                                    var p = this.drawArcs({ size: c, centerX: d, centerY: r, colorArr: g, series: i }),
                                        x = 360;
                                    a.config.plotOptions.radialBar.startAngle < 0 && (x = this.totalAngle);
                                    var y = (360 - x) / 360;
                                    if (((a.globals.radialSize = c - c * y), this.radialDataLabels.value.show)) {
                                        var C = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
                                        a.globals.radialSize += C * y;
                                    }
                                    return o.add(p.g), "front" === a.config.plotOptions.radialBar.hollow.position && (p.g.add(p.elHollow), p.dataLabels && p.g.add(p.dataLabels)), n.add(o), n;
                                },
                            },
                            {
                                key: "drawTracks",
                                value: function (i) {
                                    var a = this.w,
                                        s = new E(this.ctx),
                                        n = s.group({ class: "apexcharts-tracks" }),
                                        o = new H(this.ctx),
                                        r = new vt(this.ctx),
                                        d = this.getStrokeWidth(i);
                                    i.size = i.size - d / 2;
                                    for (var c = 0; c < i.series.length; c++) {
                                        var g = s.group({ class: "apexcharts-radialbar-track apexcharts-track" });
                                        n.add(g), g.attr({ rel: c + 1 }), (i.size = i.size - d - this.margin);
                                        var u = a.config.plotOptions.radialBar.track,
                                            p = r.fillPath({ seriesNumber: 0, size: i.size, fillColors: Array.isArray(u.background) ? u.background[c] : u.background, solid: !0 }),
                                            x = this.trackStartAngle,
                                            y = this.trackEndAngle;
                                        Math.abs(y) + Math.abs(x) >= 360 && (y = 360 - Math.abs(this.startAngle) - 0.1);
                                        var C = s.drawPath({ d: "", stroke: p, strokeWidth: (d * parseInt(u.strokeWidth, 10)) / 100, fill: "none", strokeOpacity: u.opacity, classes: "apexcharts-radialbar-area" });
                                        u.dropShadow.enabled && o.dropShadow(C, u.dropShadow),
                                            g.add(C),
                                            C.attr("id", "apexcharts-radialbarTrack-" + c),
                                            this.animatePaths(C, { centerX: i.centerX, centerY: i.centerY, endAngle: y, startAngle: x, size: i.size, i: c, totalItems: 2, animBeginArr: 0, dur: 0, isTrack: !0, easing: a.globals.easing });
                                    }
                                    return n;
                                },
                            },
                            {
                                key: "drawArcs",
                                value: function (i) {
                                    var a = this.w,
                                        s = new E(this.ctx),
                                        n = new vt(this.ctx),
                                        o = new H(this.ctx),
                                        r = s.group(),
                                        d = this.getStrokeWidth(i);
                                    i.size = i.size - d / 2;
                                    var c = a.config.plotOptions.radialBar.hollow.background,
                                        g = i.size - d * i.series.length - this.margin * i.series.length - (d * parseInt(a.config.plotOptions.radialBar.track.strokeWidth, 10)) / 100 / 2,
                                        u = g - a.config.plotOptions.radialBar.hollow.margin;
                                    void 0 !== a.config.plotOptions.radialBar.hollow.image && (c = this.drawHollowImage(i, r, g, c));
                                    var p = this.drawHollow({ size: u, centerX: i.centerX, centerY: i.centerY, fill: c || "transparent" });
                                    a.config.plotOptions.radialBar.hollow.dropShadow.enabled && o.dropShadow(p, a.config.plotOptions.radialBar.hollow.dropShadow);
                                    var y = 1;
                                    !this.radialDataLabels.total.show && a.globals.series.length > 1 && (y = 0);
                                    var C = null;
                                    this.radialDataLabels.show && (C = this.renderInnerDataLabels(this.radialDataLabels, { hollowSize: g, centerX: i.centerX, centerY: i.centerY, opacity: y })),
                                        "back" === a.config.plotOptions.radialBar.hollow.position && (r.add(p), C && r.add(C));
                                    var w = !1;
                                    a.config.plotOptions.radialBar.inverseOrder && (w = !0);
                                    for (var P = w ? i.series.length - 1 : 0; w ? P >= 0 : P < i.series.length; w ? P-- : P++) {
                                        var l = s.group({ class: "apexcharts-series apexcharts-radial-series", seriesName: z.escapeString(a.globals.seriesNames[P]) });
                                        r.add(l), l.attr({ rel: P + 1, "data:realIndex": P }), this.ctx.series.addCollapsedClassToSeries(l, P), (i.size = i.size - d - this.margin);
                                        var f = n.fillPath({ seriesNumber: P, size: i.size, value: i.series[P] }),
                                            v = this.startAngle,
                                            S = void 0,
                                            M = z.negToZero(i.series[P] > 100 ? 100 : i.series[P]) / 100,
                                            L = Math.round(this.totalAngle * M) + this.startAngle,
                                            k = void 0;
                                        a.globals.dataChanged && ((S = this.startAngle), (k = Math.round((this.totalAngle * z.negToZero(a.globals.previousPaths[P])) / 100) + S)),
                                            Math.abs(L) + Math.abs(v) >= 360 && (L -= 0.01),
                                            Math.abs(k) + Math.abs(S) >= 360 && (k -= 0.01);
                                        var I = L - v,
                                            Y = Array.isArray(a.config.stroke.dashArray) ? a.config.stroke.dashArray[P] : a.config.stroke.dashArray,
                                            D = s.drawPath({ d: "", stroke: f, strokeWidth: d, fill: "none", fillOpacity: a.config.fill.opacity, classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + P, strokeDashArray: Y });
                                        E.setAttrs(D.node, { "data:angle": I, "data:value": i.series[P] }),
                                            a.config.chart.dropShadow.enabled && o.dropShadow(D, a.config.chart.dropShadow, P),
                                            o.setSelectionFilter(D, 0, P),
                                            this.addListeners(D, this.radialDataLabels),
                                            l.add(D),
                                            D.attr({ index: 0, j: P });
                                        var N = 0;
                                        !this.initialAnim || a.globals.resized || a.globals.dataChanged || (N = a.config.chart.animations.speed),
                                            a.globals.dataChanged && (N = a.config.chart.animations.dynamicAnimation.speed),
                                            (this.animDur = N / (1.2 * i.series.length) + this.animDur),
                                            this.animBeginArr.push(this.animDur),
                                            this.animatePaths(D, {
                                                centerX: i.centerX,
                                                centerY: i.centerY,
                                                endAngle: L,
                                                startAngle: v,
                                                prevEndAngle: k,
                                                prevStartAngle: S,
                                                size: i.size,
                                                i: P,
                                                totalItems: 2,
                                                animBeginArr: this.animBeginArr,
                                                dur: N,
                                                shouldSetPrevPaths: !0,
                                                easing: a.globals.easing,
                                            });
                                    }
                                    return { g: r, elHollow: p, dataLabels: C };
                                },
                            },
                            {
                                key: "drawHollow",
                                value: function (i) {
                                    var a = new E(this.ctx).drawCircle(2 * i.size);
                                    return a.attr({ class: "apexcharts-radialbar-hollow", cx: i.centerX, cy: i.centerY, r: i.size, fill: i.fill }), a;
                                },
                            },
                            {
                                key: "drawHollowImage",
                                value: function (i, a, s, n) {
                                    var o = this.w,
                                        r = new vt(this.ctx),
                                        d = z.randomId(),
                                        c = o.config.plotOptions.radialBar.hollow.image;
                                    if (o.config.plotOptions.radialBar.hollow.imageClipped)
                                        r.clippedImgArea({ width: s, height: s, image: c, patternID: "pattern".concat(o.globals.cuid).concat(d) }), (n = "url(#pattern".concat(o.globals.cuid).concat(d, ")"));
                                    else {
                                        var g = o.config.plotOptions.radialBar.hollow.imageWidth,
                                            u = o.config.plotOptions.radialBar.hollow.imageHeight;
                                        if (void 0 === g && void 0 === u) {
                                            var p = o.globals.dom.Paper.image(c).loaded(function (y) {
                                                this.move(i.centerX - y.width / 2 + o.config.plotOptions.radialBar.hollow.imageOffsetX, i.centerY - y.height / 2 + o.config.plotOptions.radialBar.hollow.imageOffsetY);
                                            });
                                            a.add(p);
                                        } else {
                                            var x = o.globals.dom.Paper.image(c).loaded(function (y) {
                                                this.move(i.centerX - g / 2 + o.config.plotOptions.radialBar.hollow.imageOffsetX, i.centerY - u / 2 + o.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(g, u);
                                            });
                                            a.add(x);
                                        }
                                    }
                                    return n;
                                },
                            },
                            {
                                key: "getStrokeWidth",
                                value: function (i) {
                                    return (i.size * (100 - parseInt(this.w.config.plotOptions.radialBar.hollow.size, 10))) / 100 / (i.series.length + 1) - this.margin;
                                },
                            },
                        ]),
                        e
                    );
                })(),
                b = (function (A) {
                    st(e, Tt);
                    var t = V(e);
                    function e() {
                        return B(this, e), t.apply(this, arguments);
                    }
                    return (
                        m(e, [
                            {
                                key: "draw",
                                value: function (i, a) {
                                    var s = this.w,
                                        n = new E(this.ctx);
                                    (this.rangeBarOptions = this.w.config.plotOptions.rangeBar),
                                        (this.series = i),
                                        (this.seriesRangeStart = s.globals.seriesRangeStart),
                                        (this.seriesRangeEnd = s.globals.seriesRangeEnd),
                                        this.barHelpers.initVariables(i);
                                    for (var o = n.group({ class: "apexcharts-rangebar-series apexcharts-plot-series" }), r = 0; r < i.length; r++) {
                                        var d,
                                            c,
                                            g,
                                            u,
                                            p = void 0,
                                            x = void 0,
                                            y = s.globals.comboCharts ? a[r] : r,
                                            C = n.group({ class: "apexcharts-series", seriesName: z.escapeString(s.globals.seriesNames[y]), rel: r + 1, "data:realIndex": y });
                                        this.ctx.series.addCollapsedClassToSeries(C, y), i[r].length > 0 && (this.visibleI = this.visibleI + 1);
                                        var w = 0,
                                            P = 0;
                                        this.yRatio.length > 1 && (this.yaxisIndex = y);
                                        var l = this.barHelpers.initialPositions();
                                        (x = l.y), (u = l.zeroW), (p = l.x), (P = l.barWidth), (w = l.barHeight), (d = l.xDivision), (c = l.yDivision), (g = l.zeroH);
                                        for (var f = n.group({ class: "apexcharts-datalabels", "data:realIndex": y }), v = n.group({ class: "apexcharts-rangebar-goals-markers" }), S = 0; S < s.globals.dataPoints; S++) {
                                            var M,
                                                L = this.barHelpers.getStrokeWidth(r, S, y),
                                                k = this.seriesRangeStart[r][S],
                                                I = this.seriesRangeEnd[r][S],
                                                Y = null,
                                                D = null,
                                                O = null,
                                                N = { x: p, y: x, strokeWidth: L, elSeries: C },
                                                Q = this.seriesLen;
                                            if ((s.config.plotOptions.bar.rangeBarGroupRows && (Q = 1), void 0 === s.config.series[r].data[S])) break;
                                            if (this.isHorizontal) {
                                                if (((O = x + w * this.visibleI), s.config.series[r].data[S].x)) {
                                                    var et = this.detectOverlappingBars({ i: r, j: S, barYPosition: O, srty: (c - w * Q) / 2, barHeight: w, yDivision: c, initPositions: l });
                                                    (w = et.barHeight), (O = et.barYPosition);
                                                }
                                                P = (Y = this.drawRangeBarPaths(F({ indexes: { i: r, j: S, realIndex: y }, barHeight: w, barYPosition: O, zeroW: u, yDivision: c, y1: k, y2: I }, N))).barWidth;
                                            } else {
                                                if ((s.globals.isXNumeric && (p = (s.globals.seriesX[r][S] - s.globals.minX) / this.xRatio - P / 2), (D = p + P * this.visibleI), s.config.series[r].data[S].x)) {
                                                    var ct = this.detectOverlappingBars({ i: r, j: S, barXPosition: D, srtx: (d - P * Q) / 2, barWidth: P, xDivision: d, initPositions: l });
                                                    (P = ct.barWidth), (D = ct.barXPosition);
                                                }
                                                w = (Y = this.drawRangeColumnPaths(F({ indexes: { i: r, j: S, realIndex: y }, barWidth: P, barXPosition: D, zeroH: g, xDivision: d }, N))).barHeight;
                                            }
                                            var ht = this.barHelpers.drawGoalLine({ barXPosition: Y.barXPosition, barYPosition: O, goalX: Y.goalX, goalY: Y.goalY, barHeight: w, barWidth: P });
                                            ht && v.add(ht), (x = Y.y), (p = Y.x);
                                            var ft = this.barHelpers.getPathFillColor(i, r, S, y);
                                            this.renderSeries(
                                                (q(
                                                    (M = {
                                                        realIndex: y,
                                                        pathFill: ft,
                                                        lineFill: s.globals.stroke.colors[y],
                                                        j: S,
                                                        i: r,
                                                        x: p,
                                                        y: x,
                                                        y1: k,
                                                        y2: I,
                                                        pathFrom: Y.pathFrom,
                                                        pathTo: Y.pathTo,
                                                        strokeWidth: L,
                                                        elSeries: C,
                                                        series: i,
                                                        barHeight: w,
                                                        barWidth: P,
                                                        barXPosition: D,
                                                        barYPosition: O,
                                                    }),
                                                    "barWidth",
                                                    P
                                                ),
                                                q(M, "elDataLabelsWrap", f),
                                                q(M, "elGoalsMarkers", v),
                                                q(M, "visibleSeries", this.visibleI),
                                                q(M, "type", "rangebar"),
                                                M)
                                            );
                                        }
                                        o.add(C);
                                    }
                                    return o;
                                },
                            },
                            {
                                key: "detectOverlappingBars",
                                value: function (i) {
                                    var a = i.i,
                                        s = i.j,
                                        n = i.barYPosition,
                                        o = i.barXPosition,
                                        r = i.srty,
                                        d = i.srtx,
                                        c = i.barHeight,
                                        g = i.barWidth,
                                        u = i.yDivision,
                                        p = i.xDivision,
                                        x = i.initPositions,
                                        y = this.w,
                                        C = [],
                                        w = y.config.series[a].data[s].rangeName,
                                        P = y.config.series[a].data[s].x,
                                        l = Array.isArray(P) ? P.join(" ") : P,
                                        f = y.globals.labels
                                            .map(function (S) {
                                                return Array.isArray(S) ? S.join(" ") : S;
                                            })
                                            .indexOf(l),
                                        v = y.globals.seriesRange[a].findIndex(function (S) {
                                            return S.x === l && S.overlaps.length > 0;
                                        });
                                    return (
                                        this.isHorizontal
                                            ? ((n = y.config.plotOptions.bar.rangeBarGroupRows ? r + u * f : r + c * this.visibleI + u * f),
                                              v > -1 &&
                                                  !y.config.plotOptions.bar.rangeBarOverlap &&
                                                  (C = y.globals.seriesRange[a][v].overlaps).indexOf(w) > -1 &&
                                                  (n = (c = x.barHeight / C.length) * this.visibleI + (u * (100 - parseInt(this.barOptions.barHeight, 10))) / 100 / 2 + c * (this.visibleI + C.indexOf(w)) + u * f))
                                            : (f > -1 && (o = y.config.plotOptions.bar.rangeBarGroupRows ? d + p * f : d + g * this.visibleI + p * f),
                                              v > -1 &&
                                                  !y.config.plotOptions.bar.rangeBarOverlap &&
                                                  (C = y.globals.seriesRange[a][v].overlaps).indexOf(w) > -1 &&
                                                  (o = (g = x.barWidth / C.length) * this.visibleI + (p * (100 - parseInt(this.barOptions.barWidth, 10))) / 100 / 2 + g * (this.visibleI + C.indexOf(w)) + p * f)),
                                        { barYPosition: n, barXPosition: o, barHeight: c, barWidth: g }
                                    );
                                },
                            },
                            {
                                key: "drawRangeColumnPaths",
                                value: function (i) {
                                    var a = i.indexes,
                                        s = i.x,
                                        n = i.xDivision,
                                        o = i.barWidth,
                                        r = i.barXPosition,
                                        d = i.zeroH,
                                        c = this.w,
                                        g = a.i,
                                        u = a.j,
                                        p = this.yRatio[this.yaxisIndex],
                                        x = a.realIndex,
                                        y = this.getRangeValue(x, u),
                                        C = Math.min(y.start, y.end),
                                        w = Math.max(y.start, y.end);
                                    null == this.series[g][u] ? (C = d) : ((C = d - C / p), (w = d - w / p));
                                    var P = Math.abs(w - C),
                                        l = this.barHelpers.getColumnPaths({ barXPosition: r, barWidth: o, y1: C, y2: w, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, realIndex: a.realIndex, i: x, j: u, w: c });
                                    return c.globals.isXNumeric || (s += n), { pathTo: l.pathTo, pathFrom: l.pathFrom, barHeight: P, x: s, y: w, goalY: this.barHelpers.getGoalValues("y", null, d, g, u), barXPosition: r };
                                },
                            },
                            {
                                key: "drawRangeBarPaths",
                                value: function (i) {
                                    var a = i.indexes,
                                        s = i.y,
                                        r = i.yDivision,
                                        d = i.barHeight,
                                        c = i.barYPosition,
                                        g = i.zeroW,
                                        u = this.w,
                                        p = g + i.y1 / this.invertedYRatio,
                                        x = g + i.y2 / this.invertedYRatio,
                                        y = Math.abs(x - p),
                                        C = this.barHelpers.getBarpaths({ barYPosition: c, barHeight: d, x1: p, x2: x, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, i: a.realIndex, realIndex: a.realIndex, j: a.j, w: u });
                                    return u.globals.isXNumeric || (s += r), { pathTo: C.pathTo, pathFrom: C.pathFrom, barWidth: y, x, goalX: this.barHelpers.getGoalValues("x", g, null, a.realIndex, a.j), y: s };
                                },
                            },
                            {
                                key: "getRangeValue",
                                value: function (i, a) {
                                    var s = this.w;
                                    return { start: s.globals.seriesRangeStart[i][a], end: s.globals.seriesRangeEnd[i][a] };
                                },
                            },
                        ]),
                        e
                    );
                })(),
                R = (function () {
                    function A(t) {
                        B(this, A), (this.w = t.w), (this.lineCtx = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "sameValueSeriesFix",
                                value: function (t, e) {
                                    var i = this.w;
                                    if (("gradient" === i.config.fill.type || "gradient" === i.config.fill.type[t]) && new $(this.lineCtx.ctx, i).seriesHaveSameValues(t)) {
                                        var a = e[t].slice();
                                        (a[a.length - 1] = a[a.length - 1] + 1e-6), (e[t] = a);
                                    }
                                    return e;
                                },
                            },
                            {
                                key: "calculatePoints",
                                value: function (t) {
                                    var e = t.series,
                                        a = t.x,
                                        s = t.y,
                                        n = t.i,
                                        o = t.j,
                                        r = t.prevY,
                                        d = this.w,
                                        c = [],
                                        g = [];
                                    if (0 === o) {
                                        var u = this.lineCtx.categoryAxisCorrection + d.config.markers.offsetX;
                                        d.globals.isXNumeric && (u = (d.globals.seriesX[t.realIndex][0] - d.globals.minX) / this.lineCtx.xRatio + d.config.markers.offsetX),
                                            c.push(u),
                                            g.push(z.isNumber(e[n][0]) ? r + d.config.markers.offsetY : null),
                                            c.push(a + d.config.markers.offsetX),
                                            g.push(z.isNumber(e[n][o + 1]) ? s + d.config.markers.offsetY : null);
                                    } else c.push(a + d.config.markers.offsetX), g.push(z.isNumber(e[n][o + 1]) ? s + d.config.markers.offsetY : null);
                                    return { x: c, y: g };
                                },
                            },
                            {
                                key: "checkPreviousPaths",
                                value: function (t) {
                                    for (var e = t.pathFromLine, i = t.pathFromArea, a = t.realIndex, s = this.w, n = 0; n < s.globals.previousPaths.length; n++) {
                                        var o = s.globals.previousPaths[n];
                                        ("line" === o.type || "area" === o.type) &&
                                            o.paths.length > 0 &&
                                            parseInt(o.realIndex, 10) === parseInt(a, 10) &&
                                            ("line" === o.type
                                                ? ((this.lineCtx.appendPathFrom = !1), (e = s.globals.previousPaths[n].paths[0].d))
                                                : "area" === o.type &&
                                                  ((this.lineCtx.appendPathFrom = !1),
                                                  (i = s.globals.previousPaths[n].paths[0].d),
                                                  s.config.stroke.show && s.globals.previousPaths[n].paths[1] && (e = s.globals.previousPaths[n].paths[1].d)));
                                    }
                                    return { pathFromLine: e, pathFromArea: i };
                                },
                            },
                            {
                                key: "determineFirstPrevY",
                                value: function (t) {
                                    var e,
                                        i = t.i,
                                        a = t.series,
                                        s = t.prevY,
                                        n = t.lineYPosition,
                                        o = this.w;
                                    if (void 0 !== (null === (e = a[i]) || void 0 === e ? void 0 : e[0]))
                                        s =
                                            (n = o.config.chart.stacked && i > 0 ? this.lineCtx.prevSeriesY[i - 1][0] : this.lineCtx.zeroY) -
                                            a[i][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] +
                                            2 * (this.lineCtx.isReversed ? a[i][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);
                                    else if (o.config.chart.stacked && i > 0 && void 0 === a[i][0])
                                        for (var r = i - 1; r >= 0; r--)
                                            if (null != a[r][0]) {
                                                s = n = this.lineCtx.prevSeriesY[r][0];
                                                break;
                                            }
                                    return { prevY: s, lineYPosition: n };
                                },
                            },
                        ]),
                        A
                    );
                })(),
                T = (function () {
                    function A(t, e, i) {
                        B(this, A),
                            (this.ctx = t),
                            (this.w = t.w),
                            (this.xyRatios = e),
                            (this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || i),
                            (this.scatter = new jt(this.ctx)),
                            (this.noNegatives = this.w.globals.minX === Number.MAX_VALUE),
                            (this.lineHelpers = new R(this)),
                            (this.markers = new Dt(this.ctx)),
                            (this.prevSeriesY = []),
                            (this.categoryAxisCorrection = 0),
                            (this.yaxisIndex = 0);
                    }
                    return (
                        m(A, [
                            {
                                key: "draw",
                                value: function (t, e, i, a) {
                                    var s = this.w,
                                        n = new E(this.ctx),
                                        o = s.globals.comboCharts ? e : s.config.chart.type,
                                        r = n.group({ class: "apexcharts-".concat(o, "-series apexcharts-plot-series") }),
                                        d = new $(this.ctx, s);
                                    (this.yRatio = this.xyRatios.yRatio),
                                        (this.zRatio = this.xyRatios.zRatio),
                                        (this.xRatio = this.xyRatios.xRatio),
                                        (this.baseLineY = this.xyRatios.baseLineY),
                                        (t = d.getLogSeries(t)),
                                        (this.yRatio = d.getLogYRatios(this.yRatio));
                                    for (var c = [], g = 0; g < t.length; g++) {
                                        t = this.lineHelpers.sameValueSeriesFix(g, t);
                                        var u = s.globals.comboCharts ? i[g] : g;
                                        this._initSerieVariables(t, g, u);
                                        var p = [],
                                            x = [],
                                            y = s.globals.padHorizontal + this.categoryAxisCorrection;
                                        this.ctx.series.addCollapsedClassToSeries(this.elSeries, u), s.globals.isXNumeric && s.globals.seriesX.length > 0 && (y = (s.globals.seriesX[u][0] - s.globals.minX) / this.xRatio), x.push(y);
                                        var C,
                                            w = y,
                                            P = void 0,
                                            l = w,
                                            f = this.zeroY,
                                            v = this.zeroY;
                                        (f = this.lineHelpers.determineFirstPrevY({ i: g, series: t, prevY: f, lineYPosition: 0 }).prevY),
                                            p.push(f),
                                            (C = f),
                                            "rangeArea" === o && (P = v = this.lineHelpers.determineFirstPrevY({ i: g, series: a, prevY: v, lineYPosition: 0 }).prevY);
                                        var S = {
                                                type: o,
                                                series: t,
                                                realIndex: u,
                                                i: g,
                                                x: y,
                                                y: 1,
                                                pX: w,
                                                pY: C,
                                                pathsFrom: this._calculatePathsFrom({ type: o, series: t, i: g, realIndex: u, prevX: l, prevY: f, prevY2: v }),
                                                linePaths: [],
                                                areaPaths: [],
                                                seriesIndex: i,
                                                lineYPosition: 0,
                                                xArrj: x,
                                                yArrj: p,
                                                seriesRangeEnd: a,
                                            },
                                            M = this._iterateOverDataPoints(F(F({}, S), {}, { iterations: "rangeArea" === o ? t[g].length - 1 : void 0, isRangeStart: !0 }));
                                        if ("rangeArea" === o) {
                                            var L = this._calculatePathsFrom({ series: a, i: g, realIndex: u, prevX: l, prevY: v }),
                                                k = this._iterateOverDataPoints(F(F({}, S), {}, { series: a, pY: P, pathsFrom: L, iterations: a[g].length - 1, isRangeStart: !1 }));
                                            (M.linePaths[0] = k.linePath + M.linePath), (M.pathFromLine = k.pathFromLine + M.pathFromLine);
                                        }
                                        this._handlePaths({ type: o, realIndex: u, i: g, paths: M }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), c.push(this.elSeries);
                                    }
                                    if (s.config.chart.stacked) for (var I = c.length; I > 0; I--) r.add(c[I - 1]);
                                    else for (var Y = 0; Y < c.length; Y++) r.add(c[Y]);
                                    return r;
                                },
                            },
                            {
                                key: "_initSerieVariables",
                                value: function (t, e, i) {
                                    var a = this.w,
                                        s = new E(this.ctx);
                                    (this.xDivision = a.globals.gridWidth / (a.globals.dataPoints - ("on" === a.config.xaxis.tickPlacement ? 1 : 0))),
                                        (this.strokeWidth = Array.isArray(a.config.stroke.width) ? a.config.stroke.width[i] : a.config.stroke.width),
                                        this.yRatio.length > 1 && (this.yaxisIndex = i),
                                        (this.isReversed = a.config.yaxis[this.yaxisIndex] && a.config.yaxis[this.yaxisIndex].reversed),
                                        (this.zeroY = a.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0)),
                                        (this.areaBottomY = this.zeroY),
                                        (this.zeroY > a.globals.gridHeight || "end" === a.config.plotOptions.area.fillTo) && (this.areaBottomY = a.globals.gridHeight),
                                        (this.categoryAxisCorrection = this.xDivision / 2),
                                        (this.elSeries = s.group({ class: "apexcharts-series", seriesName: z.escapeString(a.globals.seriesNames[i]) })),
                                        (this.elPointsMain = s.group({ class: "apexcharts-series-markers-wrap", "data:realIndex": i })),
                                        (this.elDataLabelsWrap = s.group({ class: "apexcharts-datalabels", "data:realIndex": i })),
                                        this.elSeries.attr({ "data:longestSeries": t[e].length === a.globals.dataPoints, rel: e + 1, "data:realIndex": i }),
                                        (this.appendPathFrom = !0);
                                },
                            },
                            {
                                key: "_calculatePathsFrom",
                                value: function (t) {
                                    var e,
                                        i,
                                        a,
                                        s,
                                        n = t.type,
                                        o = t.series,
                                        r = t.i,
                                        d = t.realIndex,
                                        c = t.prevX,
                                        g = t.prevY,
                                        u = t.prevY2,
                                        p = this.w,
                                        x = new E(this.ctx);
                                    if (null === o[r][0]) {
                                        for (var y = 0; y < o[r].length; y++)
                                            if (null !== o[r][y]) {
                                                (e = x.move((c = this.xDivision * y), (g = this.zeroY - o[r][y] / this.yRatio[this.yaxisIndex]))), (i = x.move(c, this.areaBottomY));
                                                break;
                                            }
                                    } else (e = x.move(c, g)), "rangeArea" === n && (e = x.move(c, u) + x.line(c, g)), (i = x.move(c, this.areaBottomY) + x.line(c, g));
                                    if (((a = x.move(-1, this.zeroY) + x.line(-1, this.zeroY)), (s = x.move(-1, this.zeroY) + x.line(-1, this.zeroY)), p.globals.previousPaths.length > 0)) {
                                        var C = this.lineHelpers.checkPreviousPaths({ pathFromLine: a, pathFromArea: s, realIndex: d });
                                        (a = C.pathFromLine), (s = C.pathFromArea);
                                    }
                                    return { prevX: c, prevY: g, linePath: e, areaPath: i, pathFromLine: a, pathFromArea: s };
                                },
                            },
                            {
                                key: "_handlePaths",
                                value: function (t) {
                                    var e = t.type,
                                        i = t.realIndex,
                                        a = t.i,
                                        s = t.paths,
                                        n = this.w,
                                        o = new E(this.ctx),
                                        r = new vt(this.ctx);
                                    this.prevSeriesY.push(s.yArrj), (n.globals.seriesXvalues[i] = s.xArrj), (n.globals.seriesYvalues[i] = s.yArrj);
                                    var d = n.config.forecastDataPoints;
                                    if (d.count > 0 && "rangeArea" !== e) {
                                        var c = n.globals.seriesXvalues[i][n.globals.seriesXvalues[i].length - d.count - 1],
                                            g = o.drawRect(c, 0, n.globals.gridWidth, n.globals.gridHeight, 0);
                                        n.globals.dom.elForecastMask.appendChild(g.node);
                                        var u = o.drawRect(0, 0, c, n.globals.gridHeight, 0);
                                        n.globals.dom.elNonForecastMask.appendChild(u.node);
                                    }
                                    this.pointsChart || n.globals.delayedElements.push({ el: this.elPointsMain.node, index: i });
                                    var p = { i: a, realIndex: i, animationDelay: a, initialSpeed: n.config.chart.animations.speed, dataChangeSpeed: n.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(e) };
                                    if ("area" === e)
                                        for (var x = r.fillPath({ seriesNumber: i }), y = 0; y < s.areaPaths.length; y++) {
                                            var C = o.renderPaths(F(F({}, p), {}, { pathFrom: s.pathFromArea, pathTo: s.areaPaths[y], stroke: "none", strokeWidth: 0, strokeLineCap: null, fill: x }));
                                            this.elSeries.add(C);
                                        }
                                    if (n.config.stroke.show && !this.pointsChart) {
                                        var w = null;
                                        if ("line" === e) w = r.fillPath({ seriesNumber: i, i: a });
                                        else if ("solid" === n.config.stroke.fill.type) w = n.globals.stroke.colors[i];
                                        else {
                                            var P = n.config.fill;
                                            (n.config.fill = n.config.stroke.fill), (w = r.fillPath({ seriesNumber: i, i: a })), (n.config.fill = P);
                                        }
                                        for (var l = 0; l < s.linePaths.length; l++) {
                                            var f = w;
                                            "rangeArea" === e && (f = r.fillPath({ seriesNumber: i }));
                                            var v = F(
                                                    F({}, p),
                                                    {},
                                                    { pathFrom: s.pathFromLine, pathTo: s.linePaths[l], stroke: w, strokeWidth: this.strokeWidth, strokeLineCap: n.config.stroke.lineCap, fill: "rangeArea" === e ? f : "none" }
                                                ),
                                                S = o.renderPaths(v);
                                            if ((this.elSeries.add(S), S.attr("fill-rule", "evenodd"), d.count > 0 && "rangeArea" !== e)) {
                                                var M = o.renderPaths(v);
                                                M.node.setAttribute("stroke-dasharray", d.dashArray),
                                                    d.strokeWidth && M.node.setAttribute("stroke-width", d.strokeWidth),
                                                    this.elSeries.add(M),
                                                    M.attr("clip-path", "url(#forecastMask".concat(n.globals.cuid, ")")),
                                                    S.attr("clip-path", "url(#nonForecastMask".concat(n.globals.cuid, ")"));
                                            }
                                        }
                                    }
                                },
                            },
                            {
                                key: "_iterateOverDataPoints",
                                value: function (t) {
                                    var e = t.type,
                                        i = t.series,
                                        a = t.iterations,
                                        s = t.realIndex,
                                        n = t.i,
                                        o = t.x,
                                        r = t.y,
                                        d = t.pX,
                                        c = t.pY,
                                        g = t.pathsFrom,
                                        u = t.linePaths,
                                        p = t.areaPaths,
                                        x = t.seriesIndex,
                                        y = t.lineYPosition,
                                        C = t.xArrj,
                                        w = t.yArrj,
                                        P = t.isRangeStart,
                                        l = t.seriesRangeEnd,
                                        f = this.w,
                                        v = new E(this.ctx),
                                        S = this.yRatio,
                                        M = g.prevY,
                                        L = g.linePath,
                                        k = g.areaPath,
                                        I = g.pathFromLine,
                                        Y = g.pathFromArea,
                                        D = z.isNumber(f.globals.minYArr[s]) ? f.globals.minYArr[s] : f.globals.minY;
                                    a || (a = f.globals.dataPoints > 1 ? f.globals.dataPoints - 1 : f.globals.dataPoints);
                                    for (var O = r, N = 0; N < a; N++) {
                                        var Q = null == i[n][N + 1];
                                        if (f.globals.isXNumeric) {
                                            var tt = f.globals.seriesX[s][N + 1];
                                            void 0 === f.globals.seriesX[s][N + 1] && (tt = f.globals.seriesX[s][a - 1]), (o = (tt - f.globals.minX) / this.xRatio);
                                        } else o += this.xDivision;
                                        (y =
                                            f.config.chart.stacked && n > 0 && f.globals.collapsedSeries.length < f.config.series.length - 1
                                                ? this.prevSeriesY[
                                                      (function (ct) {
                                                          for (var ht = ct, ft = 0; ft < f.globals.series.length; ft++)
                                                              if (f.globals.collapsedSeriesIndices.indexOf(ct) > -1) {
                                                                  ht--;
                                                                  break;
                                                              }
                                                          return ht >= 0 ? ht : 0;
                                                      })(n - 1)
                                                  ][N + 1]
                                                : this.zeroY),
                                            Q
                                                ? (r = y - D / S[this.yaxisIndex] + 2 * (this.isReversed ? D / S[this.yaxisIndex] : 0))
                                                : ((r = y - i[n][N + 1] / S[this.yaxisIndex] + 2 * (this.isReversed ? i[n][N + 1] / S[this.yaxisIndex] : 0)),
                                                  "rangeArea" === e && (O = y - l[n][N + 1] / S[this.yaxisIndex] + 2 * (this.isReversed ? l[n][N + 1] / S[this.yaxisIndex] : 0))),
                                            C.push(o),
                                            w.push(r);
                                        var et = this.lineHelpers.calculatePoints({ series: i, x: o, y: r, realIndex: s, i: n, j: N, prevY: M }),
                                            at = this._createPaths({ type: e, series: i, i: n, realIndex: s, j: N, x: o, y: r, y2: O, pX: d, pY: c, linePath: L, areaPath: k, linePaths: u, areaPaths: p, seriesIndex: x, isRangeStart: P });
                                        (p = at.areaPaths),
                                            (u = at.linePaths),
                                            (d = at.pX),
                                            (c = at.pY),
                                            (k = at.areaPath),
                                            (L = at.linePath),
                                            this.appendPathFrom && ((I += v.line(o, this.zeroY)), (Y += v.line(o, this.zeroY))),
                                            this.handleNullDataPoints(i, et, n, N, s),
                                            this._handleMarkersAndLabels({ type: e, pointsPos: et, i: n, j: N, realIndex: s, isRangeStart: P });
                                    }
                                    return { yArrj: w, xArrj: C, pathFromArea: Y, areaPaths: p, pathFromLine: I, linePaths: u, linePath: L, areaPath: k };
                                },
                            },
                            {
                                key: "_handleMarkersAndLabels",
                                value: function (t) {
                                    var e = t.type,
                                        i = t.pointsPos,
                                        a = t.isRangeStart,
                                        s = t.i,
                                        n = t.j,
                                        o = t.realIndex,
                                        r = this.w,
                                        d = new Mt(this.ctx);
                                    if (this.pointsChart) this.scatter.draw(this.elSeries, n, { realIndex: o, pointsPos: i, zRatio: this.zRatio, elParent: this.elPointsMain });
                                    else {
                                        r.globals.series[s].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
                                        var c = this.markers.plotChartMarkers(i, o, n + 1);
                                        null !== c && this.elPointsMain.add(c);
                                    }
                                    var g = d.drawDataLabel({ type: e, isRangeStart: a, pos: i, i: o, j: n + 1 });
                                    null !== g && this.elDataLabelsWrap.add(g);
                                },
                            },
                            {
                                key: "_createPaths",
                                value: function (t) {
                                    var e = t.type,
                                        i = t.series,
                                        a = t.i,
                                        s = t.realIndex,
                                        n = t.j,
                                        o = t.x,
                                        r = t.y,
                                        d = t.y2,
                                        c = t.pX,
                                        g = t.pY,
                                        u = t.linePath,
                                        p = t.areaPath,
                                        x = t.linePaths,
                                        y = t.areaPaths,
                                        C = t.seriesIndex,
                                        w = t.isRangeStart,
                                        P = this.w,
                                        l = new E(this.ctx),
                                        f = P.config.stroke.curve,
                                        v = this.areaBottomY;
                                    if ((Array.isArray(P.config.stroke.curve) && (f = Array.isArray(C) ? P.config.stroke.curve[C[a]] : P.config.stroke.curve[a]), "smooth" === f)) {
                                        var S = 0.35 * (o - c);
                                        P.globals.hasNullValues
                                            ? (null !== i[a][n] &&
                                                  (null !== i[a][n + 1]
                                                      ? ((u = l.move(c, g) + l.curve(c + S, g, o - S, r, o + 1, r)), (p = l.move(c + 1, g) + l.curve(c + S, g, o - S, r, o + 1, r) + l.line(o, v) + l.line(c, v) + "z"))
                                                      : ((u = l.move(c, g)), (p = l.move(c, g) + "z"))),
                                              x.push(u),
                                              y.push(p))
                                            : ((u += l.curve(c + S, g, o - S, r, o, r)), (p += l.curve(c + S, g, o - S, r, o, r))),
                                            (c = o),
                                            (g = r),
                                            n === i[a].length - 2 &&
                                                ((p = p + l.curve(c, g, o, r, o, v) + l.move(o, r) + "z"),
                                                "rangeArea" === e && w ? (u = u + l.curve(c, g, o, r, o, d) + l.move(o, d) + "z") : P.globals.hasNullValues || (x.push(u), y.push(p)));
                                    } else
                                        null === i[a][n + 1] && ((u += l.move(o, r)), (p = p + l.line(P.globals.isXNumeric ? (P.globals.seriesX[s][n] - P.globals.minX) / this.xRatio : o - this.xDivision, v) + l.move(o, r) + "z")),
                                            null === i[a][n] && ((u += l.move(o, r)), (p += l.move(o, v))),
                                            "stepline" === f ? ((u = u + l.line(o, null, "H") + l.line(null, r, "V")), (p = p + l.line(o, null, "H") + l.line(null, r, "V"))) : "straight" === f && ((u += l.line(o, r)), (p += l.line(o, r))),
                                            n === i[a].length - 2 && ((p = p + l.line(o, v) + l.move(o, r) + "z"), "rangeArea" === e && w ? (u = u + l.line(o, d) + l.move(o, d) + "z") : (x.push(u), y.push(p)));
                                    return { linePaths: x, areaPaths: y, pX: c, pY: g, linePath: u, areaPath: p };
                                },
                            },
                            {
                                key: "handleNullDataPoints",
                                value: function (t, e, i, a, s) {
                                    var n = this.w;
                                    if ((null === t[i][a] && n.config.markers.showNullDataPoints) || 1 === t[i].length) {
                                        var o = this.markers.plotChartMarkers(e, s, a + 1, this.strokeWidth - n.config.markers.strokeWidth / 2, !0);
                                        null !== o && this.elPointsMain.add(o);
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })();
            (window.TreemapSquared = {}),
                (window.TreemapSquared.generate = (function () {
                    function A(o, r, d, c) {
                        (this.xoffset = o),
                            (this.yoffset = r),
                            (this.height = c),
                            (this.width = d),
                            (this.shortestEdge = function () {
                                return Math.min(this.height, this.width);
                            }),
                            (this.getCoordinates = function (g) {
                                var u,
                                    p = [],
                                    x = this.xoffset,
                                    y = this.yoffset,
                                    C = s(g) / this.height,
                                    w = s(g) / this.width;
                                if (this.width >= this.height) for (u = 0; u < g.length; u++) p.push([x, y, x + C, y + g[u] / C]), (y += g[u] / C);
                                else for (u = 0; u < g.length; u++) p.push([x, y, x + g[u] / w, y + w]), (x += g[u] / w);
                                return p;
                            }),
                            (this.cutArea = function (g) {
                                var u;
                                if (this.width >= this.height) {
                                    var p = g / this.height;
                                    u = new A(this.xoffset + p, this.yoffset, this.width - p, this.height);
                                } else {
                                    var y = g / this.width;
                                    u = new A(this.xoffset, this.yoffset + y, this.width, this.height - y);
                                }
                                return u;
                            });
                    }
                    function t(o, r, d, c, g) {
                        return (
                            (c = void 0 === c ? 0 : c),
                            (g = void 0 === g ? 0 : g),
                            (function (p) {
                                var x,
                                    y,
                                    C = [];
                                for (x = 0; x < p.length; x++) for (y = 0; y < p[x].length; y++) C.push(p[x][y]);
                                return C;
                            })(
                                e(
                                    (function (p, x) {
                                        var y,
                                            C = [],
                                            w = x / s(p);
                                        for (y = 0; y < p.length; y++) C[y] = p[y] * w;
                                        return C;
                                    })(o, r * d),
                                    [],
                                    new A(c, g, r, d),
                                    []
                                )
                            )
                        );
                    }
                    function e(o, r, d, c) {
                        var g, u, p, x, y, C, w;
                        if (0 !== o.length)
                            return (
                                (g = d.shortestEdge()),
                                (y = u = o[0]),
                                (C = g),
                                0 === (x = r).length || ((w = x.slice()).push(y), i(x, C) >= i(w, C)) ? (r.push(u), e(o.slice(1), r, d, c)) : ((p = d.cutArea(s(r), c)), c.push(d.getCoordinates(r)), e(o, [], p, c)),
                                c
                            );
                        c.push(d.getCoordinates(r));
                    }
                    function i(o, r) {
                        var d = Math.min.apply(Math, o),
                            c = Math.max.apply(Math, o),
                            g = s(o);
                        return Math.max((Math.pow(r, 2) * c) / Math.pow(g, 2), Math.pow(g, 2) / (Math.pow(r, 2) * d));
                    }
                    function a(o) {
                        return o && o.constructor === Array;
                    }
                    function s(o) {
                        var r,
                            d = 0;
                        for (r = 0; r < o.length; r++) d += o[r];
                        return d;
                    }
                    function n(o) {
                        var r,
                            d = 0;
                        if (a(o[0])) for (r = 0; r < o.length; r++) d += n(o[r]);
                        else d = s(o);
                        return d;
                    }
                    return function o(r, d, c, g, u) {
                        (g = void 0 === g ? 0 : g), (u = void 0 === u ? 0 : u);
                        var p,
                            x,
                            y = [],
                            C = [];
                        if (a(r[0])) {
                            for (x = 0; x < r.length; x++) y[x] = n(r[x]);
                            for (p = t(y, d, c, g, u), x = 0; x < r.length; x++) C.push(o(r[x], p[x][2] - p[x][0], p[x][3] - p[x][1], p[x][0], p[x][1]));
                        } else C = t(r, d, c, g, u);
                        return C;
                    };
                })());
            var X,
                J,
                ot = (function () {
                    function A(t, e) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.strokeWidth = this.w.config.stroke.width), (this.helpers = new oe(t)), (this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation), (this.labels = []);
                    }
                    return (
                        m(A, [
                            {
                                key: "draw",
                                value: function (t) {
                                    var e = this,
                                        i = this.w,
                                        a = new E(this.ctx),
                                        s = new vt(this.ctx),
                                        n = a.group({ class: "apexcharts-treemap" });
                                    if (i.globals.noData) return n;
                                    var o = [];
                                    return (
                                        t.forEach(function (r) {
                                            var d = r.map(function (c) {
                                                return Math.abs(c);
                                            });
                                            o.push(d);
                                        }),
                                        (this.negRange = this.helpers.checkColorRange()),
                                        i.config.series.forEach(function (r, d) {
                                            r.data.forEach(function (c) {
                                                Array.isArray(e.labels[d]) || (e.labels[d] = []), e.labels[d].push(c.x);
                                            });
                                        }),
                                        window.TreemapSquared.generate(o, i.globals.gridWidth, i.globals.gridHeight).forEach(function (r, d) {
                                            var c = a.group({ class: "apexcharts-series apexcharts-treemap-series", seriesName: z.escapeString(i.globals.seriesNames[d]), rel: d + 1, "data:realIndex": d });
                                            if (i.config.chart.dropShadow.enabled) {
                                                var g = i.config.chart.dropShadow;
                                                new H(e.ctx).dropShadow(n, g, d);
                                            }
                                            var u = a.group({ class: "apexcharts-data-labels" });
                                            r.forEach(function (p, x) {
                                                var y = p[0],
                                                    C = p[1],
                                                    w = p[2],
                                                    P = p[3],
                                                    l = a.drawRect(y, C, w - y, P - C, 0, "#fff", 1, e.strokeWidth, i.config.plotOptions.treemap.useFillColorAsStroke ? v : i.globals.stroke.colors[d]);
                                                l.attr({ cx: y, cy: C, index: d, i: d, j: x, width: w - y, height: P - C });
                                                var f = e.helpers.getShadeColor(i.config.chart.type, d, x, e.negRange),
                                                    v = f.color;
                                                void 0 !== i.config.series[d].data[x] && i.config.series[d].data[x].fillColor && (v = i.config.series[d].data[x].fillColor);
                                                var S = s.fillPath({ color: v, seriesNumber: d, dataPointIndex: x });
                                                l.node.classList.add("apexcharts-treemap-rect"), l.attr({ fill: S }), e.helpers.addListeners(l);
                                                var M = { x: y + (w - y) / 2, y: C + (P - C) / 2, width: 0, height: 0 },
                                                    L = { x: y, y: C, width: w - y, height: P - C };
                                                if (i.config.chart.animations.enabled && !i.globals.dataChanged) {
                                                    var k = 1;
                                                    i.globals.resized || (k = i.config.chart.animations.speed), e.animateTreemap(l, M, L, k);
                                                }
                                                i.globals.dataChanged &&
                                                    e.dynamicAnim.enabled &&
                                                    i.globals.shouldAnimate &&
                                                    (i.globals.previousPaths[d] && i.globals.previousPaths[d][x] && i.globals.previousPaths[d][x].rect && (M = i.globals.previousPaths[d][x].rect),
                                                    e.animateTreemap(l, M, L, e.dynamicAnim.speed));
                                                var Y = e.getFontSize(p),
                                                    D = i.config.dataLabels.formatter(e.labels[d][x], { value: i.globals.series[d][x], seriesIndex: d, dataPointIndex: x, w: i });
                                                "truncate" === i.config.plotOptions.treemap.dataLabels.format && ((Y = parseInt(i.config.dataLabels.style.fontSize, 10)), (D = e.truncateLabels(D, Y, y, C, w, P)));
                                                var O = e.helpers.calculateDataLabels({ text: D, x: (y + w) / 2, y: (C + P) / 2 + e.strokeWidth / 2 + Y / 3, i: d, j: x, colorProps: f, fontSize: Y, series: t });
                                                i.config.dataLabels.enabled && O && e.rotateToFitLabel(O, Y, D, y, C, w, P), c.add(l), null !== O && c.add(O);
                                            }),
                                                c.add(u),
                                                n.add(c);
                                        }),
                                        n
                                    );
                                },
                            },
                            {
                                key: "getFontSize",
                                value: function (t) {
                                    var n,
                                        e = this.w,
                                        o =
                                            (function r(d) {
                                                var c,
                                                    g = 0;
                                                if (Array.isArray(d[0])) for (c = 0; c < d.length; c++) g += r(d[c]);
                                                else for (c = 0; c < d.length; c++) g += d[c].length;
                                                return g;
                                            })(this.labels) /
                                            (function r(d) {
                                                var c,
                                                    g = 0;
                                                if (Array.isArray(d[0])) for (c = 0; c < d.length; c++) g += r(d[c]);
                                                else for (c = 0; c < d.length; c++) g += 1;
                                                return g;
                                            })(this.labels);
                                    return (n = Math.pow((t[2] - t[0]) * (t[3] - t[1]), 0.5)), Math.min(n / o, parseInt(e.config.dataLabels.style.fontSize, 10));
                                },
                            },
                            {
                                key: "rotateToFitLabel",
                                value: function (t, e, i, a, s, n, o) {
                                    var r = new E(this.ctx),
                                        d = r.getTextRects(i, e);
                                    if (d.width + this.w.config.stroke.width + 5 > n - a && d.width <= o - s) {
                                        var c = r.rotateAroundCenter(t.node);
                                        t.node.setAttribute(
                                            "transform",
                                            "rotate(-90 "
                                                .concat(c.x, " ")
                                                .concat(c.y, ") translate(")
                                                .concat(d.height / 3, ")")
                                        );
                                    }
                                },
                            },
                            {
                                key: "truncateLabels",
                                value: function (t, e, i, a, s, n) {
                                    var o = new E(this.ctx),
                                        r = o.getTextRects(t, e).width + this.w.config.stroke.width + 5 > s - i && n - a > s - i ? n - a : s - i,
                                        d = o.getTextBasedOnMaxWidth({ text: t, maxWidth: r, fontSize: e });
                                    return t.length !== d.length && r / e < 5 ? "" : d;
                                },
                            },
                            {
                                key: "animateTreemap",
                                value: function (t, e, i, a) {
                                    var s = new j(this.ctx);
                                    s.animateRect(t, { x: e.x, y: e.y, width: e.width, height: e.height }, { x: i.x, y: i.y, width: i.width, height: i.height }, a, function () {
                                        s.animationCompleted(t);
                                    });
                                },
                            },
                        ]),
                        A
                    );
                })(),
                kt = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w), (this.timeScaleArray = []), (this.utc = this.w.config.xaxis.labels.datetimeUTC);
                    }
                    return (
                        m(A, [
                            {
                                key: "calculateTimeScaleTicks",
                                value: function (t, e) {
                                    var i = this,
                                        a = this.w;
                                    if (a.globals.allSeriesCollapsed) return (a.globals.labels = []), (a.globals.timescaleLabels = []), [];
                                    var s = new gt(this.ctx),
                                        n = (e - t) / 864e5;
                                    this.determineInterval(n), (a.globals.disableZoomIn = !1), (a.globals.disableZoomOut = !1), n < 0.00011574074074074075 ? (a.globals.disableZoomIn = !0) : n > 5e4 && (a.globals.disableZoomOut = !0);
                                    var o = s.getTimeUnitsfromTimestamp(t, e, this.utc),
                                        r = a.globals.gridWidth / n,
                                        d = r / 24,
                                        c = d / 60,
                                        g = c / 60,
                                        u = Math.floor(24 * n),
                                        p = Math.floor(1440 * n),
                                        x = Math.floor(86400 * n),
                                        y = Math.floor(n),
                                        C = Math.floor(n / 30),
                                        w = Math.floor(n / 365),
                                        P = { minMillisecond: o.minMillisecond, minSecond: o.minSecond, minMinute: o.minMinute, minHour: o.minHour, minDate: o.minDate, minMonth: o.minMonth, minYear: o.minYear },
                                        l = {
                                            firstVal: P,
                                            currentMillisecond: P.minMillisecond,
                                            currentSecond: P.minSecond,
                                            currentMinute: P.minMinute,
                                            currentHour: P.minHour,
                                            currentMonthDate: P.minDate,
                                            currentDate: P.minDate,
                                            currentMonth: P.minMonth,
                                            currentYear: P.minYear,
                                            daysWidthOnXAxis: r,
                                            hoursWidthOnXAxis: d,
                                            minutesWidthOnXAxis: c,
                                            secondsWidthOnXAxis: g,
                                            numberOfSeconds: x,
                                            numberOfMinutes: p,
                                            numberOfHours: u,
                                            numberOfDays: y,
                                            numberOfMonths: C,
                                            numberOfYears: w,
                                        };
                                    switch (this.tickInterval) {
                                        case "years":
                                            this.generateYearScale(l);
                                            break;
                                        case "months":
                                        case "half_year":
                                            this.generateMonthScale(l);
                                            break;
                                        case "months_days":
                                        case "months_fortnight":
                                        case "days":
                                        case "week_days":
                                            this.generateDayScale(l);
                                            break;
                                        case "hours":
                                            this.generateHourScale(l);
                                            break;
                                        case "minutes_fives":
                                        case "minutes":
                                            this.generateMinuteScale(l);
                                            break;
                                        case "seconds_tens":
                                        case "seconds_fives":
                                        case "seconds":
                                            this.generateSecondScale(l);
                                    }
                                    var f = this.timeScaleArray.map(function (v) {
                                        var S = { position: v.position, unit: v.unit, year: v.year, day: v.day ? v.day : 1, hour: v.hour ? v.hour : 0, month: v.month + 1 };
                                        return "month" === v.unit
                                            ? F(F({}, S), {}, { day: 1, value: v.value + 1 })
                                            : "day" === v.unit || "hour" === v.unit
                                            ? F(F({}, S), {}, { value: v.value })
                                            : "minute" === v.unit
                                            ? F(F({}, S), {}, { value: v.value, minute: v.value })
                                            : "second" === v.unit
                                            ? F(F({}, S), {}, { value: v.value, minute: v.minute, second: v.second })
                                            : v;
                                    });
                                    return f.filter(function (v) {
                                        var S = 1,
                                            M = Math.ceil(a.globals.gridWidth / 120),
                                            L = v.value;
                                        void 0 !== a.config.xaxis.tickAmount && (M = a.config.xaxis.tickAmount), f.length > M && (S = Math.floor(f.length / M));
                                        var k = !1,
                                            I = !1;
                                        switch (i.tickInterval) {
                                            case "years":
                                                "year" === v.unit && (k = !0);
                                                break;
                                            case "half_year":
                                                (S = 7), "year" === v.unit && (k = !0);
                                                break;
                                            case "months":
                                                (S = 1), "year" === v.unit && (k = !0);
                                                break;
                                            case "months_fortnight":
                                                (S = 15), ("year" !== v.unit && "month" !== v.unit) || (k = !0), 30 === L && (I = !0);
                                                break;
                                            case "months_days":
                                                (S = 10), "month" === v.unit && (k = !0), 30 === L && (I = !0);
                                                break;
                                            case "week_days":
                                                (S = 8), "month" === v.unit && (k = !0);
                                                break;
                                            case "days":
                                                (S = 1), "month" === v.unit && (k = !0);
                                                break;
                                            case "hours":
                                                "day" === v.unit && (k = !0);
                                                break;
                                            case "minutes_fives":
                                            case "seconds_fives":
                                                L % 5 != 0 && (I = !0);
                                                break;
                                            case "seconds_tens":
                                                L % 10 != 0 && (I = !0);
                                        }
                                        if ("hours" === i.tickInterval || "minutes_fives" === i.tickInterval || "seconds_tens" === i.tickInterval || "seconds_fives" === i.tickInterval) {
                                            if (!I) return !0;
                                        } else if ((L % S == 0 || k) && !I) return !0;
                                    });
                                },
                            },
                            {
                                key: "recalcDimensionsBasedOnFormat",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = this.formatDates(t),
                                        s = this.removeOverlappingTS(a);
                                    (i.globals.timescaleLabels = s.slice()), new Nt(this.ctx).plotCoords();
                                },
                            },
                            {
                                key: "determineInterval",
                                value: function (t) {
                                    var e = 24 * t,
                                        i = 60 * e;
                                    switch (!0) {
                                        case t / 365 > 5:
                                            this.tickInterval = "years";
                                            break;
                                        case t > 800:
                                            this.tickInterval = "half_year";
                                            break;
                                        case t > 180:
                                            this.tickInterval = "months";
                                            break;
                                        case t > 90:
                                            this.tickInterval = "months_fortnight";
                                            break;
                                        case t > 60:
                                            this.tickInterval = "months_days";
                                            break;
                                        case t > 30:
                                            this.tickInterval = "week_days";
                                            break;
                                        case t > 2:
                                            this.tickInterval = "days";
                                            break;
                                        case e > 2.4:
                                            this.tickInterval = "hours";
                                            break;
                                        case i > 15:
                                            this.tickInterval = "minutes_fives";
                                            break;
                                        case i > 5:
                                            this.tickInterval = "minutes";
                                            break;
                                        case i > 1:
                                            this.tickInterval = "seconds_tens";
                                            break;
                                        case 60 * i > 20:
                                            this.tickInterval = "seconds_fives";
                                            break;
                                        default:
                                            this.tickInterval = "seconds";
                                    }
                                },
                            },
                            {
                                key: "generateYearScale",
                                value: function (t) {
                                    var e = t.firstVal,
                                        i = t.currentMonth,
                                        a = t.currentYear,
                                        s = t.daysWidthOnXAxis,
                                        n = t.numberOfYears,
                                        o = e.minYear,
                                        r = 0,
                                        d = new gt(this.ctx),
                                        c = "year";
                                    if (e.minDate > 1 || e.minMonth > 0) {
                                        var g = d.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);
                                        (r = (d.determineDaysOfYear(e.minYear) - g + 1) * s), this.timeScaleArray.push({ position: r, value: (o = e.minYear + 1), unit: c, year: o, month: z.monthMod(i + 1) });
                                    } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({ position: r, value: o, unit: c, year: a, month: z.monthMod(i + 1) });
                                    for (var u = o, p = r, x = 0; x < n; x++) u++, (p = d.determineDaysOfYear(u - 1) * s + p), this.timeScaleArray.push({ position: p, value: u, unit: c, year: u, month: 1 });
                                },
                            },
                            {
                                key: "generateMonthScale",
                                value: function (t) {
                                    var e = t.firstVal,
                                        i = t.currentMonthDate,
                                        a = t.currentMonth,
                                        s = t.currentYear,
                                        n = t.daysWidthOnXAxis,
                                        o = t.numberOfMonths,
                                        r = a,
                                        d = 0,
                                        c = new gt(this.ctx),
                                        g = "month",
                                        u = 0;
                                    if (e.minDate > 1) {
                                        (d = (c.determineDaysOfMonths(a + 1, e.minYear) - i + 1) * n), (r = z.monthMod(a + 1));
                                        var p = s + u,
                                            x = z.monthMod(r),
                                            y = r;
                                        0 === r && ((g = "year"), (y = p), (x = 1), (p += u += 1)), this.timeScaleArray.push({ position: d, value: y, unit: g, year: p, month: x });
                                    } else this.timeScaleArray.push({ position: d, value: r, unit: g, year: s, month: z.monthMod(a) });
                                    for (var C = r + 1, w = d, P = 0, l = 1; P < o; P++, l++) {
                                        0 === (C = z.monthMod(C)) ? ((g = "year"), (u += 1)) : (g = "month");
                                        var f = this._getYear(s, C, u);
                                        (w = c.determineDaysOfMonths(C, f) * n + w), this.timeScaleArray.push({ position: w, value: 0 === C ? f : C, unit: g, year: f, month: 0 === C ? 1 : C }), C++;
                                    }
                                },
                            },
                            {
                                key: "generateDayScale",
                                value: function (t) {
                                    var e = t.firstVal,
                                        i = t.currentMonth,
                                        a = t.currentYear,
                                        s = t.hoursWidthOnXAxis,
                                        n = t.numberOfDays,
                                        o = new gt(this.ctx),
                                        r = "day",
                                        d = e.minDate + 1,
                                        c = d,
                                        g = function (l, f, v) {
                                            return l > o.determineDaysOfMonths(f + 1, v) && ((c = 1), (r = "month"), (p = f += 1)), f;
                                        },
                                        u = (24 - e.minHour) * s,
                                        p = d,
                                        x = g(c, i, a);
                                    0 === e.minHour && 1 === e.minDate
                                        ? ((u = 0), (p = z.monthMod(e.minMonth)), (r = "month"), (c = e.minDate), n++)
                                        : 1 !== e.minDate && 0 === e.minHour && 0 === e.minMinute && ((u = 0), (p = d = e.minDate), (x = g((c = d), i, a))),
                                        this.timeScaleArray.push({ position: u, value: p, unit: r, year: this._getYear(a, x, 0), month: z.monthMod(x), day: c });
                                    for (var y = u, C = 0; C < n; C++) {
                                        (r = "day"), (x = g((c += 1), x, this._getYear(a, x, 0)));
                                        var w = this._getYear(a, x, 0);
                                        y = 24 * s + y;
                                        var P = 1 === c ? z.monthMod(x) : c;
                                        this.timeScaleArray.push({ position: y, value: P, unit: r, year: w, month: z.monthMod(x), day: P });
                                    }
                                },
                            },
                            {
                                key: "generateHourScale",
                                value: function (t) {
                                    var e = t.firstVal,
                                        i = t.currentDate,
                                        a = t.currentMonth,
                                        s = t.currentYear,
                                        n = t.minutesWidthOnXAxis,
                                        o = t.numberOfHours,
                                        r = new gt(this.ctx),
                                        d = "hour",
                                        g = function (S, M) {
                                            return S > r.determineDaysOfMonths(M + 1, s) ? (M += 1) : M;
                                        },
                                        u = 60 - (e.minMinute + e.minSecond / 60),
                                        p = u * n,
                                        x = e.minHour + 1,
                                        y = x + 1;
                                    60 === u && ((p = 0), (y = (x = e.minHour) + 1));
                                    var S,
                                        M,
                                        C = i,
                                        w = g(C, a);
                                    this.timeScaleArray.push({ position: p, value: x, unit: d, day: C, hour: y, year: s, month: z.monthMod(w) });
                                    for (var P = p, l = 0; l < o; l++) {
                                        (d = "hour"), y >= 24 && ((y = 0), (d = "day"), (w = ((S = C += 1), (M = w), S > r.determineDaysOfMonths(M + 1, s) && ((C = 1), (M += 1)), { month: M, date: C }).month), (w = g(C, w)));
                                        var f = this._getYear(s, w, 0);
                                        this.timeScaleArray.push({ position: (P = 60 * n + P), value: 0 === y ? C : y, unit: d, hour: y, day: C, year: f, month: z.monthMod(w) }), y++;
                                    }
                                },
                            },
                            {
                                key: "generateMinuteScale",
                                value: function (t) {
                                    for (
                                        var d = t.minutesWidthOnXAxis,
                                            g = t.numberOfMinutes,
                                            u = t.currentMinute + 1,
                                            p = t.currentDate,
                                            x = t.currentMonth,
                                            y = t.currentYear,
                                            C = t.currentHour,
                                            w = (60 - t.currentSecond - t.currentMillisecond / 1e3) * t.secondsWidthOnXAxis,
                                            P = 0;
                                        P < g;
                                        P++
                                    )
                                        u >= 60 && ((u = 0), 24 === (C += 1) && (C = 0)),
                                            this.timeScaleArray.push({ position: w, value: u, unit: "minute", hour: C, minute: u, day: p, year: this._getYear(y, x, 0), month: z.monthMod(x) }),
                                            (w += d),
                                            u++;
                                },
                            },
                            {
                                key: "generateSecondScale",
                                value: function (t) {
                                    for (
                                        var d = t.secondsWidthOnXAxis,
                                            c = t.numberOfSeconds,
                                            g = t.currentSecond + 1,
                                            u = t.currentMinute,
                                            p = t.currentDate,
                                            x = t.currentMonth,
                                            y = t.currentYear,
                                            C = t.currentHour,
                                            w = ((1e3 - t.currentMillisecond) / 1e3) * d,
                                            P = 0;
                                        P < c;
                                        P++
                                    )
                                        g >= 60 && ((g = 0), ++u >= 60 && ((u = 0), 24 == ++C && (C = 0))),
                                            this.timeScaleArray.push({ position: w, value: g, unit: "second", hour: C, minute: u, second: g, day: p, year: this._getYear(y, x, 0), month: z.monthMod(x) }),
                                            (w += d),
                                            g++;
                                },
                            },
                            {
                                key: "createRawDateString",
                                value: function (t, e) {
                                    var i = t.year;
                                    return (
                                        0 === t.month && (t.month = 1),
                                        (i += "-" + ("0" + t.month.toString()).slice(-2)),
                                        (i += "day" === t.unit ? ("day" === t.unit ? "-" + ("0" + e).slice(-2) : "-01") : "-" + ("0" + (t.day ? t.day : "1")).slice(-2)),
                                        (i += "hour" === t.unit ? ("hour" === t.unit ? "T" + ("0" + e).slice(-2) : "T00") : "T" + ("0" + (t.hour ? t.hour : "0")).slice(-2)),
                                        (i += "minute" === t.unit ? ":" + ("0" + e).slice(-2) : ":" + (t.minute ? ("0" + t.minute).slice(-2) : "00")),
                                        (i += "second" === t.unit ? ":" + ("0" + e).slice(-2) : ":00"),
                                        this.utc && (i += ".000Z"),
                                        i
                                    );
                                },
                            },
                            {
                                key: "formatDates",
                                value: function (t) {
                                    var e = this,
                                        i = this.w;
                                    return t.map(function (a) {
                                        var s = a.value.toString(),
                                            n = new gt(e.ctx),
                                            o = e.createRawDateString(a, s),
                                            r = n.getDate(n.parseDate(o));
                                        if ((e.utc || (r = n.getDate(n.parseDateWithTimezone(o))), void 0 === i.config.xaxis.labels.format)) {
                                            var d = "dd MMM",
                                                c = i.config.xaxis.labels.datetimeFormatter;
                                            "year" === a.unit && (d = c.year),
                                                "month" === a.unit && (d = c.month),
                                                "day" === a.unit && (d = c.day),
                                                "hour" === a.unit && (d = c.hour),
                                                "minute" === a.unit && (d = c.minute),
                                                "second" === a.unit && (d = c.second),
                                                (s = n.formatDate(r, d));
                                        } else s = n.formatDate(r, i.config.xaxis.labels.format);
                                        return { dateString: o, position: a.position, value: s, unit: a.unit, year: a.year, month: a.month };
                                    });
                                },
                            },
                            {
                                key: "removeOverlappingTS",
                                value: function (t) {
                                    var e,
                                        i = this,
                                        a = new E(this.ctx),
                                        s = !1;
                                    t.length > 0 &&
                                        t[0].value &&
                                        t.every(function (r) {
                                            return r.value.length === t[0].value.length;
                                        }) &&
                                        ((s = !0), (e = a.getTextRects(t[0].value).width));
                                    var n = 0;
                                    return t
                                        .map(function (r, d) {
                                            if (d > 0 && i.w.config.xaxis.labels.hideOverlappingLabels) {
                                                var c = s ? e : a.getTextRects(t[n].value).width;
                                                return r.position > t[n].position + c + 10 ? ((n = d), r) : null;
                                            }
                                            return r;
                                        })
                                        .filter(function (r) {
                                            return null !== r;
                                        });
                                },
                            },
                            {
                                key: "_getYear",
                                value: function (t, e, i) {
                                    return t + Math.floor(e / 12) + i;
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Bt = (function () {
                    function A(t, e) {
                        B(this, A), (this.ctx = e), (this.w = e.w), (this.el = t);
                    }
                    return (
                        m(A, [
                            {
                                key: "setupElements",
                                value: function () {
                                    var t = this.w.globals,
                                        e = this.w.config,
                                        i = e.chart.type;
                                    (t.axisCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].indexOf(i) > -1),
                                        (t.xyCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble"].indexOf(i) > -1),
                                        (t.isBarHorizontal = ("bar" === e.chart.type || "rangeBar" === e.chart.type || "boxPlot" === e.chart.type) && e.plotOptions.bar.horizontal),
                                        (t.chartClass = ".apexcharts" + t.chartID),
                                        (t.dom.baseEl = this.el),
                                        (t.dom.elWrap = document.createElement("div")),
                                        E.setAttrs(t.dom.elWrap, { id: t.chartClass.substring(1), class: "apexcharts-canvas " + t.chartClass.substring(1) }),
                                        this.el.appendChild(t.dom.elWrap),
                                        (t.dom.Paper = new window.SVG.Doc(t.dom.elWrap)),
                                        t.dom.Paper.attr({ class: "apexcharts-svg", "xmlns:data": "ApexChartsNS", transform: "translate(".concat(e.chart.offsetX, ", ").concat(e.chart.offsetY, ")") }),
                                        (t.dom.Paper.node.style.background = e.chart.background),
                                        this.setSVGDimensions(),
                                        (t.dom.elLegendForeign = document.createElementNS(t.SVGNS, "foreignObject")),
                                        E.setAttrs(t.dom.elLegendForeign, { x: 0, y: 0, width: t.svgWidth, height: t.svgHeight }),
                                        (t.dom.elLegendWrap = document.createElement("div")),
                                        t.dom.elLegendWrap.classList.add("apexcharts-legend"),
                                        t.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"),
                                        t.dom.elLegendForeign.appendChild(t.dom.elLegendWrap),
                                        t.dom.Paper.node.appendChild(t.dom.elLegendForeign),
                                        (t.dom.elGraphical = t.dom.Paper.group().attr({ class: "apexcharts-inner apexcharts-graphical" })),
                                        (t.dom.elDefs = t.dom.Paper.defs()),
                                        t.dom.Paper.add(t.dom.elGraphical),
                                        t.dom.elGraphical.add(t.dom.elDefs);
                                },
                            },
                            {
                                key: "plotChartType",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = i.config,
                                        s = i.globals,
                                        n = { series: [], i: [] },
                                        o = { series: [], i: [] },
                                        r = { series: [], i: [] },
                                        d = { series: [], i: [] },
                                        c = { series: [], i: [] },
                                        g = { series: [], i: [] },
                                        u = { series: [], i: [] },
                                        p = { series: [], i: [] },
                                        x = { series: [], seriesRangeEnd: [], i: [] };
                                    s.series.map(function (M, L) {
                                        var k = 0;
                                        void 0 !== t[L].type
                                            ? ("column" === t[L].type || "bar" === t[L].type
                                                  ? (s.series.length > 1 && a.plotOptions.bar.horizontal && console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"),
                                                    c.series.push(M),
                                                    c.i.push(L),
                                                    k++,
                                                    (i.globals.columnSeries = c.series))
                                                  : "area" === t[L].type
                                                  ? (o.series.push(M), o.i.push(L), k++)
                                                  : "line" === t[L].type
                                                  ? (n.series.push(M), n.i.push(L), k++)
                                                  : "scatter" === t[L].type
                                                  ? (r.series.push(M), r.i.push(L))
                                                  : "bubble" === t[L].type
                                                  ? (d.series.push(M), d.i.push(L), k++)
                                                  : "candlestick" === t[L].type
                                                  ? (g.series.push(M), g.i.push(L), k++)
                                                  : "boxPlot" === t[L].type
                                                  ? (u.series.push(M), u.i.push(L), k++)
                                                  : "rangeBar" === t[L].type
                                                  ? (p.series.push(M), p.i.push(L), k++)
                                                  : "rangeArea" === t[L].type
                                                  ? (x.series.push(s.seriesRangeStart[L]), x.seriesRangeEnd.push(s.seriesRangeEnd[L]), x.i.push(L), k++)
                                                  : console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble/candlestick/boxPlot/rangeBar/rangeArea"),
                                              k > 1 && (s.comboCharts = !0))
                                            : (n.series.push(M), n.i.push(L));
                                    });
                                    var y = new T(this.ctx, e),
                                        C = new Qt(this.ctx, e);
                                    this.ctx.pie = new Ot(this.ctx);
                                    var w = new Ie(this.ctx);
                                    this.ctx.rangeBar = new b(this.ctx, e);
                                    var P = new ke(this.ctx),
                                        l = [];
                                    if (s.comboCharts) {
                                        if ((o.series.length > 0 && l.push(y.draw(o.series, "area", o.i)), c.series.length > 0))
                                            if (i.config.chart.stacked) {
                                                var f = new ne(this.ctx, e);
                                                l.push(f.draw(c.series, c.i));
                                            } else (this.ctx.bar = new Tt(this.ctx, e)), l.push(this.ctx.bar.draw(c.series, c.i));
                                        if (
                                            (x.series.length > 0 && l.push(y.draw(x.series, "rangeArea", x.i, x.seriesRangeEnd)),
                                            n.series.length > 0 && l.push(y.draw(n.series, "line", n.i)),
                                            g.series.length > 0 && l.push(C.draw(g.series, "candlestick", g.i)),
                                            u.series.length > 0 && l.push(C.draw(u.series, "boxPlot", u.i)),
                                            p.series.length > 0 && l.push(this.ctx.rangeBar.draw(p.series, p.i)),
                                            r.series.length > 0)
                                        ) {
                                            var v = new T(this.ctx, e, !0);
                                            l.push(v.draw(r.series, "scatter", r.i));
                                        }
                                        if (d.series.length > 0) {
                                            var S = new T(this.ctx, e, !0);
                                            l.push(S.draw(d.series, "bubble", d.i));
                                        }
                                    } else
                                        switch (a.chart.type) {
                                            case "line":
                                                l = y.draw(s.series, "line");
                                                break;
                                            case "area":
                                                l = y.draw(s.series, "area");
                                                break;
                                            case "bar":
                                                a.chart.stacked ? (l = new ne(this.ctx, e).draw(s.series)) : ((this.ctx.bar = new Tt(this.ctx, e)), (l = this.ctx.bar.draw(s.series)));
                                                break;
                                            case "candlestick":
                                                l = new Qt(this.ctx, e).draw(s.series, "candlestick");
                                                break;
                                            case "boxPlot":
                                                l = new Qt(this.ctx, e).draw(s.series, a.chart.type);
                                                break;
                                            case "rangeBar":
                                                l = this.ctx.rangeBar.draw(s.series);
                                                break;
                                            case "rangeArea":
                                                l = y.draw(s.seriesRangeStart, "rangeArea", void 0, s.seriesRangeEnd);
                                                break;
                                            case "heatmap":
                                                l = new Te(this.ctx, e).draw(s.series);
                                                break;
                                            case "treemap":
                                                l = new ot(this.ctx, e).draw(s.series);
                                                break;
                                            case "pie":
                                            case "donut":
                                            case "polarArea":
                                                l = this.ctx.pie.draw(s.series);
                                                break;
                                            case "radialBar":
                                                l = w.draw(s.series);
                                                break;
                                            case "radar":
                                                l = P.draw(s.series);
                                                break;
                                            default:
                                                l = y.draw(s.series);
                                        }
                                    return l;
                                },
                            },
                            {
                                key: "setSVGDimensions",
                                value: function () {
                                    var t = this.w.globals,
                                        e = this.w.config;
                                    (t.svgWidth = e.chart.width), (t.svgHeight = e.chart.height);
                                    var i = z.getDimensions(this.el),
                                        a = e.chart.width
                                            .toString()
                                            .split(/[0-9]+/g)
                                            .pop();
                                    "%" === a
                                        ? z.isNumber(i[0]) && (0 === i[0].width && (i = z.getDimensions(this.el.parentNode)), (t.svgWidth = (i[0] * parseInt(e.chart.width, 10)) / 100))
                                        : ("px" !== a && "" !== a) || (t.svgWidth = parseInt(e.chart.width, 10));
                                    var s = e.chart.height
                                        .toString()
                                        .split(/[0-9]+/g)
                                        .pop();
                                    if ("auto" !== t.svgHeight && "" !== t.svgHeight)
                                        if ("%" === s) {
                                            var n = z.getDimensions(this.el.parentNode);
                                            t.svgHeight = (n[1] * parseInt(e.chart.height, 10)) / 100;
                                        } else t.svgHeight = parseInt(e.chart.height, 10);
                                    else t.svgHeight = t.axisCharts ? t.svgWidth / 1.61 : t.svgWidth / 1.2;
                                    t.svgWidth < 0 && (t.svgWidth = 0),
                                        t.svgHeight < 0 && (t.svgHeight = 0),
                                        E.setAttrs(t.dom.Paper.node, { width: t.svgWidth, height: t.svgHeight }),
                                        "%" !== s && (t.dom.Paper.node.parentNode.parentNode.style.minHeight = t.svgHeight + (e.chart.sparkline.enabled ? 0 : t.axisCharts ? e.chart.parentHeightOffset : 0) + "px"),
                                        (t.dom.elWrap.style.width = t.svgWidth + "px"),
                                        (t.dom.elWrap.style.height = t.svgHeight + "px");
                                },
                            },
                            {
                                key: "shiftGraphPosition",
                                value: function () {
                                    var t = this.w.globals;
                                    E.setAttrs(t.dom.elGraphical.node, { transform: "translate(" + t.translateX + ", " + t.translateY + ")" });
                                },
                            },
                            {
                                key: "resizeNonAxisCharts",
                                value: function () {
                                    var t = this.w,
                                        e = t.globals,
                                        i = 0,
                                        a = t.config.chart.sparkline.enabled ? 1 : 15;
                                    (a += t.config.grid.padding.bottom),
                                        ("top" !== t.config.legend.position && "bottom" !== t.config.legend.position) || !t.config.legend.show || t.config.legend.floating || (i = new te(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
                                    var s = t.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"),
                                        n = 2.05 * t.globals.radialSize;
                                    if (s && !t.config.chart.sparkline.enabled && 0 !== t.config.plotOptions.radialBar.startAngle) {
                                        var o = z.getBoundingClientRect(s);
                                        (n = o.bottom), (n = Math.max(2.05 * t.globals.radialSize, o.bottom - o.top));
                                    }
                                    var d = n + e.translateY + i + a;
                                    e.dom.elLegendForeign && e.dom.elLegendForeign.setAttribute("height", d),
                                        (t.config.chart.height && String(t.config.chart.height).indexOf("%") > 0) ||
                                            ((e.dom.elWrap.style.height = d + "px"), E.setAttrs(e.dom.Paper.node, { height: d }), (e.dom.Paper.node.parentNode.parentNode.style.minHeight = d + "px"));
                                },
                            },
                            {
                                key: "coreCalculations",
                                value: function () {
                                    new Ut(this.ctx).init();
                                },
                            },
                            {
                                key: "resetGlobals",
                                value: function () {
                                    var t = this,
                                        e = function () {
                                            return t.w.config.series.map(function (s) {
                                                return [];
                                            });
                                        },
                                        i = new Kt(),
                                        a = this.w.globals;
                                    i.initGlobalVars(a), (a.seriesXvalues = e()), (a.seriesYvalues = e());
                                },
                            },
                            {
                                key: "isMultipleY",
                                value: function () {
                                    if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return (this.w.globals.isMultipleYAxis = !0), !0;
                                },
                            },
                            {
                                key: "xySettings",
                                value: function () {
                                    var t = null,
                                        e = this.w;
                                    if (e.globals.axisCharts) {
                                        if (
                                            ("back" === e.config.xaxis.crosshairs.position && new Jt(this.ctx).drawXCrosshairs(),
                                            "back" === e.config.yaxis[0].crosshairs.position && new Jt(this.ctx).drawYCrosshairs(),
                                            "datetime" === e.config.xaxis.type && void 0 === e.config.xaxis.labels.formatter)
                                        ) {
                                            this.ctx.timeScale = new kt(this.ctx);
                                            var i = [];
                                            isFinite(e.globals.minX) && isFinite(e.globals.maxX) && !e.globals.isBarHorizontal
                                                ? (i = this.ctx.timeScale.calculateTimeScaleTicks(e.globals.minX, e.globals.maxX))
                                                : e.globals.isBarHorizontal && (i = this.ctx.timeScale.calculateTimeScaleTicks(e.globals.minY, e.globals.maxY)),
                                                this.ctx.timeScale.recalcDimensionsBasedOnFormat(i);
                                        }
                                        t = new $(this.ctx).getCalculatedRatios();
                                    }
                                    return t;
                                },
                            },
                            {
                                key: "updateSourceChart",
                                value: function (t) {
                                    (this.ctx.w.globals.selection = void 0), this.ctx.updateHelpers._updateOptions({ chart: { selection: { xaxis: { min: t.w.globals.minX, max: t.w.globals.maxX } } } }, !1, !1);
                                },
                            },
                            {
                                key: "setupBrushHandler",
                                value: function () {
                                    var t = this,
                                        e = this.w;
                                    if (e.config.chart.brush.enabled && "function" != typeof e.config.chart.events.selection) {
                                        var i = Array.isArray(e.config.chart.brush.targets) || [e.config.chart.brush.target];
                                        i.forEach(function (a) {
                                            var s = ApexCharts.getChartByID(a);
                                            (s.w.globals.brushSource = t.ctx),
                                                "function" != typeof s.w.config.chart.events.zoomed &&
                                                    (s.w.config.chart.events.zoomed = function () {
                                                        t.updateSourceChart(s);
                                                    }),
                                                "function" != typeof s.w.config.chart.events.scrolled &&
                                                    (s.w.config.chart.events.scrolled = function () {
                                                        t.updateSourceChart(s);
                                                    });
                                        }),
                                            (e.config.chart.events.selection = function (a, s) {
                                                i.forEach(function (n) {
                                                    var o = ApexCharts.getChartByID(n),
                                                        r = z.clone(e.config.yaxis);
                                                    if (e.config.chart.brush.autoScaleYaxis && 1 === o.w.globals.series.length) {
                                                        var d = new Lt(o);
                                                        r = d.autoScaleY(o, r, s);
                                                    }
                                                    var c = o.w.config.yaxis.reduce(function (g, u, p) {
                                                        return [].concat(G(g), [F(F({}, o.w.config.yaxis[p]), {}, { min: r[0].min, max: r[0].max })]);
                                                    }, []);
                                                    o.ctx.updateHelpers._updateOptions({ xaxis: { min: s.xaxis.min, max: s.xaxis.max }, yaxis: c }, !1, !1, !1, !1);
                                                });
                                            });
                                    }
                                },
                            },
                        ]),
                        A
                    );
                })(),
                It = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "_updateOptions",
                                value: function (t) {
                                    var e = this,
                                        i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                                        a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                        s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
                                        n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                                    return new Promise(function (o) {
                                        var r = [e.ctx];
                                        s && (r = e.ctx.getSyncedCharts()),
                                            e.ctx.w.globals.isExecCalled && ((r = [e.ctx]), (e.ctx.w.globals.isExecCalled = !1)),
                                            r.forEach(function (d, c) {
                                                var g = d.w;
                                                if (
                                                    ((g.globals.shouldAnimate = a),
                                                    i || ((g.globals.resized = !0), (g.globals.dataChanged = !0), a && d.series.getPreviousPaths()),
                                                    t &&
                                                        "object" === _(t) &&
                                                        ((d.config = new Xt(t)),
                                                        (t = $.extendArrayProps(d.config, t, g)),
                                                        d.w.globals.chartID !== e.ctx.w.globals.chartID && delete t.series,
                                                        (g.config = z.extend(g.config, t)),
                                                        n &&
                                                            ((g.globals.lastXAxis = t.xaxis ? z.clone(t.xaxis) : []),
                                                            (g.globals.lastYAxis = t.yaxis ? z.clone(t.yaxis) : []),
                                                            (g.globals.initialConfig = z.extend({}, g.config)),
                                                            (g.globals.initialSeries = z.clone(g.config.series)),
                                                            t.series)))
                                                ) {
                                                    for (var u = 0; u < g.globals.collapsedSeriesIndices.length; u++) {
                                                        var p = g.config.series[g.globals.collapsedSeriesIndices[u]];
                                                        g.globals.collapsedSeries[u].data = g.globals.axisCharts ? p.data.slice() : p;
                                                    }
                                                    for (var x = 0; x < g.globals.ancillaryCollapsedSeriesIndices.length; x++) {
                                                        var y = g.config.series[g.globals.ancillaryCollapsedSeriesIndices[x]];
                                                        g.globals.ancillaryCollapsedSeries[x].data = g.globals.axisCharts ? y.data.slice() : y;
                                                    }
                                                    d.series.emptyCollapsedSeries(g.config.series);
                                                }
                                                return d.update(t).then(function () {
                                                    c === r.length - 1 && o(d);
                                                });
                                            });
                                    });
                                },
                            },
                            {
                                key: "_updateSeries",
                                value: function (t, e) {
                                    var i = this,
                                        a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                                    return new Promise(function (s) {
                                        var n,
                                            o = i.w;
                                        return (
                                            (o.globals.shouldAnimate = e),
                                            (o.globals.dataChanged = !0),
                                            e && i.ctx.series.getPreviousPaths(),
                                            o.globals.axisCharts
                                                ? (0 ===
                                                      (n = t.map(function (r, d) {
                                                          return i._extendSeries(r, d);
                                                      })).length && (n = [{ data: [] }]),
                                                  (o.config.series = n))
                                                : (o.config.series = t.slice()),
                                            a && ((o.globals.initialConfig.series = z.clone(o.config.series)), (o.globals.initialSeries = z.clone(o.config.series))),
                                            i.ctx.update().then(function () {
                                                s(i.ctx);
                                            })
                                        );
                                    });
                                },
                            },
                            {
                                key: "_extendSeries",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = i.config.series[e];
                                    return F(
                                        F({}, i.config.series[e]),
                                        {},
                                        { name: t.name ? t.name : a && a.name, color: t.color ? t.color : a && a.color, type: t.type ? t.type : a && a.type, group: t.group ? t.group : a && a.group, data: t.data ? t.data : a && a.data }
                                    );
                                },
                            },
                            {
                                key: "toggleDataPointSelection",
                                value: function (t, e) {
                                    var i = this.w,
                                        a = null,
                                        s = ".apexcharts-series[data\\:realIndex='".concat(t, "']");
                                    return (
                                        i.globals.axisCharts
                                            ? (a = i.globals.dom.Paper.select("".concat(s, " path[j='").concat(e, "'], ").concat(s, " circle[j='").concat(e, "'], ").concat(s, " rect[j='").concat(e, "']")).members[0])
                                            : void 0 === e &&
                                              ((a = i.globals.dom.Paper.select("".concat(s, " path[j='").concat(t, "']")).members[0]),
                                              ("pie" !== i.config.chart.type && "polarArea" !== i.config.chart.type && "donut" !== i.config.chart.type) || this.ctx.pie.pieClicked(t)),
                                        a ? (new E(this.ctx).pathMouseDown(a, null), a.node ? a.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null)
                                    );
                                },
                            },
                            {
                                key: "forceXAxisUpdate",
                                value: function (t) {
                                    var e = this.w;
                                    if (
                                        (["min", "max"].forEach(function (a) {
                                            void 0 !== t.xaxis[a] && ((e.config.xaxis[a] = t.xaxis[a]), (e.globals.lastXAxis[a] = t.xaxis[a]));
                                        }),
                                        t.xaxis.categories && t.xaxis.categories.length && (e.config.xaxis.categories = t.xaxis.categories),
                                        e.config.xaxis.convertedCatToNumeric)
                                    ) {
                                        var i = new Et(t);
                                        t = i.convertCatToNumericXaxis(t, this.ctx);
                                    }
                                    return t;
                                },
                            },
                            {
                                key: "forceYAxisUpdate",
                                value: function (t) {
                                    return (
                                        t.chart &&
                                            t.chart.stacked &&
                                            "100%" === t.chart.stackType &&
                                            (Array.isArray(t.yaxis)
                                                ? t.yaxis.forEach(function (e, i) {
                                                      (t.yaxis[i].min = 0), (t.yaxis[i].max = 100);
                                                  })
                                                : ((t.yaxis.min = 0), (t.yaxis.max = 100))),
                                        t
                                    );
                                },
                            },
                            {
                                key: "revertDefaultAxisMinMax",
                                value: function (t) {
                                    var e = this,
                                        i = this.w,
                                        a = i.globals.lastXAxis,
                                        s = i.globals.lastYAxis;
                                    t && t.xaxis && (a = t.xaxis),
                                        t && t.yaxis && (s = t.yaxis),
                                        (i.config.xaxis.min = a.min),
                                        (i.config.xaxis.max = a.max),
                                        i.config.yaxis.map(function (o, r) {
                                            i.globals.zoomed || void 0 !== s[r]
                                                ? (function (o) {
                                                      void 0 !== s[o] && ((i.config.yaxis[o].min = s[o].min), (i.config.yaxis[o].max = s[o].max));
                                                  })(r)
                                                : void 0 !== e.ctx.opts.yaxis[r] && ((o.min = e.ctx.opts.yaxis[r].min), (o.max = e.ctx.opts.yaxis[r].max));
                                        });
                                },
                            },
                        ]),
                        A
                    );
                })();
            (X = "undefined" != typeof window ? window : void 0),
                (J = function (A, t) {
                    var e = ((void 0 !== this ? this : A).SVG = function (l) {
                        if (e.supported) return (l = new e.Doc(l)), e.parser.draw || e.prepare(), l;
                    });
                    if (((e.ns = "http://www.w3.org/2000/svg"), (e.xmlns = "http://www.w3.org/2000/xmlns/"), (e.xlink = "http://www.w3.org/1999/xlink"), (e.svgjs = "http://svgjs.dev"), (e.supported = !0), !e.supported)) return !1;
                    (e.did = 1e3),
                        (e.eid = function (l) {
                            return "Svgjs" + c(l) + e.did++;
                        }),
                        (e.create = function (l) {
                            var f = t.createElementNS(this.ns, l);
                            return f.setAttribute("id", this.eid(l)), f;
                        }),
                        (e.extend = function () {
                            var l, f;
                            f = (l = [].slice.call(arguments)).pop();
                            for (var v = l.length - 1; v >= 0; v--) if (l[v]) for (var S in f) l[v].prototype[S] = f[S];
                            e.Set && e.Set.inherit && e.Set.inherit();
                        }),
                        (e.invent = function (l) {
                            var f =
                                "function" == typeof l.create
                                    ? l.create
                                    : function () {
                                          this.constructor.call(this, e.create(l.create));
                                      };
                            return l.inherit && (f.prototype = new l.inherit()), l.extend && e.extend(f, l.extend), l.construct && e.extend(l.parent || e.Container, l.construct), f;
                        }),
                        (e.adopt = function (l) {
                            return l
                                ? l.instance
                                    ? l.instance
                                    : (((f =
                                          "svg" == l.nodeName
                                              ? l.parentNode instanceof A.SVGElement
                                                  ? new e.Nested()
                                                  : new e.Doc()
                                              : "linearGradient" == l.nodeName
                                              ? new e.Gradient("linear")
                                              : "radialGradient" == l.nodeName
                                              ? new e.Gradient("radial")
                                              : e[c(l.nodeName)]
                                              ? new e[c(l.nodeName)]()
                                              : new e.Element(l)).type = l.nodeName),
                                      (f.node = l),
                                      (l.instance = f),
                                      f instanceof e.Doc && f.namespace().defs(),
                                      f.setData(JSON.parse(l.getAttribute("svgjs:data")) || {}),
                                      f)
                                : null;
                            var f;
                        }),
                        (e.prepare = function () {
                            var l = t.getElementsByTagName("body")[0],
                                f = (l ? new e.Doc(l) : e.adopt(t.documentElement).nested()).size(2, 0);
                            e.parser = { body: l || t.documentElement, draw: f.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node, poly: f.polyline().node, path: f.path().node, native: e.create("svg") };
                        }),
                        (e.parser = { native: e.create("svg") }),
                        t.addEventListener(
                            "DOMContentLoaded",
                            function () {
                                e.parser.draw || e.prepare();
                            },
                            !1
                        ),
                        (e.regex = {
                            numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
                            hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
                            rgb: /rgb\((\d+),(\d+),(\d+)\)/,
                            reference: /#([a-z0-9\-_]+)/i,
                            transforms: /\)\s*,?\s*/,
                            whitespace: /\s/g,
                            isHex: /^#[a-f0-9]{3,6}$/i,
                            isRgb: /^rgb\(/,
                            isCss: /[^:]+:[^;]+;?/,
                            isBlank: /^(\s+)?$/,
                            isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                            isPercent: /^-?[\d\.]+%$/,
                            isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
                            delimiter: /[\s,]+/,
                            hyphen: /([^e])\-/gi,
                            pathLetters: /[MLHVCSQTAZ]/gi,
                            isPathLetter: /[MLHVCSQTAZ]/i,
                            numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
                            dots: /\./g,
                        }),
                        (e.utils = {
                            map: function (l, f) {
                                for (var v = l.length, S = [], M = 0; M < v; M++) S.push(f(l[M]));
                                return S;
                            },
                            filter: function (l, f) {
                                for (var v = l.length, S = [], M = 0; M < v; M++) f(l[M]) && S.push(l[M]);
                                return S;
                            },
                            filterSVGElements: function (l) {
                                return this.filter(l, function (f) {
                                    return f instanceof A.SVGElement;
                                });
                            },
                        }),
                        (e.defaults = {
                            attrs: {
                                "fill-opacity": 1,
                                "stroke-opacity": 1,
                                "stroke-width": 0,
                                "stroke-linejoin": "miter",
                                "stroke-linecap": "butt",
                                fill: "#000000",
                                stroke: "#000000",
                                opacity: 1,
                                x: 0,
                                y: 0,
                                cx: 0,
                                cy: 0,
                                width: 0,
                                height: 0,
                                r: 0,
                                rx: 0,
                                ry: 0,
                                offset: 0,
                                "stop-opacity": 1,
                                "stop-color": "#000000",
                                "font-size": 16,
                                "font-family": "Helvetica, Arial, sans-serif",
                                "text-anchor": "start",
                            },
                        }),
                        (e.Color = function (l) {
                            var f, v;
                            (this.r = 0),
                                (this.g = 0),
                                (this.b = 0),
                                l &&
                                    ("string" == typeof l
                                        ? e.regex.isRgb.test(l)
                                            ? ((f = e.regex.rgb.exec(l.replace(e.regex.whitespace, ""))), (this.r = parseInt(f[1])), (this.g = parseInt(f[2])), (this.b = parseInt(f[3])))
                                            : e.regex.isHex.test(l) &&
                                              ((f = e.regex.hex.exec(4 == (v = l).length ? ["#", v.substring(1, 2), v.substring(1, 2), v.substring(2, 3), v.substring(2, 3), v.substring(3, 4), v.substring(3, 4)].join("") : v)),
                                              (this.r = parseInt(f[1], 16)),
                                              (this.g = parseInt(f[2], 16)),
                                              (this.b = parseInt(f[3], 16)))
                                        : "object" === _(l) && ((this.r = l.r), (this.g = l.g), (this.b = l.b)));
                        }),
                        e.extend(e.Color, {
                            toString: function () {
                                return this.toHex();
                            },
                            toHex: function () {
                                return "#" + g(this.r) + g(this.g) + g(this.b);
                            },
                            toRgb: function () {
                                return "rgb(" + [this.r, this.g, this.b].join() + ")";
                            },
                            brightness: function () {
                                return (this.r / 255) * 0.3 + (this.g / 255) * 0.59 + (this.b / 255) * 0.11;
                            },
                            morph: function (l) {
                                return (this.destination = new e.Color(l)), this;
                            },
                            at: function (l) {
                                return this.destination
                                    ? new e.Color({ r: ~~(this.r + (this.destination.r - this.r) * (l = l < 0 ? 0 : l > 1 ? 1 : l)), g: ~~(this.g + (this.destination.g - this.g) * l), b: ~~(this.b + (this.destination.b - this.b) * l) })
                                    : this;
                            },
                        }),
                        (e.Color.test = function (l) {
                            return e.regex.isHex.test((l += "")) || e.regex.isRgb.test(l);
                        }),
                        (e.Color.isRgb = function (l) {
                            return l && "number" == typeof l.r && "number" == typeof l.g && "number" == typeof l.b;
                        }),
                        (e.Color.isColor = function (l) {
                            return e.Color.isRgb(l) || e.Color.test(l);
                        }),
                        (e.Array = function (l, f) {
                            0 == (l = (l || []).valueOf()).length && f && (l = f.valueOf()), (this.value = this.parse(l));
                        }),
                        e.extend(e.Array, {
                            toString: function () {
                                return this.value.join(" ");
                            },
                            valueOf: function () {
                                return this.value;
                            },
                            parse: function (l) {
                                return (l = l.valueOf()), Array.isArray(l) ? l : this.split(l);
                            },
                        }),
                        (e.PointArray = function (l, f) {
                            e.Array.call(this, l, f || [[0, 0]]);
                        }),
                        (e.PointArray.prototype = new e.Array()),
                        (e.PointArray.prototype.constructor = e.PointArray);
                    for (
                        var i = {
                                M: function (l, f, v) {
                                    return (f.x = v.x = l[0]), (f.y = v.y = l[1]), ["M", f.x, f.y];
                                },
                                L: function (l, f) {
                                    return (f.x = l[0]), (f.y = l[1]), ["L", l[0], l[1]];
                                },
                                H: function (l, f) {
                                    return (f.x = l[0]), ["H", l[0]];
                                },
                                V: function (l, f) {
                                    return (f.y = l[0]), ["V", l[0]];
                                },
                                C: function (l, f) {
                                    return (f.x = l[4]), (f.y = l[5]), ["C", l[0], l[1], l[2], l[3], l[4], l[5]];
                                },
                                Q: function (l, f) {
                                    return (f.x = l[2]), (f.y = l[3]), ["Q", l[0], l[1], l[2], l[3]];
                                },
                                Z: function (l, f, v) {
                                    return (f.x = v.x), (f.y = v.y), ["Z"];
                                },
                            },
                            a = "mlhvqtcsaz".split(""),
                            s = 0,
                            n = a.length;
                        s < n;
                        ++s
                    )
                        i[a[s]] = (function (l) {
                            return function (f, v, S) {
                                if ("H" == l) f[0] = f[0] + v.x;
                                else if ("V" == l) f[0] = f[0] + v.y;
                                else if ("A" == l) (f[5] = f[5] + v.x), (f[6] = f[6] + v.y);
                                else for (var M = 0, L = f.length; M < L; ++M) f[M] = f[M] + (M % 2 ? v.y : v.x);
                                if (i && "function" == typeof i[l]) return i[l](f, v, S);
                            };
                        })(a[s].toUpperCase());
                    (e.PathArray = function (l, f) {
                        e.Array.call(this, l, f || [["M", 0, 0]]);
                    }),
                        (e.PathArray.prototype = new e.Array()),
                        (e.PathArray.prototype.constructor = e.PathArray),
                        e.extend(e.PathArray, {
                            toString: function () {
                                return (function (l) {
                                    for (var f = 0, v = l.length, S = ""; f < v; f++)
                                        (S += l[f][0]),
                                            null != l[f][1] &&
                                                ((S += l[f][1]),
                                                null != l[f][2] &&
                                                    ((S += " "),
                                                    (S += l[f][2]),
                                                    null != l[f][3] &&
                                                        ((S += " "),
                                                        (S += l[f][3]),
                                                        (S += " "),
                                                        (S += l[f][4]),
                                                        null != l[f][5] && ((S += " "), (S += l[f][5]), (S += " "), (S += l[f][6]), null != l[f][7] && ((S += " "), (S += l[f][7]))))));
                                    return S + " ";
                                })(this.value);
                            },
                            move: function (l, f) {
                                return this.bbox(), this;
                            },
                            at: function (l) {
                                if (!this.destination) return this;
                                for (var f = this.value, v = this.destination.value, S = [], M = new e.PathArray(), L = 0, k = f.length; L < k; L++) {
                                    S[L] = [f[L][0]];
                                    for (var I = 1, Y = f[L].length; I < Y; I++) S[L][I] = f[L][I] + (v[L][I] - f[L][I]) * l;
                                    "A" === S[L][0] && ((S[L][4] = +(0 != S[L][4])), (S[L][5] = +(0 != S[L][5])));
                                }
                                return (M.value = S), M;
                            },
                            parse: function (l) {
                                if (l instanceof e.PathArray) return l.valueOf();
                                var f,
                                    v = { M: 2, L: 2, H: 1, V: 1, C: 6, S: 4, Q: 4, T: 2, A: 7, Z: 0 };
                                l =
                                    "string" == typeof l
                                        ? l.replace(e.regex.numbersWithDots, r).replace(e.regex.pathLetters, " $& ").replace(e.regex.hyphen, "$1 -").trim().split(e.regex.delimiter)
                                        : l.reduce(function (Y, D) {
                                              return [].concat.call(Y, D);
                                          }, []);
                                var S = [],
                                    M = new e.Point(),
                                    L = new e.Point(),
                                    k = 0,
                                    I = l.length;
                                do {
                                    e.regex.isPathLetter.test(l[k]) ? ((f = l[k]), ++k) : "M" == f ? (f = "L") : "m" == f && (f = "l"), S.push(i[f].call(null, l.slice(k, (k += v[f.toUpperCase()])).map(parseFloat), M, L));
                                } while (I > k);
                                return S;
                            },
                            bbox: function () {
                                return e.parser.draw || e.prepare(), e.parser.path.setAttribute("d", this.toString()), e.parser.path.getBBox();
                            },
                        }),
                        (e.Number = e.invent({
                            create: function (l, f) {
                                (this.value = 0),
                                    (this.unit = f || ""),
                                    "number" == typeof l
                                        ? (this.value = isNaN(l) ? 0 : isFinite(l) ? l : l < 0 ? -34e37 : 34e37)
                                        : "string" == typeof l
                                        ? (f = l.match(e.regex.numberAndUnit)) && ((this.value = parseFloat(f[1])), "%" == f[5] ? (this.value /= 100) : "s" == f[5] && (this.value *= 1e3), (this.unit = f[5]))
                                        : l instanceof e.Number && ((this.value = l.valueOf()), (this.unit = l.unit));
                            },
                            extend: {
                                toString: function () {
                                    return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
                                },
                                toJSON: function () {
                                    return this.toString();
                                },
                                valueOf: function () {
                                    return this.value;
                                },
                                plus: function (l) {
                                    return (l = new e.Number(l)), new e.Number(this + l, this.unit || l.unit);
                                },
                                minus: function (l) {
                                    return (l = new e.Number(l)), new e.Number(this - l, this.unit || l.unit);
                                },
                                times: function (l) {
                                    return (l = new e.Number(l)), new e.Number(this * l, this.unit || l.unit);
                                },
                                divide: function (l) {
                                    return (l = new e.Number(l)), new e.Number(this / l, this.unit || l.unit);
                                },
                                to: function (l) {
                                    var f = new e.Number(this);
                                    return "string" == typeof l && (f.unit = l), f;
                                },
                                morph: function (l) {
                                    return (this.destination = new e.Number(l)), l.relative && (this.destination.value += this.value), this;
                                },
                                at: function (l) {
                                    return this.destination ? new e.Number(this.destination).minus(this).times(l).plus(this) : this;
                                },
                            },
                        })),
                        (e.Element = e.invent({
                            create: function (l) {
                                (this._stroke = e.defaults.attrs.stroke),
                                    (this._event = null),
                                    (this.dom = {}),
                                    (this.node = l) && ((this.type = l.nodeName), (this.node.instance = this), (this._stroke = l.getAttribute("stroke") || this._stroke));
                            },
                            extend: {
                                x: function (l) {
                                    return this.attr("x", l);
                                },
                                y: function (l) {
                                    return this.attr("y", l);
                                },
                                cx: function (l) {
                                    return null == l ? this.x() + this.width() / 2 : this.x(l - this.width() / 2);
                                },
                                cy: function (l) {
                                    return null == l ? this.y() + this.height() / 2 : this.y(l - this.height() / 2);
                                },
                                move: function (l, f) {
                                    return this.x(l).y(f);
                                },
                                center: function (l, f) {
                                    return this.cx(l).cy(f);
                                },
                                width: function (l) {
                                    return this.attr("width", l);
                                },
                                height: function (l) {
                                    return this.attr("height", l);
                                },
                                size: function (l, f) {
                                    var v = u(this, l, f);
                                    return this.width(new e.Number(v.width)).height(new e.Number(v.height));
                                },
                                clone: function (l) {
                                    this.writeDataToDom();
                                    var f = y(this.node.cloneNode(!0));
                                    return l ? l.add(f) : this.after(f), f;
                                },
                                remove: function () {
                                    return this.parent() && this.parent().removeElement(this), this;
                                },
                                replace: function (l) {
                                    return this.after(l).remove(), l;
                                },
                                addTo: function (l) {
                                    return l.put(this);
                                },
                                putIn: function (l) {
                                    return l.add(this);
                                },
                                id: function (l) {
                                    return this.attr("id", l);
                                },
                                show: function () {
                                    return this.style("display", "");
                                },
                                hide: function () {
                                    return this.style("display", "none");
                                },
                                visible: function () {
                                    return "none" != this.style("display");
                                },
                                toString: function () {
                                    return this.attr("id");
                                },
                                classes: function () {
                                    var l = this.attr("class");
                                    return null == l ? [] : l.trim().split(e.regex.delimiter);
                                },
                                hasClass: function (l) {
                                    return -1 != this.classes().indexOf(l);
                                },
                                addClass: function (l) {
                                    if (!this.hasClass(l)) {
                                        var f = this.classes();
                                        f.push(l), this.attr("class", f.join(" "));
                                    }
                                    return this;
                                },
                                removeClass: function (l) {
                                    return (
                                        this.hasClass(l) &&
                                            this.attr(
                                                "class",
                                                this.classes()
                                                    .filter(function (f) {
                                                        return f != l;
                                                    })
                                                    .join(" ")
                                            ),
                                        this
                                    );
                                },
                                toggleClass: function (l) {
                                    return this.hasClass(l) ? this.removeClass(l) : this.addClass(l);
                                },
                                reference: function (l) {
                                    return e.get(this.attr(l));
                                },
                                parent: function (l) {
                                    var f = this;
                                    if (!f.node.parentNode) return null;
                                    if (((f = e.adopt(f.node.parentNode)), !l)) return f;
                                    for (; f && f.node instanceof A.SVGElement; ) {
                                        if ("string" == typeof l ? f.matches(l) : f instanceof l) return f;
                                        if (!f.node.parentNode || "#document" == f.node.parentNode.nodeName) return null;
                                        f = e.adopt(f.node.parentNode);
                                    }
                                },
                                doc: function () {
                                    return this instanceof e.Doc ? this : this.parent(e.Doc);
                                },
                                parents: function (l) {
                                    var f = [],
                                        v = this;
                                    do {
                                        if (!(v = v.parent(l)) || !v.node) break;
                                        f.push(v);
                                    } while (v.parent);
                                    return f;
                                },
                                matches: function (l) {
                                    return ((f = this.node).matches || f.matchesSelector || f.msMatchesSelector || f.mozMatchesSelector || f.webkitMatchesSelector || f.oMatchesSelector).call(f, l);
                                    var f;
                                },
                                native: function () {
                                    return this.node;
                                },
                                svg: function (l) {
                                    var f = t.createElement("svg");
                                    if (!(l && this instanceof e.Parent))
                                        return f.appendChild((l = t.createElement("svg"))), this.writeDataToDom(), l.appendChild(this.node.cloneNode(!0)), f.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
                                    f.innerHTML = "<svg>" + l.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
                                    for (var v = 0, S = f.firstChild.childNodes.length; v < S; v++) this.node.appendChild(f.firstChild.firstChild);
                                    return this;
                                },
                                writeDataToDom: function () {
                                    return (
                                        (this.each || this.lines) &&
                                            (this.each ? this : this.lines()).each(function () {
                                                this.writeDataToDom();
                                            }),
                                        this.node.removeAttribute("svgjs:data"),
                                        Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)),
                                        this
                                    );
                                },
                                setData: function (l) {
                                    return (this.dom = l), this;
                                },
                                is: function (l) {
                                    return this instanceof l;
                                },
                            },
                        })),
                        (e.easing = {
                            "-": function (l) {
                                return l;
                            },
                            "<>": function (l) {
                                return -Math.cos(l * Math.PI) / 2 + 0.5;
                            },
                            ">": function (l) {
                                return Math.sin((l * Math.PI) / 2);
                            },
                            "<": function (l) {
                                return 1 - Math.cos((l * Math.PI) / 2);
                            },
                        }),
                        (e.morph = function (l) {
                            return function (f, v) {
                                return new e.MorphObj(f, v).at(l);
                            };
                        }),
                        (e.Situation = e.invent({
                            create: function (l) {
                                (this.init = !1),
                                    (this.reversed = !1),
                                    (this.reversing = !1),
                                    (this.duration = new e.Number(l.duration).valueOf()),
                                    (this.delay = new e.Number(l.delay).valueOf()),
                                    (this.start = +new Date() + this.delay),
                                    (this.finish = this.start + this.duration),
                                    (this.ease = l.ease),
                                    (this.loop = 0),
                                    (this.loops = !1),
                                    (this.animations = {}),
                                    (this.attrs = {}),
                                    (this.styles = {}),
                                    (this.transforms = []),
                                    (this.once = {});
                            },
                        })),
                        (e.FX = e.invent({
                            create: function (l) {
                                (this._target = l), (this.situations = []), (this.active = !1), (this.situation = null), (this.paused = !1), (this.lastPos = 0), (this.pos = 0), (this.absPos = 0), (this._speed = 1);
                            },
                            extend: {
                                animate: function (l, f, v) {
                                    "object" === _(l) && ((f = l.ease), (v = l.delay), (l = l.duration));
                                    var S = new e.Situation({ duration: l || 1e3, delay: v || 0, ease: e.easing[f || "-"] || f });
                                    return this.queue(S), this;
                                },
                                target: function (l) {
                                    return l && l instanceof e.Element ? ((this._target = l), this) : this._target;
                                },
                                timeToAbsPos: function (l) {
                                    return (l - this.situation.start) / (this.situation.duration / this._speed);
                                },
                                absPosToTime: function (l) {
                                    return (this.situation.duration / this._speed) * l + this.situation.start;
                                },
                                startAnimFrame: function () {
                                    this.stopAnimFrame(),
                                        (this.animationFrame = A.requestAnimationFrame(
                                            function () {
                                                this.step();
                                            }.bind(this)
                                        ));
                                },
                                stopAnimFrame: function () {
                                    A.cancelAnimationFrame(this.animationFrame);
                                },
                                start: function () {
                                    return !this.active && this.situation && ((this.active = !0), this.startCurrent()), this;
                                },
                                startCurrent: function () {
                                    return (this.situation.start = +new Date() + this.situation.delay / this._speed), (this.situation.finish = this.situation.start + this.situation.duration / this._speed), this.initAnimations().step();
                                },
                                queue: function (l) {
                                    return ("function" == typeof l || l instanceof e.Situation) && this.situations.push(l), this.situation || (this.situation = this.situations.shift()), this;
                                },
                                dequeue: function () {
                                    return this.stop(), (this.situation = this.situations.shift()), this.situation && (this.situation instanceof e.Situation ? this.start() : this.situation.call(this)), this;
                                },
                                initAnimations: function () {
                                    var l,
                                        f = this.situation;
                                    if (f.init) return this;
                                    for (var v in f.animations) {
                                        (l = this.target()[v]()), Array.isArray(l) || (l = [l]), Array.isArray(f.animations[v]) || (f.animations[v] = [f.animations[v]]);
                                        for (var S = l.length; S--; ) f.animations[v][S] instanceof e.Number && (l[S] = new e.Number(l[S])), (f.animations[v][S] = l[S].morph(f.animations[v][S]));
                                    }
                                    for (var v in f.attrs) f.attrs[v] = new e.MorphObj(this.target().attr(v), f.attrs[v]);
                                    for (var v in f.styles) f.styles[v] = new e.MorphObj(this.target().style(v), f.styles[v]);
                                    return (f.initialTransformation = this.target().matrixify()), (f.init = !0), this;
                                },
                                clearQueue: function () {
                                    return (this.situations = []), this;
                                },
                                clearCurrent: function () {
                                    return (this.situation = null), this;
                                },
                                stop: function (l, f) {
                                    var v = this.active;
                                    return (this.active = !1), f && this.clearQueue(), l && this.situation && (!v && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
                                },
                                after: function (l) {
                                    var f = this.last();
                                    return (
                                        this.target().on("finished.fx", function v(S) {
                                            S.detail.situation == f && (l.call(this, f), this.off("finished.fx", v));
                                        }),
                                        this._callStart()
                                    );
                                },
                                during: function (l) {
                                    var f = this.last(),
                                        v = function (S) {
                                            S.detail.situation == f && l.call(this, S.detail.pos, e.morph(S.detail.pos), S.detail.eased, f);
                                        };
                                    return (
                                        this.target().off("during.fx", v).on("during.fx", v),
                                        this.after(function () {
                                            this.off("during.fx", v);
                                        }),
                                        this._callStart()
                                    );
                                },
                                afterAll: function (l) {
                                    var f = function v(S) {
                                        l.call(this), this.off("allfinished.fx", v);
                                    };
                                    return this.target().off("allfinished.fx", f).on("allfinished.fx", f), this._callStart();
                                },
                                last: function () {
                                    return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
                                },
                                add: function (l, f, v) {
                                    return (this.last()[v || "animations"][l] = f), this._callStart();
                                },
                                step: function (l) {
                                    var f, v, S;
                                    l || (this.absPos = this.timeToAbsPos(+new Date())),
                                        !1 !== this.situation.loops
                                            ? ((f = Math.max(this.absPos, 0)),
                                              (v = Math.floor(f)),
                                              !0 === this.situation.loops || v < this.situation.loops
                                                  ? ((this.pos = f - v), (S = this.situation.loop), (this.situation.loop = v))
                                                  : ((this.absPos = this.situation.loops), (this.pos = 1), (S = this.situation.loop - 1), (this.situation.loop = this.situation.loops)),
                                              this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - S) % 2)))
                                            : ((this.absPos = Math.min(this.absPos, 1)), (this.pos = this.absPos)),
                                        this.pos < 0 && (this.pos = 0),
                                        this.situation.reversed && (this.pos = 1 - this.pos);
                                    var M = this.situation.ease(this.pos);
                                    for (var L in this.situation.once) L > this.lastPos && L <= M && (this.situation.once[L].call(this.target(), this.pos, M), delete this.situation.once[L]);
                                    return (
                                        this.active && this.target().fire("during", { pos: this.pos, eased: M, fx: this, situation: this.situation }),
                                        this.situation
                                            ? (this.eachAt(),
                                              (1 == this.pos && !this.situation.reversed) || (this.situation.reversed && 0 == this.pos)
                                                  ? (this.stopAnimFrame(),
                                                    this.target().fire("finished", { fx: this, situation: this.situation }),
                                                    this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), (this.active = !1))),
                                                    this.active ? this.dequeue() : this.clearCurrent())
                                                  : !this.paused && this.active && this.startAnimFrame(),
                                              (this.lastPos = M),
                                              this)
                                            : this
                                    );
                                },
                                eachAt: function () {
                                    var l,
                                        f = this,
                                        v = this.target(),
                                        S = this.situation;
                                    for (var M in S.animations)
                                        (l = [].concat(S.animations[M]).map(function (I) {
                                            return "string" != typeof I && I.at ? I.at(S.ease(f.pos), f.pos) : I;
                                        })),
                                            v[M].apply(v, l);
                                    for (var M in S.attrs)
                                        (l = [M].concat(S.attrs[M]).map(function (Y) {
                                            return "string" != typeof Y && Y.at ? Y.at(S.ease(f.pos), f.pos) : Y;
                                        })),
                                            v.attr.apply(v, l);
                                    for (var M in S.styles)
                                        (l = [M].concat(S.styles[M]).map(function (Y) {
                                            return "string" != typeof Y && Y.at ? Y.at(S.ease(f.pos), f.pos) : Y;
                                        })),
                                            v.style.apply(v, l);
                                    if (S.transforms.length) {
                                        (l = S.initialTransformation), (M = 0);
                                        for (var L = S.transforms.length; M < L; M++) {
                                            var k = S.transforms[M];
                                            k instanceof e.Matrix
                                                ? (l = k.relative ? l.multiply(new e.Matrix().morph(k).at(S.ease(this.pos))) : l.morph(k).at(S.ease(this.pos)))
                                                : (k.relative || k.undo(l.extract()), (l = l.multiply(k.at(S.ease(this.pos)))));
                                        }
                                        v.matrix(l);
                                    }
                                    return this;
                                },
                                once: function (l, f, v) {
                                    var S = this.last();
                                    return v || (l = S.ease(l)), (S.once[l] = f), this;
                                },
                                _callStart: function () {
                                    return (
                                        setTimeout(
                                            function () {
                                                this.start();
                                            }.bind(this),
                                            0
                                        ),
                                        this
                                    );
                                },
                            },
                            parent: e.Element,
                            construct: {
                                animate: function (l, f, v) {
                                    return (this.fx || (this.fx = new e.FX(this))).animate(l, f, v);
                                },
                                delay: function (l) {
                                    return (this.fx || (this.fx = new e.FX(this))).delay(l);
                                },
                                stop: function (l, f) {
                                    return this.fx && this.fx.stop(l, f), this;
                                },
                                finish: function () {
                                    return this.fx && this.fx.finish(), this;
                                },
                            },
                        })),
                        (e.MorphObj = e.invent({
                            create: function (l, f) {
                                return e.Color.isColor(f)
                                    ? new e.Color(l).morph(f)
                                    : e.regex.delimiter.test(l)
                                    ? e.regex.pathLetters.test(l)
                                        ? new e.PathArray(l).morph(f)
                                        : new e.Array(l).morph(f)
                                    : e.regex.numberAndUnit.test(f)
                                    ? new e.Number(l).morph(f)
                                    : ((this.value = l), void (this.destination = f));
                            },
                            extend: {
                                at: function (l, f) {
                                    return f < 1 ? this.value : this.destination;
                                },
                                valueOf: function () {
                                    return this.value;
                                },
                            },
                        })),
                        e.extend(e.FX, {
                            attr: function (l, f, v) {
                                if ("object" === _(l)) for (var S in l) this.attr(S, l[S]);
                                else this.add(l, f, "attrs");
                                return this;
                            },
                            plot: function (l, f, v, S) {
                                return 4 == arguments.length ? this.plot([l, f, v, S]) : this.add("plot", new (this.target().morphArray)(l));
                            },
                        }),
                        (e.Box = e.invent({
                            create: function (l, f, v, S) {
                                if (!("object" !== _(l) || l instanceof e.Element)) return e.Box.call(this, null != l.left ? l.left : l.x, null != l.top ? l.top : l.y, l.width, l.height);
                                var M;
                                4 == arguments.length && ((this.x = l), (this.y = f), (this.width = v), (this.height = S)),
                                    null == (M = this).x && ((M.x = 0), (M.y = 0), (M.width = 0), (M.height = 0)),
                                    (M.w = M.width),
                                    (M.h = M.height),
                                    (M.x2 = M.x + M.width),
                                    (M.y2 = M.y + M.height),
                                    (M.cx = M.x + M.width / 2),
                                    (M.cy = M.y + M.height / 2);
                            },
                        })),
                        (e.BBox = e.invent({
                            create: function (l) {
                                if ((e.Box.apply(this, [].slice.call(arguments)), l instanceof e.Element)) {
                                    var f;
                                    try {
                                        if (!t.documentElement.contains) {
                                            for (var v = l.node; v.parentNode; ) v = v.parentNode;
                                            if (v != t) throw new Error("Element not in the dom");
                                        }
                                        f = l.node.getBBox();
                                    } catch (M) {
                                        if (l instanceof e.Shape) {
                                            e.parser.draw || e.prepare();
                                            var S = l.clone(e.parser.draw.instance).show();
                                            S && S.node && "function" == typeof S.node.getBBox && (f = S.node.getBBox()), S && "function" == typeof S.remove && S.remove();
                                        } else f = { x: l.node.clientLeft, y: l.node.clientTop, width: l.node.clientWidth, height: l.node.clientHeight };
                                    }
                                    e.Box.call(this, f);
                                }
                            },
                            inherit: e.Box,
                            parent: e.Element,
                            construct: {
                                bbox: function () {
                                    return new e.BBox(this);
                                },
                            },
                        })),
                        (e.BBox.prototype.constructor = e.BBox),
                        (e.Matrix = e.invent({
                            create: function (l) {
                                var f = x([1, 0, 0, 1, 0, 0]);
                                l =
                                    null === l
                                        ? f
                                        : l instanceof e.Element
                                        ? l.matrixify()
                                        : "string" == typeof l
                                        ? x(l.split(e.regex.delimiter).map(parseFloat))
                                        : 6 == arguments.length
                                        ? x([].slice.call(arguments))
                                        : Array.isArray(l)
                                        ? x(l)
                                        : l && "object" === _(l)
                                        ? l
                                        : f;
                                for (var v = w.length - 1; v >= 0; --v) this[w[v]] = null != l[w[v]] ? l[w[v]] : f[w[v]];
                            },
                            extend: {
                                extract: function () {
                                    var l = p(this, 0, 1);
                                    p(this, 1, 0);
                                    var f = (180 / Math.PI) * Math.atan2(l.y, l.x) - 90;
                                    return {
                                        x: this.e,
                                        y: this.f,
                                        transformedX: (this.e * Math.cos((f * Math.PI) / 180) + this.f * Math.sin((f * Math.PI) / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),
                                        transformedY: (this.f * Math.cos((f * Math.PI) / 180) + this.e * Math.sin((-f * Math.PI) / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),
                                        rotation: f,
                                        a: this.a,
                                        b: this.b,
                                        c: this.c,
                                        d: this.d,
                                        e: this.e,
                                        f: this.f,
                                        matrix: new e.Matrix(this),
                                    };
                                },
                                clone: function () {
                                    return new e.Matrix(this);
                                },
                                morph: function (l) {
                                    return (this.destination = new e.Matrix(l)), this;
                                },
                                multiply: function (l) {
                                    return new e.Matrix(this.native().multiply(((f = l), f instanceof e.Matrix || (f = new e.Matrix(f)), f).native()));
                                    var f;
                                },
                                inverse: function () {
                                    return new e.Matrix(this.native().inverse());
                                },
                                translate: function (l, f) {
                                    return new e.Matrix(this.native().translate(l || 0, f || 0));
                                },
                                native: function () {
                                    for (var l = e.parser.native.createSVGMatrix(), f = w.length - 1; f >= 0; f--) l[w[f]] = this[w[f]];
                                    return l;
                                },
                                toString: function () {
                                    return "matrix(" + C(this.a) + "," + C(this.b) + "," + C(this.c) + "," + C(this.d) + "," + C(this.e) + "," + C(this.f) + ")";
                                },
                            },
                            parent: e.Element,
                            construct: {
                                ctm: function () {
                                    return new e.Matrix(this.node.getCTM());
                                },
                                screenCTM: function () {
                                    if (this instanceof e.Nested) {
                                        var l = this.rect(1, 1),
                                            f = l.node.getScreenCTM();
                                        return l.remove(), new e.Matrix(f);
                                    }
                                    return new e.Matrix(this.node.getScreenCTM());
                                },
                            },
                        })),
                        (e.Point = e.invent({
                            create: function (l, f) {
                                var v;
                                (v = Array.isArray(l) ? { x: l[0], y: l[1] } : "object" === _(l) ? { x: l.x, y: l.y } : null != l ? { x: l, y: null != f ? f : l } : { x: 0, y: 0 }), (this.x = v.x), (this.y = v.y);
                            },
                            extend: {
                                clone: function () {
                                    return new e.Point(this);
                                },
                                morph: function (l, f) {
                                    return (this.destination = new e.Point(l, f)), this;
                                },
                            },
                        })),
                        e.extend(e.Element, {
                            point: function (l, f) {
                                return new e.Point(l, f).transform(this.screenCTM().inverse());
                            },
                        }),
                        e.extend(e.Element, {
                            attr: function (l, f, v) {
                                if (null == l) {
                                    for (l = {}, v = (f = this.node.attributes).length - 1; v >= 0; v--) l[f[v].nodeName] = e.regex.isNumber.test(f[v].nodeValue) ? parseFloat(f[v].nodeValue) : f[v].nodeValue;
                                    return l;
                                }
                                if ("object" === _(l)) for (var S in l) this.attr(S, l[S]);
                                else if (null === f) this.node.removeAttribute(l);
                                else {
                                    if (null == f) return null == (f = this.node.getAttribute(l)) ? e.defaults.attrs[l] : e.regex.isNumber.test(f) ? parseFloat(f) : f;
                                    "stroke-width" == l ? this.attr("stroke", parseFloat(f) > 0 ? this._stroke : null) : "stroke" == l && (this._stroke = f),
                                        ("fill" != l && "stroke" != l) ||
                                            (e.regex.isImage.test(f) && (f = this.doc().defs().image(f, 0, 0)),
                                            f instanceof e.Image &&
                                                (f = this.doc()
                                                    .defs()
                                                    .pattern(0, 0, function () {
                                                        this.add(f);
                                                    }))),
                                        "number" == typeof f ? (f = new e.Number(f)) : e.Color.isColor(f) ? (f = new e.Color(f)) : Array.isArray(f) && (f = new e.Array(f)),
                                        "leading" == l ? this.leading && this.leading(f) : "string" == typeof v ? this.node.setAttributeNS(v, l, f.toString()) : this.node.setAttribute(l, f.toString()),
                                        !this.rebuild || ("font-size" != l && "x" != l) || this.rebuild(l, f);
                                }
                                return this;
                            },
                        }),
                        e.extend(e.Element, {
                            transform: function (l, f) {
                                var v;
                                return "object" !== _(l)
                                    ? ((v = new e.Matrix(this).extract()), "string" == typeof l ? v[l] : v)
                                    : ((v = new e.Matrix(this)), (f = !!f || !!l.relative), null != l.a && (v = f ? v.multiply(new e.Matrix(l)) : new e.Matrix(l)), this.attr("transform", v));
                            },
                        }),
                        e.extend(e.Element, {
                            untransform: function () {
                                return this.attr("transform", null);
                            },
                            matrixify: function () {
                                return (this.attr("transform") || "")
                                    .split(e.regex.transforms)
                                    .slice(0, -1)
                                    .map(function (l) {
                                        var f = l.trim().split("(");
                                        return [
                                            f[0],
                                            f[1].split(e.regex.delimiter).map(function (v) {
                                                return parseFloat(v);
                                            }),
                                        ];
                                    })
                                    .reduce(function (l, f) {
                                        return "matrix" == f[0] ? l.multiply(x(f[1])) : l[f[0]].apply(l, f[1]);
                                    }, new e.Matrix());
                            },
                            toParent: function (l) {
                                if (this == l) return this;
                                var f = this.screenCTM(),
                                    v = l.screenCTM().inverse();
                                return this.addTo(l).untransform().transform(v.multiply(f)), this;
                            },
                            toDoc: function () {
                                return this.toParent(this.doc());
                            },
                        }),
                        (e.Transformation = e.invent({
                            create: function (l, f) {
                                if (arguments.length > 1 && "boolean" != typeof f) return this.constructor.call(this, [].slice.call(arguments));
                                if (Array.isArray(l)) for (var v = 0, S = this.arguments.length; v < S; ++v) this[this.arguments[v]] = l[v];
                                else if (l && "object" === _(l)) for (v = 0, S = this.arguments.length; v < S; ++v) this[this.arguments[v]] = l[this.arguments[v]];
                                (this.inversed = !1), !0 === f && (this.inversed = !0);
                            },
                        })),
                        (e.Translate = e.invent({
                            parent: e.Matrix,
                            inherit: e.Transformation,
                            create: function (l, f) {
                                this.constructor.apply(this, [].slice.call(arguments));
                            },
                            extend: { arguments: ["transformedX", "transformedY"], method: "translate" },
                        })),
                        e.extend(e.Element, {
                            style: function (l, f) {
                                if (0 == arguments.length) return this.node.style.cssText || "";
                                if (arguments.length < 2)
                                    if ("object" === _(l)) for (var v in l) this.style(v, l[v]);
                                    else {
                                        if (!e.regex.isCss.test(l)) return this.node.style[d(l)];
                                        for (
                                            l = l
                                                .split(/\s*;\s*/)
                                                .filter(function (S) {
                                                    return !!S;
                                                })
                                                .map(function (S) {
                                                    return S.split(/\s*:\s*/);
                                                });
                                            (f = l.pop());

                                        )
                                            this.style(f[0], f[1]);
                                    }
                                else this.node.style[d(l)] = null === f || e.regex.isBlank.test(f) ? "" : f;
                                return this;
                            },
                        }),
                        (e.Parent = e.invent({
                            create: function (l) {
                                this.constructor.call(this, l);
                            },
                            inherit: e.Element,
                            extend: {
                                children: function () {
                                    return e.utils.map(e.utils.filterSVGElements(this.node.childNodes), function (l) {
                                        return e.adopt(l);
                                    });
                                },
                                add: function (l, f) {
                                    return null == f ? this.node.appendChild(l.node) : l.node != this.node.childNodes[f] && this.node.insertBefore(l.node, this.node.childNodes[f]), this;
                                },
                                put: function (l, f) {
                                    return this.add(l, f), l;
                                },
                                has: function (l) {
                                    return this.index(l) >= 0;
                                },
                                index: function (l) {
                                    return [].slice.call(this.node.childNodes).indexOf(l.node);
                                },
                                get: function (l) {
                                    return e.adopt(this.node.childNodes[l]);
                                },
                                first: function () {
                                    return this.get(0);
                                },
                                last: function () {
                                    return this.get(this.node.childNodes.length - 1);
                                },
                                each: function (l, f) {
                                    for (var v = this.children(), S = 0, M = v.length; S < M; S++) v[S] instanceof e.Element && l.apply(v[S], [S, v]), f && v[S] instanceof e.Container && v[S].each(l, f);
                                    return this;
                                },
                                removeElement: function (l) {
                                    return this.node.removeChild(l.node), this;
                                },
                                clear: function () {
                                    for (; this.node.hasChildNodes(); ) this.node.removeChild(this.node.lastChild);
                                    return delete this._defs, this;
                                },
                                defs: function () {
                                    return this.doc().defs();
                                },
                            },
                        })),
                        e.extend(e.Parent, {
                            ungroup: function (l, f) {
                                return (
                                    0 === f ||
                                        this instanceof e.Defs ||
                                        this.node == e.parser.draw ||
                                        ((l = l || (this instanceof e.Doc ? this : this.parent(e.Parent))),
                                        (f = f || 1 / 0),
                                        this.each(function () {
                                            return this instanceof e.Defs ? this : this instanceof e.Parent ? this.ungroup(l, f - 1) : this.toParent(l);
                                        }),
                                        this.node.firstChild || this.remove()),
                                    this
                                );
                            },
                            flatten: function (l, f) {
                                return this.ungroup(l, f);
                            },
                        }),
                        (e.Container = e.invent({
                            create: function (l) {
                                this.constructor.call(this, l);
                            },
                            inherit: e.Parent,
                        })),
                        (e.ViewBox = e.invent({ parent: e.Container, construct: {} })),
                        ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function (l) {
                            e.Element.prototype[l] = function (f) {
                                return e.on(this.node, l, f), this;
                            };
                        }),
                        (e.listeners = []),
                        (e.handlerMap = []),
                        (e.listenerId = 0),
                        (e.on = function (l, f, v, S, M) {
                            var L = v.bind(S || l.instance || l),
                                k = (e.handlerMap.indexOf(l) + 1 || e.handlerMap.push(l)) - 1,
                                I = f.split(".")[0],
                                Y = f.split(".")[1] || "*";
                            (e.listeners[k] = e.listeners[k] || {}),
                                (e.listeners[k][I] = e.listeners[k][I] || {}),
                                (e.listeners[k][I][Y] = e.listeners[k][I][Y] || {}),
                                v._svgjsListenerId || (v._svgjsListenerId = ++e.listenerId),
                                (e.listeners[k][I][Y][v._svgjsListenerId] = L),
                                l.addEventListener(I, L, M || { passive: !0 });
                        }),
                        (e.off = function (l, f, v) {
                            var S = e.handlerMap.indexOf(l),
                                M = f && f.split(".")[0],
                                L = f && f.split(".")[1],
                                k = "";
                            if (-1 != S)
                                if (v) {
                                    if (("function" == typeof v && (v = v._svgjsListenerId), !v)) return;
                                    e.listeners[S][M] && e.listeners[S][M][L || "*"] && (l.removeEventListener(M, e.listeners[S][M][L || "*"][v], !1), delete e.listeners[S][M][L || "*"][v]);
                                } else if (L && M) {
                                    if (e.listeners[S][M] && e.listeners[S][M][L]) {
                                        for (var I in e.listeners[S][M][L]) e.off(l, [M, L].join("."), I);
                                        delete e.listeners[S][M][L];
                                    }
                                } else if (L) for (var Y in e.listeners[S]) for (var k in e.listeners[S][Y]) L === k && e.off(l, [Y, L].join("."));
                                else if (M) {
                                    if (e.listeners[S][M]) {
                                        for (var k in e.listeners[S][M]) e.off(l, [M, k].join("."));
                                        delete e.listeners[S][M];
                                    }
                                } else {
                                    for (var Y in e.listeners[S]) e.off(l, Y);
                                    delete e.listeners[S], delete e.handlerMap[S];
                                }
                        }),
                        e.extend(e.Element, {
                            on: function (l, f, v, S) {
                                return e.on(this.node, l, f, v, S), this;
                            },
                            off: function (l, f) {
                                return e.off(this.node, l, f), this;
                            },
                            fire: function (l, f) {
                                return this.node.dispatchEvent(l instanceof A.Event ? l : (l = new e.CustomEvent(l, { detail: f, cancelable: !0 }))), (this._event = l), this;
                            },
                            event: function () {
                                return this._event;
                            },
                        }),
                        (e.Defs = e.invent({ create: "defs", inherit: e.Container })),
                        (e.G = e.invent({
                            create: "g",
                            inherit: e.Container,
                            extend: {
                                x: function (l) {
                                    return null == l ? this.transform("x") : this.transform({ x: l - this.x() }, !0);
                                },
                            },
                            construct: {
                                group: function () {
                                    return this.put(new e.G());
                                },
                            },
                        })),
                        (e.Doc = e.invent({
                            create: function (l) {
                                l &&
                                    ("svg" == (l = "string" == typeof l ? t.getElementById(l) : l).nodeName
                                        ? this.constructor.call(this, l)
                                        : (this.constructor.call(this, e.create("svg")), l.appendChild(this.node), this.size("100%", "100%")),
                                    this.namespace().defs());
                            },
                            inherit: e.Container,
                            extend: {
                                namespace: function () {
                                    return this.attr({ xmlns: e.ns, version: "1.1" }).attr("xmlns:xlink", e.xlink, e.xmlns).attr("xmlns:svgjs", e.svgjs, e.xmlns);
                                },
                                defs: function () {
                                    var l;
                                    return this._defs || ((this._defs = (l = this.node.getElementsByTagName("defs")[0]) ? e.adopt(l) : new e.Defs()), this.node.appendChild(this._defs.node)), this._defs;
                                },
                                parent: function () {
                                    return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
                                },
                                remove: function () {
                                    return this.parent() && this.parent().removeChild(this.node), this;
                                },
                                clear: function () {
                                    for (; this.node.hasChildNodes(); ) this.node.removeChild(this.node.lastChild);
                                    return delete this._defs, e.parser.draw && !e.parser.draw.parentNode && this.node.appendChild(e.parser.draw), this;
                                },
                                clone: function (l) {
                                    this.writeDataToDom();
                                    var f = this.node,
                                        v = y(f.cloneNode(!0));
                                    return l ? (l.node || l).appendChild(v.node) : f.parentNode.insertBefore(v.node, f.nextSibling), v;
                                },
                            },
                        })),
                        e.extend(e.Element, {}),
                        (e.Gradient = e.invent({
                            create: function (l) {
                                this.constructor.call(this, e.create(l + "Gradient")), (this.type = l);
                            },
                            inherit: e.Container,
                            extend: {
                                at: function (l, f, v) {
                                    return this.put(new e.Stop()).update(l, f, v);
                                },
                                update: function (l) {
                                    return this.clear(), "function" == typeof l && l.call(this, this), this;
                                },
                                fill: function () {
                                    return "url(#" + this.id() + ")";
                                },
                                toString: function () {
                                    return this.fill();
                                },
                                attr: function (l, f, v) {
                                    return "transform" == l && (l = "gradientTransform"), e.Container.prototype.attr.call(this, l, f, v);
                                },
                            },
                            construct: {
                                gradient: function (l, f) {
                                    return this.defs().gradient(l, f);
                                },
                            },
                        })),
                        e.extend(e.Gradient, e.FX, {
                            from: function (l, f) {
                                return this.attr("radial" == (this._target || this).type ? { fx: new e.Number(l), fy: new e.Number(f) } : { x1: new e.Number(l), y1: new e.Number(f) });
                            },
                            to: function (l, f) {
                                return this.attr("radial" == (this._target || this).type ? { cx: new e.Number(l), cy: new e.Number(f) } : { x2: new e.Number(l), y2: new e.Number(f) });
                            },
                        }),
                        e.extend(e.Defs, {
                            gradient: function (l, f) {
                                return this.put(new e.Gradient(l)).update(f);
                            },
                        }),
                        (e.Stop = e.invent({
                            create: "stop",
                            inherit: e.Element,
                            extend: {
                                update: function (l) {
                                    return (
                                        ("number" == typeof l || l instanceof e.Number) && (l = { offset: arguments[0], color: arguments[1], opacity: arguments[2] }),
                                        null != l.opacity && this.attr("stop-opacity", l.opacity),
                                        null != l.color && this.attr("stop-color", l.color),
                                        null != l.offset && this.attr("offset", new e.Number(l.offset)),
                                        this
                                    );
                                },
                            },
                        })),
                        (e.Pattern = e.invent({
                            create: "pattern",
                            inherit: e.Container,
                            extend: {
                                fill: function () {
                                    return "url(#" + this.id() + ")";
                                },
                                update: function (l) {
                                    return this.clear(), "function" == typeof l && l.call(this, this), this;
                                },
                                toString: function () {
                                    return this.fill();
                                },
                                attr: function (l, f, v) {
                                    return "transform" == l && (l = "patternTransform"), e.Container.prototype.attr.call(this, l, f, v);
                                },
                            },
                            construct: {
                                pattern: function (l, f, v) {
                                    return this.defs().pattern(l, f, v);
                                },
                            },
                        })),
                        e.extend(e.Defs, {
                            pattern: function (l, f, v) {
                                return this.put(new e.Pattern()).update(v).attr({ x: 0, y: 0, width: l, height: f, patternUnits: "userSpaceOnUse" });
                            },
                        }),
                        (e.Shape = e.invent({
                            create: function (l) {
                                this.constructor.call(this, l);
                            },
                            inherit: e.Element,
                        })),
                        (e.Symbol = e.invent({
                            create: "symbol",
                            inherit: e.Container,
                            construct: {
                                symbol: function () {
                                    return this.put(new e.Symbol());
                                },
                            },
                        })),
                        (e.Use = e.invent({
                            create: "use",
                            inherit: e.Shape,
                            extend: {
                                element: function (l, f) {
                                    return this.attr("href", (f || "") + "#" + l, e.xlink);
                                },
                            },
                            construct: {
                                use: function (l, f) {
                                    return this.put(new e.Use()).element(l, f);
                                },
                            },
                        })),
                        (e.Rect = e.invent({
                            create: "rect",
                            inherit: e.Shape,
                            construct: {
                                rect: function (l, f) {
                                    return this.put(new e.Rect()).size(l, f);
                                },
                            },
                        })),
                        (e.Circle = e.invent({
                            create: "circle",
                            inherit: e.Shape,
                            construct: {
                                circle: function (l) {
                                    return this.put(new e.Circle()).rx(new e.Number(l).divide(2)).move(0, 0);
                                },
                            },
                        })),
                        e.extend(e.Circle, e.FX, {
                            rx: function (l) {
                                return this.attr("r", l);
                            },
                            ry: function (l) {
                                return this.rx(l);
                            },
                        }),
                        (e.Ellipse = e.invent({
                            create: "ellipse",
                            inherit: e.Shape,
                            construct: {
                                ellipse: function (l, f) {
                                    return this.put(new e.Ellipse()).size(l, f).move(0, 0);
                                },
                            },
                        })),
                        e.extend(e.Ellipse, e.Rect, e.FX, {
                            rx: function (l) {
                                return this.attr("rx", l);
                            },
                            ry: function (l) {
                                return this.attr("ry", l);
                            },
                        }),
                        e.extend(e.Circle, e.Ellipse, {
                            x: function (l) {
                                return null == l ? this.cx() - this.rx() : this.cx(l + this.rx());
                            },
                            y: function (l) {
                                return null == l ? this.cy() - this.ry() : this.cy(l + this.ry());
                            },
                            cx: function (l) {
                                return null == l ? this.attr("cx") : this.attr("cx", l);
                            },
                            cy: function (l) {
                                return null == l ? this.attr("cy") : this.attr("cy", l);
                            },
                            width: function (l) {
                                return null == l ? 2 * this.rx() : this.rx(new e.Number(l).divide(2));
                            },
                            height: function (l) {
                                return null == l ? 2 * this.ry() : this.ry(new e.Number(l).divide(2));
                            },
                            size: function (l, f) {
                                var v = u(this, l, f);
                                return this.rx(new e.Number(v.width).divide(2)).ry(new e.Number(v.height).divide(2));
                            },
                        }),
                        (e.Line = e.invent({
                            create: "line",
                            inherit: e.Shape,
                            extend: {
                                array: function () {
                                    return new e.PointArray([
                                        [this.attr("x1"), this.attr("y1")],
                                        [this.attr("x2"), this.attr("y2")],
                                    ]);
                                },
                                plot: function (l, f, v, S) {
                                    return null == l ? this.array() : ((l = void 0 !== f ? { x1: l, y1: f, x2: v, y2: S } : new e.PointArray(l).toLine()), this.attr(l));
                                },
                                move: function (l, f) {
                                    return this.attr(this.array().move(l, f).toLine());
                                },
                                size: function (l, f) {
                                    var v = u(this, l, f);
                                    return this.attr(this.array().size(v.width, v.height).toLine());
                                },
                            },
                            construct: {
                                line: function (l, f, v, S) {
                                    return e.Line.prototype.plot.apply(this.put(new e.Line()), null != l ? [l, f, v, S] : [0, 0, 0, 0]);
                                },
                            },
                        })),
                        (e.Polyline = e.invent({
                            create: "polyline",
                            inherit: e.Shape,
                            construct: {
                                polyline: function (l) {
                                    return this.put(new e.Polyline()).plot(l || new e.PointArray());
                                },
                            },
                        })),
                        (e.Polygon = e.invent({
                            create: "polygon",
                            inherit: e.Shape,
                            construct: {
                                polygon: function (l) {
                                    return this.put(new e.Polygon()).plot(l || new e.PointArray());
                                },
                            },
                        })),
                        e.extend(e.Polyline, e.Polygon, {
                            array: function () {
                                return this._array || (this._array = new e.PointArray(this.attr("points")));
                            },
                            plot: function (l) {
                                return null == l ? this.array() : this.clear().attr("points", "string" == typeof l ? l : (this._array = new e.PointArray(l)));
                            },
                            clear: function () {
                                return delete this._array, this;
                            },
                            move: function (l, f) {
                                return this.attr("points", this.array().move(l, f));
                            },
                            size: function (l, f) {
                                var v = u(this, l, f);
                                return this.attr("points", this.array().size(v.width, v.height));
                            },
                        }),
                        e.extend(e.Line, e.Polyline, e.Polygon, {
                            morphArray: e.PointArray,
                            x: function (l) {
                                return null == l ? this.bbox().x : this.move(l, this.bbox().y);
                            },
                            y: function (l) {
                                return null == l ? this.bbox().y : this.move(this.bbox().x, l);
                            },
                            width: function (l) {
                                var f = this.bbox();
                                return null == l ? f.width : this.size(l, f.height);
                            },
                            height: function (l) {
                                var f = this.bbox();
                                return null == l ? f.height : this.size(f.width, l);
                            },
                        }),
                        (e.Path = e.invent({
                            create: "path",
                            inherit: e.Shape,
                            extend: {
                                morphArray: e.PathArray,
                                array: function () {
                                    return this._array || (this._array = new e.PathArray(this.attr("d")));
                                },
                                plot: function (l) {
                                    return null == l ? this.array() : this.clear().attr("d", "string" == typeof l ? l : (this._array = new e.PathArray(l)));
                                },
                                clear: function () {
                                    return delete this._array, this;
                                },
                            },
                            construct: {
                                path: function (l) {
                                    return this.put(new e.Path()).plot(l || new e.PathArray());
                                },
                            },
                        })),
                        (e.Image = e.invent({
                            create: "image",
                            inherit: e.Shape,
                            extend: {
                                load: function (l) {
                                    if (!l) return this;
                                    var f = this,
                                        v = new A.Image();
                                    return (
                                        e.on(v, "load", function () {
                                            e.off(v);
                                            var S = f.parent(e.Pattern);
                                            null !== S &&
                                                (0 == f.width() && 0 == f.height() && f.size(v.width, v.height),
                                                S && 0 == S.width() && 0 == S.height() && S.size(f.width(), f.height()),
                                                "function" == typeof f._loaded && f._loaded.call(f, { width: v.width, height: v.height, ratio: v.width / v.height, url: l }));
                                        }),
                                        e.on(v, "error", function (S) {
                                            e.off(v), "function" == typeof f._error && f._error.call(f, S);
                                        }),
                                        this.attr("href", (v.src = this.src = l), e.xlink)
                                    );
                                },
                                loaded: function (l) {
                                    return (this._loaded = l), this;
                                },
                                error: function (l) {
                                    return (this._error = l), this;
                                },
                            },
                            construct: {
                                image: function (l, f, v) {
                                    return this.put(new e.Image())
                                        .load(l)
                                        .size(f || 0, v || f || 0);
                                },
                            },
                        })),
                        (e.Text = e.invent({
                            create: function () {
                                this.constructor.call(this, e.create("text")), (this.dom.leading = new e.Number(1.3)), (this._rebuild = !0), (this._build = !1), this.attr("font-family", e.defaults.attrs["font-family"]);
                            },
                            inherit: e.Shape,
                            extend: {
                                x: function (l) {
                                    return null == l ? this.attr("x") : this.attr("x", l);
                                },
                                text: function (l) {
                                    if (void 0 === l) {
                                        l = "";
                                        for (var f = this.node.childNodes, v = 0, S = f.length; v < S; ++v) 0 != v && 3 != f[v].nodeType && 1 == e.adopt(f[v]).dom.newLined && (l += "\n"), (l += f[v].textContent);
                                        return l;
                                    }
                                    if ((this.clear().build(!0), "function" == typeof l)) l.call(this, this);
                                    else {
                                        v = 0;
                                        for (var M = (l = l.split("\n")).length; v < M; v++) this.tspan(l[v]).newLine();
                                    }
                                    return this.build(!1).rebuild();
                                },
                                size: function (l) {
                                    return this.attr("font-size", l).rebuild();
                                },
                                leading: function (l) {
                                    return null == l ? this.dom.leading : ((this.dom.leading = new e.Number(l)), this.rebuild());
                                },
                                lines: function () {
                                    var l = ((this.textPath && this.textPath()) || this).node,
                                        f = e.utils.map(e.utils.filterSVGElements(l.childNodes), function (v) {
                                            return e.adopt(v);
                                        });
                                    return new e.Set(f);
                                },
                                rebuild: function (l) {
                                    if (("boolean" == typeof l && (this._rebuild = l), this._rebuild)) {
                                        var f = this,
                                            v = 0,
                                            S = this.dom.leading * new e.Number(this.attr("font-size"));
                                        this.lines().each(function () {
                                            this.dom.newLined && (f.textPath() || this.attr("x", f.attr("x")), "\n" == this.text() ? (v += S) : (this.attr("dy", S + v), (v = 0)));
                                        }),
                                            this.fire("rebuild");
                                    }
                                    return this;
                                },
                                build: function (l) {
                                    return (this._build = !!l), this;
                                },
                                setData: function (l) {
                                    return (this.dom = l), (this.dom.leading = new e.Number(l.leading || 1.3)), this;
                                },
                            },
                            construct: {
                                text: function (l) {
                                    return this.put(new e.Text()).text(l);
                                },
                                plain: function (l) {
                                    return this.put(new e.Text()).plain(l);
                                },
                            },
                        })),
                        (e.Tspan = e.invent({
                            create: "tspan",
                            inherit: e.Shape,
                            extend: {
                                text: function (l) {
                                    return null == l ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof l ? l.call(this, this) : this.plain(l), this);
                                },
                                dx: function (l) {
                                    return this.attr("dx", l);
                                },
                                dy: function (l) {
                                    return this.attr("dy", l);
                                },
                                newLine: function () {
                                    var l = this.parent(e.Text);
                                    return (this.dom.newLined = !0), this.dy(l.dom.leading * l.attr("font-size")).attr("x", l.x());
                                },
                            },
                        })),
                        e.extend(e.Text, e.Tspan, {
                            plain: function (l) {
                                return !1 === this._build && this.clear(), this.node.appendChild(t.createTextNode(l)), this;
                            },
                            tspan: function (l) {
                                var f = ((this.textPath && this.textPath()) || this).node,
                                    v = new e.Tspan();
                                return !1 === this._build && this.clear(), f.appendChild(v.node), v.text(l);
                            },
                            clear: function () {
                                for (var l = ((this.textPath && this.textPath()) || this).node; l.hasChildNodes(); ) l.removeChild(l.lastChild);
                                return this;
                            },
                            length: function () {
                                return this.node.getComputedTextLength();
                            },
                        }),
                        (e.TextPath = e.invent({
                            create: "textPath",
                            inherit: e.Parent,
                            parent: e.Text,
                            construct: {
                                morphArray: e.PathArray,
                                array: function () {
                                    var l = this.track();
                                    return l ? l.array() : null;
                                },
                                plot: function (l) {
                                    var f = this.track(),
                                        v = null;
                                    return f && (v = f.plot(l)), null == l ? v : this;
                                },
                                track: function () {
                                    var l = this.textPath();
                                    if (l) return l.reference("href");
                                },
                                textPath: function () {
                                    if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName) return e.adopt(this.node.firstChild);
                                },
                            },
                        })),
                        (e.Nested = e.invent({
                            create: function () {
                                this.constructor.call(this, e.create("svg")), this.style("overflow", "visible");
                            },
                            inherit: e.Container,
                            construct: {
                                nested: function () {
                                    return this.put(new e.Nested());
                                },
                            },
                        }));
                    var o = {
                        stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"],
                        fill: ["color", "opacity", "rule"],
                        prefix: function (l, f) {
                            return "color" == f ? l : l + "-" + f;
                        },
                    };
                    function r(l, f, v, S) {
                        return v + S.replace(e.regex.dots, " .");
                    }
                    function d(l) {
                        return l.toLowerCase().replace(/-(.)/g, function (f, v) {
                            return v.toUpperCase();
                        });
                    }
                    function c(l) {
                        return l.charAt(0).toUpperCase() + l.slice(1);
                    }
                    function g(l) {
                        var f = l.toString(16);
                        return 1 == f.length ? "0" + f : f;
                    }
                    function u(l, f, v) {
                        if (null == f || null == v) {
                            var S = l.bbox();
                            null == f ? (f = (S.width / S.height) * v) : null == v && (v = (S.height / S.width) * f);
                        }
                        return { width: f, height: v };
                    }
                    function p(l, f, v) {
                        return { x: f * l.a + v * l.c + 0, y: f * l.b + v * l.d + 0 };
                    }
                    function x(l) {
                        return { a: l[0], b: l[1], c: l[2], d: l[3], e: l[4], f: l[5] };
                    }
                    function y(l) {
                        for (var f = l.childNodes.length - 1; f >= 0; f--) l.childNodes[f] instanceof A.SVGElement && y(l.childNodes[f]);
                        return e.adopt(l).id(e.eid(l.nodeName));
                    }
                    function C(l) {
                        return Math.abs(l) > 1e-37 ? l : 0;
                    }
                    ["fill", "stroke"].forEach(function (l) {
                        var f = {};
                        (f[l] = function (v) {
                            if (void 0 === v) return this;
                            if ("string" == typeof v || e.Color.isRgb(v) || (v && "function" == typeof v.fill)) this.attr(l, v);
                            else for (var S = o[l].length - 1; S >= 0; S--) null != v[o[l][S]] && this.attr(o.prefix(l, o[l][S]), v[o[l][S]]);
                            return this;
                        }),
                            e.extend(e.Element, e.FX, f);
                    }),
                        e.extend(e.Element, e.FX, {
                            translate: function (l, f) {
                                return this.transform({ x: l, y: f });
                            },
                            matrix: function (l) {
                                return this.attr("transform", new e.Matrix(6 == arguments.length ? [].slice.call(arguments) : l));
                            },
                            opacity: function (l) {
                                return this.attr("opacity", l);
                            },
                            dx: function (l) {
                                return this.x(new e.Number(l).plus(this instanceof e.FX ? 0 : this.x()), !0);
                            },
                            dy: function (l) {
                                return this.y(new e.Number(l).plus(this instanceof e.FX ? 0 : this.y()), !0);
                            },
                        }),
                        e.extend(e.Path, {
                            length: function () {
                                return this.node.getTotalLength();
                            },
                            pointAt: function (l) {
                                return this.node.getPointAtLength(l);
                            },
                        }),
                        (e.Set = e.invent({
                            create: function (l) {
                                Array.isArray(l) ? (this.members = l) : this.clear();
                            },
                            extend: {
                                add: function () {
                                    for (var l = [].slice.call(arguments), f = 0, v = l.length; f < v; f++) this.members.push(l[f]);
                                    return this;
                                },
                                remove: function (l) {
                                    var f = this.index(l);
                                    return f > -1 && this.members.splice(f, 1), this;
                                },
                                each: function (l) {
                                    for (var f = 0, v = this.members.length; f < v; f++) l.apply(this.members[f], [f, this.members]);
                                    return this;
                                },
                                clear: function () {
                                    return (this.members = []), this;
                                },
                                length: function () {
                                    return this.members.length;
                                },
                                has: function (l) {
                                    return this.index(l) >= 0;
                                },
                                index: function (l) {
                                    return this.members.indexOf(l);
                                },
                                get: function (l) {
                                    return this.members[l];
                                },
                                first: function () {
                                    return this.get(0);
                                },
                                last: function () {
                                    return this.get(this.members.length - 1);
                                },
                                valueOf: function () {
                                    return this.members;
                                },
                            },
                            construct: {
                                set: function (l) {
                                    return new e.Set(l);
                                },
                            },
                        })),
                        (e.FX.Set = e.invent({
                            create: function (l) {
                                this.set = l;
                            },
                        })),
                        (e.Set.inherit = function () {
                            var l = [];
                            for (var f in e.Shape.prototype) "function" == typeof e.Shape.prototype[f] && "function" != typeof e.Set.prototype[f] && l.push(f);
                            for (var f in (l.forEach(function (S) {
                                e.Set.prototype[S] = function () {
                                    for (var M = 0, L = this.members.length; M < L; M++) this.members[M] && "function" == typeof this.members[M][S] && this.members[M][S].apply(this.members[M], arguments);
                                    return "animate" == S ? this.fx || (this.fx = new e.FX.Set(this)) : this;
                                };
                            }),
                            (l = []),
                            e.FX.prototype))
                                "function" == typeof e.FX.prototype[f] && "function" != typeof e.FX.Set.prototype[f] && l.push(f);
                            l.forEach(function (v) {
                                e.FX.Set.prototype[v] = function () {
                                    for (var S = 0, M = this.set.members.length; S < M; S++) this.set.members[S].fx[v].apply(this.set.members[S].fx, arguments);
                                    return this;
                                };
                            });
                        }),
                        e.extend(e.Element, {}),
                        e.extend(e.Element, {
                            remember: function (l, f) {
                                if ("object" === _(arguments[0])) for (var v in l) this.remember(v, l[v]);
                                else {
                                    if (1 == arguments.length) return this.memory()[l];
                                    this.memory()[l] = f;
                                }
                                return this;
                            },
                            forget: function () {
                                if (0 == arguments.length) this._memory = {};
                                else for (var l = arguments.length - 1; l >= 0; l--) delete this.memory()[arguments[l]];
                                return this;
                            },
                            memory: function () {
                                return this._memory || (this._memory = {});
                            },
                        }),
                        (e.get = function (l) {
                            var f = t.getElementById(
                                (function (v) {
                                    var S = (v || "").toString().match(e.regex.reference);
                                    if (S) return S[1];
                                })(l) || l
                            );
                            return e.adopt(f);
                        }),
                        (e.select = function (l, f) {
                            return new e.Set(
                                e.utils.map((f || t).querySelectorAll(l), function (v) {
                                    return e.adopt(v);
                                })
                            );
                        }),
                        e.extend(e.Parent, {
                            select: function (l) {
                                return e.select(l, this.node);
                            },
                        });
                    var w = "abcdef".split("");
                    if ("function" != typeof A.CustomEvent) {
                        var P = function (l, f) {
                            f = f || { bubbles: !1, cancelable: !1, detail: void 0 };
                            var v = t.createEvent("CustomEvent");
                            return v.initCustomEvent(l, f.bubbles, f.cancelable, f.detail), v;
                        };
                        (P.prototype = A.Event.prototype), (e.CustomEvent = P);
                    } else e.CustomEvent = A.CustomEvent;
                    return e;
                }),
                void 0 !==
                    (K = function () {
                        return J(X, X.document);
                    }.call(mt, h, mt, Ct)) && (Ct.exports = K),
                function () {
                    (SVG.Filter = SVG.invent({
                        create: "filter",
                        inherit: SVG.Parent,
                        extend: {
                            source: "SourceGraphic",
                            sourceAlpha: "SourceAlpha",
                            background: "BackgroundImage",
                            backgroundAlpha: "BackgroundAlpha",
                            fill: "FillPaint",
                            stroke: "StrokePaint",
                            autoSetIn: !0,
                            put: function (n, o) {
                                return this.add(n, o), !n.attr("in") && this.autoSetIn && n.attr("in", this.source), n.attr("result") || n.attr("result", n), n;
                            },
                            blend: function (n, o, r) {
                                return this.put(new SVG.BlendEffect(n, o, r));
                            },
                            colorMatrix: function (n, o) {
                                return this.put(new SVG.ColorMatrixEffect(n, o));
                            },
                            convolveMatrix: function (n) {
                                return this.put(new SVG.ConvolveMatrixEffect(n));
                            },
                            componentTransfer: function (n) {
                                return this.put(new SVG.ComponentTransferEffect(n));
                            },
                            composite: function (n, o, r) {
                                return this.put(new SVG.CompositeEffect(n, o, r));
                            },
                            flood: function (n, o) {
                                return this.put(new SVG.FloodEffect(n, o));
                            },
                            offset: function (n, o) {
                                return this.put(new SVG.OffsetEffect(n, o));
                            },
                            image: function (n) {
                                return this.put(new SVG.ImageEffect(n));
                            },
                            merge: function () {
                                var n = [void 0];
                                for (var o in arguments) n.push(arguments[o]);
                                return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, n))());
                            },
                            gaussianBlur: function (n, o) {
                                return this.put(new SVG.GaussianBlurEffect(n, o));
                            },
                            morphology: function (n, o) {
                                return this.put(new SVG.MorphologyEffect(n, o));
                            },
                            diffuseLighting: function (n, o, r) {
                                return this.put(new SVG.DiffuseLightingEffect(n, o, r));
                            },
                            displacementMap: function (n, o, r, d, c) {
                                return this.put(new SVG.DisplacementMapEffect(n, o, r, d, c));
                            },
                            specularLighting: function (n, o, r, d) {
                                return this.put(new SVG.SpecularLightingEffect(n, o, r, d));
                            },
                            tile: function () {
                                return this.put(new SVG.TileEffect());
                            },
                            turbulence: function (n, o, r, d, c) {
                                return this.put(new SVG.TurbulenceEffect(n, o, r, d, c));
                            },
                            toString: function () {
                                return "url(#" + this.attr("id") + ")";
                            },
                        },
                    })),
                        SVG.extend(SVG.Defs, {
                            filter: function (n) {
                                var o = this.put(new SVG.Filter());
                                return "function" == typeof n && n.call(o, o), o;
                            },
                        }),
                        SVG.extend(SVG.Container, {
                            filter: function (n) {
                                return this.defs().filter(n);
                            },
                        }),
                        SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
                            filter: function (n) {
                                return (
                                    (this.filterer = n instanceof SVG.Element ? n : this.doc().filter(n)),
                                    this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer),
                                    this.attr("filter", this.filterer),
                                    this.filterer
                                );
                            },
                            unfilter: function (n) {
                                return this.filterer && !0 === n && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
                            },
                        }),
                        (SVG.Effect = SVG.invent({
                            create: function () {
                                this.constructor.call(this);
                            },
                            inherit: SVG.Element,
                            extend: {
                                in: function (n) {
                                    return null == n
                                        ? (this.parent() &&
                                              this.parent()
                                                  .select('[result="' + this.attr("in") + '"]')
                                                  .get(0)) ||
                                              this.attr("in")
                                        : this.attr("in", n);
                                },
                                result: function (n) {
                                    return null == n ? this.attr("result") : this.attr("result", n);
                                },
                                toString: function () {
                                    return this.result();
                                },
                            },
                        })),
                        (SVG.ParentEffect = SVG.invent({
                            create: function () {
                                this.constructor.call(this);
                            },
                            inherit: SVG.Parent,
                            extend: {
                                in: function (n) {
                                    return null == n
                                        ? (this.parent() &&
                                              this.parent()
                                                  .select('[result="' + this.attr("in") + '"]')
                                                  .get(0)) ||
                                              this.attr("in")
                                        : this.attr("in", n);
                                },
                                result: function (n) {
                                    return null == n ? this.attr("result") : this.attr("result", n);
                                },
                                toString: function () {
                                    return this.result();
                                },
                            },
                        }));
                    var A = {
                        blend: function (n, o) {
                            return this.parent() && this.parent().blend(this, n, o);
                        },
                        colorMatrix: function (n, o) {
                            return this.parent() && this.parent().colorMatrix(n, o).in(this);
                        },
                        convolveMatrix: function (n) {
                            return this.parent() && this.parent().convolveMatrix(n).in(this);
                        },
                        componentTransfer: function (n) {
                            return this.parent() && this.parent().componentTransfer(n).in(this);
                        },
                        composite: function (n, o) {
                            return this.parent() && this.parent().composite(this, n, o);
                        },
                        flood: function (n, o) {
                            return this.parent() && this.parent().flood(n, o);
                        },
                        offset: function (n, o) {
                            return this.parent() && this.parent().offset(n, o).in(this);
                        },
                        image: function (n) {
                            return this.parent() && this.parent().image(n);
                        },
                        merge: function () {
                            return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
                        },
                        gaussianBlur: function (n, o) {
                            return this.parent() && this.parent().gaussianBlur(n, o).in(this);
                        },
                        morphology: function (n, o) {
                            return this.parent() && this.parent().morphology(n, o).in(this);
                        },
                        diffuseLighting: function (n, o, r) {
                            return this.parent() && this.parent().diffuseLighting(n, o, r).in(this);
                        },
                        displacementMap: function (n, o, r, d) {
                            return this.parent() && this.parent().displacementMap(this, n, o, r, d);
                        },
                        specularLighting: function (n, o, r, d) {
                            return this.parent() && this.parent().specularLighting(n, o, r, d).in(this);
                        },
                        tile: function () {
                            return this.parent() && this.parent().tile().in(this);
                        },
                        turbulence: function (n, o, r, d, c) {
                            return this.parent() && this.parent().turbulence(n, o, r, d, c).in(this);
                        },
                    };
                    SVG.extend(SVG.Effect, A),
                        SVG.extend(SVG.ParentEffect, A),
                        (SVG.ChildEffect = SVG.invent({
                            create: function () {
                                this.constructor.call(this);
                            },
                            inherit: SVG.Element,
                            extend: {
                                in: function (n) {
                                    this.attr("in", n);
                                },
                            },
                        }));
                    var t = {
                            blend: function (n, o, r) {
                                this.attr({ in: n, in2: o, mode: r || "normal" });
                            },
                            colorMatrix: function (n, o) {
                                "matrix" == n && (o = a(o)), this.attr({ type: n, values: void 0 === o ? null : o });
                            },
                            convolveMatrix: function (n) {
                                (n = a(n)), this.attr({ order: Math.sqrt(n.split(" ").length), kernelMatrix: n });
                            },
                            composite: function (n, o, r) {
                                this.attr({ in: n, in2: o, operator: r });
                            },
                            flood: function (n, o) {
                                this.attr("flood-color", n), null != o && this.attr("flood-opacity", o);
                            },
                            offset: function (n, o) {
                                this.attr({ dx: n, dy: o });
                            },
                            image: function (n) {
                                this.attr("href", n, SVG.xlink);
                            },
                            displacementMap: function (n, o, r, d, c) {
                                this.attr({ in: n, in2: o, scale: r, xChannelSelector: d, yChannelSelector: c });
                            },
                            gaussianBlur: function (n, o) {
                                this.attr(
                                    "stdDeviation",
                                    null != n || null != o
                                        ? (function (r) {
                                              if (!Array.isArray(r)) return r;
                                              for (var d = 0, c = r.length, g = []; d < c; d++) g.push(r[d]);
                                              return g.join(" ");
                                          })(Array.prototype.slice.call(arguments))
                                        : "0 0"
                                );
                            },
                            morphology: function (n, o) {
                                this.attr({ operator: n, radius: o });
                            },
                            tile: function () {},
                            turbulence: function (n, o, r, d, c) {
                                this.attr({ numOctaves: o, seed: r, stitchTiles: d, baseFrequency: n, type: c });
                            },
                        },
                        e = {
                            merge: function () {
                                var n;
                                if (arguments[0] instanceof SVG.Set) {
                                    var o = this;
                                    arguments[0].each(function (d) {
                                        this instanceof SVG.MergeNode ? o.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && o.put(new SVG.MergeNode(this));
                                    });
                                } else {
                                    n = Array.isArray(arguments[0]) ? arguments[0] : arguments;
                                    for (var r = 0; r < n.length; r++) n[r] instanceof SVG.MergeNode ? this.put(n[r]) : this.put(new SVG.MergeNode(n[r]));
                                }
                            },
                            componentTransfer: function (n) {
                                if (
                                    ((this.rgb = new SVG.Set()),
                                    ["r", "g", "b", "a"].forEach(
                                        function (r) {
                                            (this[r] = new SVG["Func" + r.toUpperCase()]("identity")), this.rgb.add(this[r]), this.node.appendChild(this[r].node);
                                        }.bind(this)
                                    ),
                                    n)
                                )
                                    for (var o in (n.rgb &&
                                        (["r", "g", "b"].forEach(
                                            function (r) {
                                                this[r].attr(n.rgb);
                                            }.bind(this)
                                        ),
                                        delete n.rgb),
                                    n))
                                        this[o].attr(n[o]);
                            },
                            diffuseLighting: function (n, o, r) {
                                this.attr({ surfaceScale: n, diffuseConstant: o, kernelUnitLength: r });
                            },
                            specularLighting: function (n, o, r, d) {
                                this.attr({ surfaceScale: n, diffuseConstant: o, specularExponent: r, kernelUnitLength: d });
                            },
                        },
                        i = {
                            distantLight: function (n, o) {
                                this.attr({ azimuth: n, elevation: o });
                            },
                            pointLight: function (n, o, r) {
                                this.attr({ x: n, y: o, z: r });
                            },
                            spotLight: function (n, o, r, d, c, g) {
                                this.attr({ x: n, y: o, z: r, pointsAtX: d, pointsAtY: c, pointsAtZ: g });
                            },
                            mergeNode: function (n) {
                                this.attr("in", n);
                            },
                        };
                    function a(n) {
                        return Array.isArray(n) && (n = new SVG.Array(n)), n.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
                    }
                    function s() {
                        var n = function () {};
                        for (var o in ("function" == typeof arguments[arguments.length - 1] && ((n = arguments[arguments.length - 1]), Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments))
                            for (var r in arguments[o]) n(arguments[o][r], r, arguments[o]);
                    }
                    ["r", "g", "b", "a"].forEach(function (n) {
                        i["Func" + n.toUpperCase()] = function (o) {
                            switch ((this.attr("type", o), o)) {
                                case "table":
                                    this.attr("tableValues", arguments[1]);
                                    break;
                                case "linear":
                                    this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
                                    break;
                                case "gamma":
                                    this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
                            }
                        };
                    }),
                        s(t, function (n, o) {
                            var r = o.charAt(0).toUpperCase() + o.slice(1);
                            SVG[r + "Effect"] = SVG.invent({
                                create: function () {
                                    this.constructor.call(this, SVG.create("fe" + r)), n.apply(this, arguments), this.result(this.attr("id") + "Out");
                                },
                                inherit: SVG.Effect,
                                extend: {},
                            });
                        }),
                        s(e, function (n, o) {
                            var r = o.charAt(0).toUpperCase() + o.slice(1);
                            SVG[r + "Effect"] = SVG.invent({
                                create: function () {
                                    this.constructor.call(this, SVG.create("fe" + r)), n.apply(this, arguments), this.result(this.attr("id") + "Out");
                                },
                                inherit: SVG.ParentEffect,
                                extend: {},
                            });
                        }),
                        s(i, function (n, o) {
                            var r = o.charAt(0).toUpperCase() + o.slice(1);
                            SVG[r] = SVG.invent({
                                create: function () {
                                    this.constructor.call(this, SVG.create("fe" + r)), n.apply(this, arguments);
                                },
                                inherit: SVG.ChildEffect,
                                extend: {},
                            });
                        }),
                        SVG.extend(SVG.MergeEffect, {
                            in: function (n) {
                                return n instanceof SVG.MergeNode ? this.add(n, 0) : this.add(new SVG.MergeNode(n), 0), this;
                            },
                        }),
                        SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {
                            in2: function (n) {
                                return null == n
                                    ? (this.parent() &&
                                          this.parent()
                                              .select('[result="' + this.attr("in2") + '"]')
                                              .get(0)) ||
                                          this.attr("in2")
                                    : this.attr("in2", n);
                            },
                        }),
                        (SVG.filter = { sepiatone: [0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0, 0, 1, 0] });
                }.call(void 0),
                (function () {
                    function A(s, n, o, r, d, c, g) {
                        for (
                            var u = s.slice(n, o || g), p = r.slice(d, c || g), x = 0, y = { pos: [0, 0], start: [0, 0] }, C = { pos: [0, 0], start: [0, 0] };
                            (u[x] = t.call(y, u[x])),
                                (p[x] = t.call(C, p[x])),
                                u[x][0] != p[x][0] || "M" == u[x][0] || ("A" == u[x][0] && (u[x][4] != p[x][4] || u[x][5] != p[x][5]))
                                    ? (Array.prototype.splice.apply(u, [x, 1].concat(i.call(y, u[x]))), Array.prototype.splice.apply(p, [x, 1].concat(i.call(C, p[x]))))
                                    : ((u[x] = e.call(y, u[x])), (p[x] = e.call(C, p[x]))),
                                ++x != u.length || x != p.length;

                        )
                            x == u.length && u.push(["C", y.pos[0], y.pos[1], y.pos[0], y.pos[1], y.pos[0], y.pos[1]]), x == p.length && p.push(["C", C.pos[0], C.pos[1], C.pos[0], C.pos[1], C.pos[0], C.pos[1]]);
                        return { start: u, dest: p };
                    }
                    function t(s) {
                        switch (s[0]) {
                            case "z":
                            case "Z":
                                (s[0] = "L"), (s[1] = this.start[0]), (s[2] = this.start[1]);
                                break;
                            case "H":
                                (s[0] = "L"), (s[2] = this.pos[1]);
                                break;
                            case "V":
                                (s[0] = "L"), (s[2] = s[1]), (s[1] = this.pos[0]);
                                break;
                            case "T":
                                (s[0] = "Q"), (s[3] = s[1]), (s[4] = s[2]), (s[1] = this.reflection[1]), (s[2] = this.reflection[0]);
                                break;
                            case "S":
                                (s[0] = "C"), (s[6] = s[4]), (s[5] = s[3]), (s[4] = s[2]), (s[3] = s[1]), (s[2] = this.reflection[1]), (s[1] = this.reflection[0]);
                        }
                        return s;
                    }
                    function e(s) {
                        var n = s.length;
                        return (this.pos = [s[n - 2], s[n - 1]]), -1 != "SCQT".indexOf(s[0]) && (this.reflection = [2 * this.pos[0] - s[n - 4], 2 * this.pos[1] - s[n - 3]]), s;
                    }
                    function i(s) {
                        var n = [s];
                        switch (s[0]) {
                            case "M":
                                return (this.pos = this.start = [s[1], s[2]]), n;
                            case "L":
                                (s[5] = s[3] = s[1]), (s[6] = s[4] = s[2]), (s[1] = this.pos[0]), (s[2] = this.pos[1]);
                                break;
                            case "Q":
                                (s[6] = s[4]),
                                    (s[5] = s[3]),
                                    (s[4] = (1 * s[4]) / 3 + (2 * s[2]) / 3),
                                    (s[3] = (1 * s[3]) / 3 + (2 * s[1]) / 3),
                                    (s[2] = (1 * this.pos[1]) / 3 + (2 * s[2]) / 3),
                                    (s[1] = (1 * this.pos[0]) / 3 + (2 * s[1]) / 3);
                                break;
                            case "A":
                                s = (n = (function (o, r) {
                                    var d,
                                        c,
                                        g,
                                        u,
                                        p,
                                        x,
                                        y,
                                        C,
                                        w,
                                        P,
                                        l,
                                        f,
                                        v,
                                        S,
                                        M,
                                        L,
                                        k,
                                        I,
                                        Y,
                                        D,
                                        O,
                                        N,
                                        Q,
                                        tt,
                                        et,
                                        at,
                                        ct = Math.abs(r[1]),
                                        ht = Math.abs(r[2]),
                                        ft = r[3] % 360,
                                        zt = r[4],
                                        Ft = r[5],
                                        Ee = r[6],
                                        Xe = r[7],
                                        yt = new SVG.Point(o),
                                        xt = new SVG.Point(Ee, Xe),
                                        Fe = [];
                                    if (0 === ct || 0 === ht || (yt.x === xt.x && yt.y === xt.y)) return [["C", yt.x, yt.y, xt.x, xt.y, xt.x, xt.y]];
                                    for (
                                        (c = ((d = new SVG.Point((yt.x - xt.x) / 2, (yt.y - xt.y) / 2).transform(new SVG.Matrix().rotate(ft))).x * d.x) / (ct * ct) + (d.y * d.y) / (ht * ht)) > 1 && ((ct *= c = Math.sqrt(c)), (ht *= c)),
                                            g = new SVG.Matrix()
                                                .rotate(ft)
                                                .scale(1 / ct, 1 / ht)
                                                .rotate(-ft),
                                            yt = yt.transform(g),
                                            x = (u = [(xt = xt.transform(g)).x - yt.x, xt.y - yt.y])[0] * u[0] + u[1] * u[1],
                                            p = Math.sqrt(x),
                                            u[0] /= p,
                                            u[1] /= p,
                                            y = x < 4 ? Math.sqrt(1 - x / 4) : 0,
                                            zt === Ft && (y *= -1),
                                            C = new SVG.Point((xt.x + yt.x) / 2 + y * -u[1], (xt.y + yt.y) / 2 + y * u[0]),
                                            w = new SVG.Point(yt.x - C.x, yt.y - C.y),
                                            P = new SVG.Point(xt.x - C.x, xt.y - C.y),
                                            l = Math.acos(w.x / Math.sqrt(w.x * w.x + w.y * w.y)),
                                            w.y < 0 && (l *= -1),
                                            f = Math.acos(P.x / Math.sqrt(P.x * P.x + P.y * P.y)),
                                            P.y < 0 && (f *= -1),
                                            Ft && l > f && (f += 2 * Math.PI),
                                            !Ft && l < f && (f -= 2 * Math.PI),
                                            L = [],
                                            k = l,
                                            v = (f - l) / (S = Math.ceil((2 * Math.abs(l - f)) / Math.PI)),
                                            M = (4 * Math.tan(v / 4)) / 3,
                                            O = 0;
                                        O <= S;
                                        O++
                                    )
                                        (Y = Math.cos(k)), (I = Math.sin(k)), (D = new SVG.Point(C.x + Y, C.y + I)), (L[O] = [new SVG.Point(D.x + M * I, D.y - M * Y), D, new SVG.Point(D.x - M * I, D.y + M * Y)]), (k += v);
                                    for (L[0][0] = L[0][1].clone(), L[L.length - 1][2] = L[L.length - 1][1].clone(), g = new SVG.Matrix().rotate(ft).scale(ct, ht).rotate(-ft), O = 0, N = L.length; O < N; O++)
                                        (L[O][0] = L[O][0].transform(g)), (L[O][1] = L[O][1].transform(g)), (L[O][2] = L[O][2].transform(g));
                                    for (O = 1, N = L.length; O < N; O++) (Q = (D = L[O - 1][2]).x), (tt = D.y), (et = (D = L[O][0]).x), (at = D.y), (Ee = (D = L[O][1]).x), Fe.push(["C", Q, tt, et, at, Ee, (Xe = D.y)]);
                                    return Fe;
                                })(this.pos, s))[0];
                        }
                        return (s[0] = "C"), (this.pos = [s[5], s[6]]), (this.reflection = [2 * s[5] - s[3], 2 * s[6] - s[4]]), n;
                    }
                    function a(s, n) {
                        if (!1 === n) return !1;
                        for (var o = n, r = s.length; o < r; ++o) if ("M" == s[o][0]) return o;
                        return !1;
                    }
                    SVG.extend(SVG.PathArray, {
                        morph: function (s) {
                            for (var n = this.value, o = this.parse(s), r = 0, d = 0, c = !1, g = !1; !1 !== r || !1 !== d; ) {
                                var u;
                                (c = a(n, !1 !== r && r + 1)),
                                    (g = a(o, !1 !== d && d + 1)),
                                    !1 === r && (r = 0 == (u = new SVG.PathArray(p.start).bbox()).height || 0 == u.width ? n.push(n[0]) - 1 : n.push(["M", u.x + u.width / 2, u.y + u.height / 2]) - 1),
                                    !1 === d && (d = 0 == (u = new SVG.PathArray(p.dest).bbox()).height || 0 == u.width ? o.push(o[0]) - 1 : o.push(["M", u.x + u.width / 2, u.y + u.height / 2]) - 1);
                                var p = A(n, r, c, o, d, g);
                                (n = n.slice(0, r).concat(p.start, !1 === c ? [] : n.slice(c))), (o = o.slice(0, d).concat(p.dest, !1 === g ? [] : o.slice(g))), (r = !1 !== c && r + p.start.length), (d = !1 !== g && d + p.dest.length);
                            }
                            return (this.value = n), (this.destination = new SVG.PathArray()), (this.destination.value = o), this;
                        },
                    });
                })(),
                function () {
                    function A(t) {
                        t.remember("_draggable", this), (this.el = t);
                    }
                    (A.prototype.init = function (t, e) {
                        var i = this;
                        (this.constraint = t),
                            (this.value = e),
                            this.el.on("mousedown.drag", function (a) {
                                i.start(a);
                            }),
                            this.el.on("touchstart.drag", function (a) {
                                i.start(a);
                            });
                    }),
                        (A.prototype.transformPoint = function (t, e) {
                            var i = ((t = t || window.event).changedTouches && t.changedTouches[0]) || t;
                            return (this.p.x = i.clientX - (e || 0)), (this.p.y = i.clientY), this.p.matrixTransform(this.m);
                        }),
                        (A.prototype.getBBox = function () {
                            var t = this.el.bbox();
                            return this.el instanceof SVG.Nested && (t = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && ((t.x = this.el.x()), (t.y = this.el.y())), t;
                        }),
                        (A.prototype.start = function (t) {
                            if (("click" != t.type && "mousedown" != t.type && "mousemove" != t.type) || 1 == (t.which || t.buttons)) {
                                var e = this;
                                if ((this.el.fire("beforedrag", { event: t, handler: this }), !this.el.event().defaultPrevented)) {
                                    t.preventDefault(),
                                        t.stopPropagation(),
                                        (this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc)),
                                        (this.p = this.parent.node.createSVGPoint()),
                                        (this.m = this.el.node.getScreenCTM().inverse());
                                    var i,
                                        a = this.getBBox();
                                    if (this.el instanceof SVG.Text)
                                        switch (((i = this.el.node.getComputedTextLength()), this.el.attr("text-anchor"))) {
                                            case "middle":
                                                i /= 2;
                                                break;
                                            case "start":
                                                i = 0;
                                        }
                                    (this.startPoints = { point: this.transformPoint(t, i), box: a, transform: this.el.transform() }),
                                        SVG.on(window, "mousemove.drag", function (s) {
                                            e.drag(s);
                                        }),
                                        SVG.on(window, "touchmove.drag", function (s) {
                                            e.drag(s);
                                        }),
                                        SVG.on(window, "mouseup.drag", function (s) {
                                            e.end(s);
                                        }),
                                        SVG.on(window, "touchend.drag", function (s) {
                                            e.end(s);
                                        }),
                                        this.el.fire("dragstart", { event: t, p: this.startPoints.point, m: this.m, handler: this });
                                }
                            }
                        }),
                        (A.prototype.drag = function (t) {
                            var e = this.getBBox(),
                                i = this.transformPoint(t),
                                a = this.startPoints.box.x + i.x - this.startPoints.point.x,
                                s = this.startPoints.box.y + i.y - this.startPoints.point.y,
                                n = this.constraint,
                                o = i.x - this.startPoints.point.x,
                                r = i.y - this.startPoints.point.y;
                            if ((this.el.fire("dragmove", { event: t, p: i, m: this.m, handler: this }), this.el.event().defaultPrevented)) return i;
                            if ("function" == typeof n) {
                                var d = n.call(this.el, a, s, this.m);
                                "boolean" == typeof d && (d = { x: d, y: d }), !0 === d.x ? this.el.x(a) : !1 !== d.x && this.el.x(d.x), !0 === d.y ? this.el.y(s) : !1 !== d.y && this.el.y(d.y);
                            } else
                                "object" == typeof n &&
                                    (null != n.minX && a < n.minX ? (o = (a = n.minX) - this.startPoints.box.x) : null != n.maxX && a > n.maxX - e.width && (o = (a = n.maxX - e.width) - this.startPoints.box.x),
                                    null != n.minY && s < n.minY ? (r = (s = n.minY) - this.startPoints.box.y) : null != n.maxY && s > n.maxY - e.height && (r = (s = n.maxY - e.height) - this.startPoints.box.y),
                                    null != n.snapToGrid && ((a -= a % n.snapToGrid), (s -= s % n.snapToGrid), (o -= o % n.snapToGrid), (r -= r % n.snapToGrid)),
                                    this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({ x: o, y: r }, !0) : this.el.move(a, s));
                            return i;
                        }),
                        (A.prototype.end = function (t) {
                            var e = this.drag(t);
                            this.el.fire("dragend", { event: t, p: e, m: this.m, handler: this }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
                        }),
                        SVG.extend(SVG.Element, {
                            draggable: function (t, e) {
                                ("function" != typeof t && "object" != typeof t) || ((e = t), (t = !0));
                                var i = this.remember("_draggable") || new A(this);
                                return (t = void 0 === t || t) ? i.init(e || {}, t) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
                            },
                        });
                }.call(void 0),
                (function () {
                    function A(t) {
                        (this.el = t),
                            t.remember("_selectHandler", this),
                            (this.pointSelection = { isSelected: !1 }),
                            (this.rectSelection = { isSelected: !1 }),
                            (this.pointsList = { lt: [0, 0], rt: ["width", 0], rb: ["width", "height"], lb: [0, "height"], t: ["width", 0], r: ["width", "height"], b: ["width", "height"], l: [0, "height"] }),
                            (this.pointCoord = function (e, i, a) {
                                var s = "string" != typeof e ? e : i[e];
                                return a ? s / 2 : s;
                            }),
                            (this.pointCoords = function (e, i) {
                                var a = this.pointsList[e];
                                return { x: this.pointCoord(a[0], i, "t" === e || "b" === e), y: this.pointCoord(a[1], i, "r" === e || "l" === e) };
                            });
                    }
                    (A.prototype.init = function (t, e) {
                        var i = this.el.bbox();
                        this.options = {};
                        var a = this.el.selectize.defaults.points;
                        for (var s in this.el.selectize.defaults) (this.options[s] = this.el.selectize.defaults[s]), void 0 !== e[s] && (this.options[s] = e[s]);
                        var n = ["points", "pointsExclude"];
                        for (var s in n) {
                            var o = this.options[n[s]];
                            "string" == typeof o ? (o = o.length > 0 ? o.split(/\s*,\s*/i) : []) : "boolean" == typeof o && "points" === n[s] && (o = o ? a : []), (this.options[n[s]] = o);
                        }
                        (this.options.points = [a, this.options.points].reduce(function (r, d) {
                            return r.filter(function (c) {
                                return d.indexOf(c) > -1;
                            });
                        })),
                            (this.options.points = [this.options.points, this.options.pointsExclude].reduce(function (r, d) {
                                return r.filter(function (c) {
                                    return d.indexOf(c) < 0;
                                });
                            })),
                            (this.parent = this.el.parent()),
                            (this.nested = this.nested || this.parent.group()),
                            this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)),
                            this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t),
                            this.observe(),
                            this.cleanup();
                    }),
                        (A.prototype.selectPoints = function (t) {
                            return (this.pointSelection.isSelected = t), this.pointSelection.set || ((this.pointSelection.set = this.parent.set()), this.drawPoints()), this;
                        }),
                        (A.prototype.getPointArray = function () {
                            var t = this.el.bbox();
                            return this.el
                                .array()
                                .valueOf()
                                .map(function (e) {
                                    return [e[0] - t.x, e[1] - t.y];
                                });
                        }),
                        (A.prototype.drawPoints = function () {
                            for (var t = this, e = this.getPointArray(), i = 0, a = e.length; i < a; ++i) {
                                var s = (function (o) {
                                        return function (r) {
                                            (r = r || window.event).preventDefault ? r.preventDefault() : (r.returnValue = !1),
                                                r.stopPropagation(),
                                                t.el.fire("point", { x: r.pageX || r.touches[0].pageX, y: r.pageY || r.touches[0].pageY, i: o, event: r });
                                        };
                                    })(i),
                                    n = this.drawPoint(e[i][0], e[i][1])
                                        .addClass(this.options.classPoints)
                                        .addClass(this.options.classPoints + "_point")
                                        .on("touchstart", s)
                                        .on("mousedown", s);
                                this.pointSelection.set.add(n);
                            }
                        }),
                        (A.prototype.drawPoint = function (t, e) {
                            var i = this.options.pointType;
                            switch (i) {
                                case "circle":
                                    return this.drawCircle(t, e);
                                case "rect":
                                    return this.drawRect(t, e);
                                default:
                                    if ("function" == typeof i) return i.call(this, t, e);
                                    throw new Error("Unknown " + i + " point type!");
                            }
                        }),
                        (A.prototype.drawCircle = function (t, e) {
                            return this.nested.circle(this.options.pointSize).center(t, e);
                        }),
                        (A.prototype.drawRect = function (t, e) {
                            return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t, e);
                        }),
                        (A.prototype.updatePointSelection = function () {
                            var t = this.getPointArray();
                            this.pointSelection.set.each(function (e) {
                                (this.cx() === t[e][0] && this.cy() === t[e][1]) || this.center(t[e][0], t[e][1]);
                            });
                        }),
                        (A.prototype.updateRectSelection = function () {
                            var t = this,
                                e = this.el.bbox();
                            if (
                                (this.rectSelection.set.get(0).attr({ width: e.width, height: e.height }),
                                this.options.points.length &&
                                    this.options.points.map(function (a, s) {
                                        var n = t.pointCoords(a, e);
                                        t.rectSelection.set.get(s + 1).center(n.x, n.y);
                                    }),
                                this.options.rotationPoint)
                            ) {
                                var i = this.rectSelection.set.length();
                                this.rectSelection.set.get(i - 1).center(e.width / 2, 20);
                            }
                        }),
                        (A.prototype.selectRect = function (t) {
                            var e = this,
                                i = this.el.bbox();
                            function a(o) {
                                return function (r) {
                                    (r = r || window.event).preventDefault ? r.preventDefault() : (r.returnValue = !1), r.stopPropagation(), e.el.fire(o, { x: r.pageX || r.touches[0].pageX, y: r.pageY || r.touches[0].pageY, event: r });
                                };
                            }
                            if (
                                ((this.rectSelection.isSelected = t),
                                (this.rectSelection.set = this.rectSelection.set || this.parent.set()),
                                this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i.width, i.height).addClass(this.options.classRect)),
                                this.options.points.length &&
                                    this.rectSelection.set.length() < 2 &&
                                    (this.options.points.map(function (o, r) {
                                        var d = e.pointCoords(o, i),
                                            c = e
                                                .drawPoint(d.x, d.y)
                                                .attr("class", e.options.classPoints + "_" + o)
                                                .on("mousedown", a(o))
                                                .on("touchstart", a(o));
                                        e.rectSelection.set.add(c);
                                    }),
                                    this.rectSelection.set.each(function () {
                                        this.addClass(e.options.classPoints);
                                    })),
                                this.options.rotationPoint && ((this.options.points && !this.rectSelection.set.get(9)) || (!this.options.points && !this.rectSelection.set.get(1))))
                            ) {
                                var s = function (o) {
                                        (o = o || window.event).preventDefault ? o.preventDefault() : (o.returnValue = !1),
                                            o.stopPropagation(),
                                            e.el.fire("rot", { x: o.pageX || o.touches[0].pageX, y: o.pageY || o.touches[0].pageY, event: o });
                                    },
                                    n = this.drawPoint(i.width / 2, 20)
                                        .attr("class", this.options.classPoints + "_rot")
                                        .on("touchstart", s)
                                        .on("mousedown", s);
                                this.rectSelection.set.add(n);
                            }
                        }),
                        (A.prototype.handler = function () {
                            var t = this.el.bbox();
                            this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
                        }),
                        (A.prototype.observe = function () {
                            var t = this;
                            if (MutationObserver)
                                if (this.rectSelection.isSelected || this.pointSelection.isSelected)
                                    (this.observerInst =
                                        this.observerInst ||
                                        new MutationObserver(function () {
                                            t.handler();
                                        })),
                                        this.observerInst.observe(this.el.node, { attributes: !0 });
                                else
                                    try {
                                        this.observerInst.disconnect(), delete this.observerInst;
                                    } catch (e) {}
                            else
                                this.el.off("DOMAttrModified.select"),
                                    (this.rectSelection.isSelected || this.pointSelection.isSelected) &&
                                        this.el.on("DOMAttrModified.select", function () {
                                            t.handler();
                                        });
                        }),
                        (A.prototype.cleanup = function () {
                            !this.rectSelection.isSelected &&
                                this.rectSelection.set &&
                                (this.rectSelection.set.each(function () {
                                    this.remove();
                                }),
                                this.rectSelection.set.clear(),
                                delete this.rectSelection.set),
                                !this.pointSelection.isSelected &&
                                    this.pointSelection.set &&
                                    (this.pointSelection.set.each(function () {
                                        this.remove();
                                    }),
                                    this.pointSelection.set.clear(),
                                    delete this.pointSelection.set),
                                this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
                        }),
                        SVG.extend(SVG.Element, {
                            selectize: function (t, e) {
                                return "object" == typeof t && ((e = t), (t = !0)), (this.remember("_selectHandler") || new A(this)).init(void 0 === t || t, e || {}), this;
                            },
                        }),
                        (SVG.Element.prototype.selectize.defaults = {
                            points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"],
                            pointsExclude: [],
                            classRect: "svg_select_boundingRect",
                            classPoints: "svg_select_points",
                            pointSize: 7,
                            rotationPoint: !0,
                            deepSelect: !1,
                            pointType: "circle",
                        });
                })(),
                (function () {
                    (function () {
                        function A(t) {
                            t.remember("_resizeHandler", this), (this.el = t), (this.parameters = {}), (this.lastUpdateCall = null), (this.p = t.doc().node.createSVGPoint());
                        }
                        (A.prototype.transformPoint = function (t, e, i) {
                            return (this.p.x = t - (this.offset.x - window.pageXOffset)), (this.p.y = e - (this.offset.y - window.pageYOffset)), this.p.matrixTransform(i || this.m);
                        }),
                            (A.prototype._extractPosition = function (t) {
                                return { x: null != t.clientX ? t.clientX : t.touches[0].clientX, y: null != t.clientY ? t.clientY : t.touches[0].clientY };
                            }),
                            (A.prototype.init = function (t) {
                                var e = this;
                                if ((this.stop(), "stop" !== t)) {
                                    for (var i in ((this.options = {}), this.el.resize.defaults)) (this.options[i] = this.el.resize.defaults[i]), void 0 !== t[i] && (this.options[i] = t[i]);
                                    this.el.on("lt.resize", function (a) {
                                        e.resize(a || window.event);
                                    }),
                                        this.el.on("rt.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.el.on("rb.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.el.on("lb.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.el.on("t.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.el.on("r.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.el.on("b.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.el.on("l.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.el.on("rot.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.el.on("point.resize", function (a) {
                                            e.resize(a || window.event);
                                        }),
                                        this.update();
                                }
                            }),
                            (A.prototype.stop = function () {
                                return (
                                    this.el.off("lt.resize"),
                                    this.el.off("rt.resize"),
                                    this.el.off("rb.resize"),
                                    this.el.off("lb.resize"),
                                    this.el.off("t.resize"),
                                    this.el.off("r.resize"),
                                    this.el.off("b.resize"),
                                    this.el.off("l.resize"),
                                    this.el.off("rot.resize"),
                                    this.el.off("point.resize"),
                                    this
                                );
                            }),
                            (A.prototype.resize = function (t) {
                                var e = this;
                                (this.m = this.el.node.getScreenCTM().inverse()), (this.offset = { x: window.pageXOffset, y: window.pageYOffset });
                                var i = this._extractPosition(t.detail.event);
                                if (
                                    ((this.parameters = { type: this.el.type, p: this.transformPoint(i.x, i.y), x: t.detail.x, y: t.detail.y, box: this.el.bbox(), rotation: this.el.transform().rotation }),
                                    "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]),
                                    void 0 !== t.detail.i)
                                ) {
                                    var a = this.el.array().valueOf();
                                    (this.parameters.i = t.detail.i), (this.parameters.pointCoords = [a[t.detail.i][0], a[t.detail.i][1]]);
                                }
                                switch (t.type) {
                                    case "lt":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n);
                                            if (this.parameters.box.width - o[0] > 0 && this.parameters.box.height - o[1] > 0) {
                                                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + o[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - o[0]);
                                                (o = this.checkAspectRatio(o)), this.el.move(this.parameters.box.x + o[0], this.parameters.box.y + o[1]).size(this.parameters.box.width - o[0], this.parameters.box.height - o[1]);
                                            }
                                        };
                                        break;
                                    case "rt":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n, 2);
                                            if (this.parameters.box.width + o[0] > 0 && this.parameters.box.height - o[1] > 0) {
                                                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - o[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + o[0]);
                                                (o = this.checkAspectRatio(o, !0)), this.el.move(this.parameters.box.x, this.parameters.box.y + o[1]).size(this.parameters.box.width + o[0], this.parameters.box.height - o[1]);
                                            }
                                        };
                                        break;
                                    case "rb":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n, 0);
                                            if (this.parameters.box.width + o[0] > 0 && this.parameters.box.height + o[1] > 0) {
                                                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - o[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + o[0]);
                                                (o = this.checkAspectRatio(o)), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + o[0], this.parameters.box.height + o[1]);
                                            }
                                        };
                                        break;
                                    case "lb":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n, 1);
                                            if (this.parameters.box.width - o[0] > 0 && this.parameters.box.height + o[1] > 0) {
                                                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + o[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - o[0]);
                                                (o = this.checkAspectRatio(o, !0)), this.el.move(this.parameters.box.x + o[0], this.parameters.box.y).size(this.parameters.box.width - o[0], this.parameters.box.height + o[1]);
                                            }
                                        };
                                        break;
                                    case "t":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n, 2);
                                            if (this.parameters.box.height - o[1] > 0) {
                                                if ("text" === this.parameters.type) return;
                                                this.el.move(this.parameters.box.x, this.parameters.box.y + o[1]).height(this.parameters.box.height - o[1]);
                                            }
                                        };
                                        break;
                                    case "r":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n, 0);
                                            if (this.parameters.box.width + o[0] > 0) {
                                                if ("text" === this.parameters.type) return;
                                                this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + o[0]);
                                            }
                                        };
                                        break;
                                    case "b":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n, 0);
                                            if (this.parameters.box.height + o[1] > 0) {
                                                if ("text" === this.parameters.type) return;
                                                this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + o[1]);
                                            }
                                        };
                                        break;
                                    case "l":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n, 1);
                                            if (this.parameters.box.width - o[0] > 0) {
                                                if ("text" === this.parameters.type) return;
                                                this.el.move(this.parameters.box.x + o[0], this.parameters.box.y).width(this.parameters.box.width - o[0]);
                                            }
                                        };
                                        break;
                                    case "rot":
                                        this.calc = function (s, n) {
                                            var o = s + this.parameters.p.x,
                                                r = n + this.parameters.p.y,
                                                d = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2),
                                                c = Math.atan2(r - this.parameters.box.y - this.parameters.box.height / 2, o - this.parameters.box.x - this.parameters.box.width / 2),
                                                g = this.parameters.rotation + (180 * (c - d)) / Math.PI + this.options.snapToAngle / 2;
                                            this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(g - (g % this.options.snapToAngle), this.parameters.box.cx, this.parameters.box.cy);
                                        };
                                        break;
                                    case "point":
                                        this.calc = function (s, n) {
                                            var o = this.snapToGrid(s, n, this.parameters.pointCoords[0], this.parameters.pointCoords[1]),
                                                r = this.el.array().valueOf();
                                            (r[this.parameters.i][0] = this.parameters.pointCoords[0] + o[0]), (r[this.parameters.i][1] = this.parameters.pointCoords[1] + o[1]), this.el.plot(r);
                                        };
                                }
                                this.el.fire("resizestart", { dx: this.parameters.x, dy: this.parameters.y, event: t }),
                                    SVG.on(window, "touchmove.resize", function (s) {
                                        e.update(s || window.event);
                                    }),
                                    SVG.on(window, "touchend.resize", function () {
                                        e.done();
                                    }),
                                    SVG.on(window, "mousemove.resize", function (s) {
                                        e.update(s || window.event);
                                    }),
                                    SVG.on(window, "mouseup.resize", function () {
                                        e.done();
                                    });
                            }),
                            (A.prototype.update = function (t) {
                                if (t) {
                                    var e = this._extractPosition(t),
                                        i = this.transformPoint(e.x, e.y),
                                        a = i.x - this.parameters.p.x,
                                        s = i.y - this.parameters.p.y;
                                    (this.lastUpdateCall = [a, s]), this.calc(a, s), this.el.fire("resizing", { dx: a, dy: s, event: t });
                                } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
                            }),
                            (A.prototype.done = function () {
                                (this.lastUpdateCall = null), SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
                            }),
                            (A.prototype.snapToGrid = function (t, e, i, a) {
                                var s;
                                return (
                                    (s =
                                        void 0 !== a
                                            ? [(i + t) % this.options.snapToGrid, (a + e) % this.options.snapToGrid]
                                            : [
                                                  (this.parameters.box.x + t + (1 & (i = null == i ? 3 : i) ? 0 : this.parameters.box.width)) % this.options.snapToGrid,
                                                  (this.parameters.box.y + e + (2 & i ? 0 : this.parameters.box.height)) % this.options.snapToGrid,
                                              ]),
                                    t < 0 && (s[0] -= this.options.snapToGrid),
                                    e < 0 && (s[1] -= this.options.snapToGrid),
                                    (t -= Math.abs(s[0]) < this.options.snapToGrid / 2 ? s[0] : s[0] - (t < 0 ? -this.options.snapToGrid : this.options.snapToGrid)),
                                    (e -= Math.abs(s[1]) < this.options.snapToGrid / 2 ? s[1] : s[1] - (e < 0 ? -this.options.snapToGrid : this.options.snapToGrid)),
                                    this.constraintToBox(t, e, i, a)
                                );
                            }),
                            (A.prototype.constraintToBox = function (t, e, i, a) {
                                var s,
                                    n,
                                    o = this.options.constraint || {};
                                return (
                                    void 0 !== a ? ((s = i), (n = a)) : ((s = this.parameters.box.x + (1 & i ? 0 : this.parameters.box.width)), (n = this.parameters.box.y + (2 & i ? 0 : this.parameters.box.height))),
                                    void 0 !== o.minX && s + t < o.minX && (t = o.minX - s),
                                    void 0 !== o.maxX && s + t > o.maxX && (t = o.maxX - s),
                                    void 0 !== o.minY && n + e < o.minY && (e = o.minY - n),
                                    void 0 !== o.maxY && n + e > o.maxY && (e = o.maxY - n),
                                    [t, e]
                                );
                            }),
                            (A.prototype.checkAspectRatio = function (t, e) {
                                if (!this.options.saveAspectRatio) return t;
                                var i = t.slice(),
                                    a = this.parameters.box.width / this.parameters.box.height,
                                    s = this.parameters.box.width + t[0],
                                    n = this.parameters.box.height - t[1],
                                    o = s / n;
                                return o < a ? ((i[1] = s / a - this.parameters.box.height), e && (i[1] = -i[1])) : o > a && ((i[0] = this.parameters.box.width - n * a), e && (i[0] = -i[0])), i;
                            }),
                            SVG.extend(SVG.Element, {
                                resize: function (t) {
                                    return (this.remember("_resizeHandler") || new A(this)).init(t || {}), this;
                                },
                            }),
                            (SVG.Element.prototype.resize.defaults = { snapToAngle: 0.1, snapToGrid: 1, constraint: {}, saveAspectRatio: !1 });
                    }.call(this));
                })(),
                void 0 === window.Apex && (window.Apex = {});
            var Ye = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "initModules",
                                value: function () {
                                    (this.ctx.publicMethods = [
                                        "updateOptions",
                                        "updateSeries",
                                        "appendData",
                                        "appendSeries",
                                        "toggleSeries",
                                        "showSeries",
                                        "hideSeries",
                                        "setLocale",
                                        "resetSeries",
                                        "zoomX",
                                        "toggleDataPointSelection",
                                        "dataURI",
                                        "exportToCSV",
                                        "addXaxisAnnotation",
                                        "addYaxisAnnotation",
                                        "addPointAnnotation",
                                        "clearAnnotations",
                                        "removeAnnotation",
                                        "paper",
                                        "destroy",
                                    ]),
                                        (this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"]),
                                        (this.ctx.animations = new j(this.ctx)),
                                        (this.ctx.axes = new ge(this.ctx)),
                                        (this.ctx.core = new Bt(this.ctx.el, this.ctx)),
                                        (this.ctx.config = new Xt({})),
                                        (this.ctx.data = new qt(this.ctx)),
                                        (this.ctx.grid = new _t(this.ctx)),
                                        (this.ctx.graphics = new E(this.ctx)),
                                        (this.ctx.coreUtils = new $(this.ctx)),
                                        (this.ctx.crosshairs = new Jt(this.ctx)),
                                        (this.ctx.events = new Zt(this.ctx)),
                                        (this.ctx.exports = new Rt(this.ctx)),
                                        (this.ctx.localization = new ce(this.ctx)),
                                        (this.ctx.options = new wt()),
                                        (this.ctx.responsive = new ue(this.ctx)),
                                        (this.ctx.series = new bt(this.ctx)),
                                        (this.ctx.theme = new fe(this.ctx)),
                                        (this.ctx.formatters = new At(this.ctx)),
                                        (this.ctx.titleSubtitle = new pe(this.ctx)),
                                        (this.ctx.legend = new te(this.ctx)),
                                        (this.ctx.toolbar = new ee(this.ctx)),
                                        (this.ctx.tooltip = new se(this.ctx)),
                                        (this.ctx.dimensions = new Nt(this.ctx)),
                                        (this.ctx.updateHelpers = new It(this.ctx)),
                                        (this.ctx.zoomPanSelection = new Ce(this.ctx)),
                                        (this.ctx.w.globals.tooltip = new se(this.ctx));
                                },
                            },
                        ]),
                        A
                    );
                })(),
                Oe = (function () {
                    function A(t) {
                        B(this, A), (this.ctx = t), (this.w = t.w);
                    }
                    return (
                        m(A, [
                            {
                                key: "clear",
                                value: function (t) {
                                    var e = t.isUpdating;
                                    this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(),
                                        this.ctx.toolbar && this.ctx.toolbar.destroy(),
                                        (this.ctx.animations = null),
                                        (this.ctx.axes = null),
                                        (this.ctx.annotations = null),
                                        (this.ctx.core = null),
                                        (this.ctx.data = null),
                                        (this.ctx.grid = null),
                                        (this.ctx.series = null),
                                        (this.ctx.responsive = null),
                                        (this.ctx.theme = null),
                                        (this.ctx.formatters = null),
                                        (this.ctx.titleSubtitle = null),
                                        (this.ctx.legend = null),
                                        (this.ctx.dimensions = null),
                                        (this.ctx.options = null),
                                        (this.ctx.crosshairs = null),
                                        (this.ctx.zoomPanSelection = null),
                                        (this.ctx.updateHelpers = null),
                                        (this.ctx.toolbar = null),
                                        (this.ctx.localization = null),
                                        (this.ctx.w.globals.tooltip = null),
                                        this.clearDomElements({ isUpdating: e });
                                },
                            },
                            {
                                key: "killSVG",
                                value: function (t) {
                                    t.each(function (e, i) {
                                        this.removeClass("*"), this.off(), this.stop();
                                    }, !0),
                                        t.ungroup(),
                                        t.clear();
                                },
                            },
                            {
                                key: "clearDomElements",
                                value: function (t) {
                                    var e = this,
                                        a = this.w.globals.dom.Paper.node;
                                    a.parentNode && a.parentNode.parentNode && !t.isUpdating && (a.parentNode.parentNode.style.minHeight = "unset");
                                    var s = this.w.globals.dom.baseEl;
                                    s &&
                                        this.ctx.eventList.forEach(function (o) {
                                            s.removeEventListener(o, e.ctx.events.documentEvent);
                                        });
                                    var n = this.w.globals.dom;
                                    if (null !== this.ctx.el) for (; this.ctx.el.firstChild; ) this.ctx.el.removeChild(this.ctx.el.firstChild);
                                    this.killSVG(n.Paper),
                                        n.Paper.remove(),
                                        (n.elWrap = null),
                                        (n.elGraphical = null),
                                        (n.elLegendWrap = null),
                                        (n.elLegendForeign = null),
                                        (n.baseEl = null),
                                        (n.elGridRect = null),
                                        (n.elGridRectMask = null),
                                        (n.elGridRectMarkerMask = null),
                                        (n.elForecastMask = null),
                                        (n.elNonForecastMask = null),
                                        (n.elDefs = null);
                                },
                            },
                        ]),
                        A
                    );
                })(),
                ze = new WeakMap(),
                De = (function () {
                    function A(t, e) {
                        B(this, A),
                            (this.opts = e),
                            (this.ctx = this),
                            (this.w = new de(e).init()),
                            (this.el = t),
                            (this.w.globals.cuid = z.randomId()),
                            (this.w.globals.chartID = this.w.config.chart.id ? z.escapeString(this.w.config.chart.id) : this.w.globals.cuid),
                            new Ye(this).initModules(),
                            (this.create = z.bind(this.create, this)),
                            (this.windowResizeHandler = this._windowResizeHandler.bind(this)),
                            (this.parentResizeHandler = this._parentResizeCallback.bind(this));
                    }
                    return (
                        m(
                            A,
                            [
                                {
                                    key: "render",
                                    value: function () {
                                        var t = this;
                                        return new Promise(function (e, i) {
                                            if (null !== t.el) {
                                                void 0 === Apex._chartInstances && (Apex._chartInstances = []),
                                                    t.w.config.chart.id && Apex._chartInstances.push({ id: t.w.globals.chartID, group: t.w.config.chart.group, chart: t }),
                                                    t.setLocale(t.w.config.chart.defaultLocale);
                                                var a = t.w.config.chart.events.beforeMount;
                                                if (
                                                    ("function" == typeof a && a(t, t.w),
                                                    t.events.fireEvent("beforeMount", [t, t.w]),
                                                    window.addEventListener("resize", t.windowResizeHandler),
                                                    (function (c, g) {
                                                        var u = !1;
                                                        if (c.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                                                            var p = c.getBoundingClientRect();
                                                            ("none" !== c.style.display && 0 !== p.width) || (u = !0);
                                                        }
                                                        var x = new ResizeObserver(function (y) {
                                                            u && g.call(c, y), (u = !0);
                                                        });
                                                        c.nodeType === Node.DOCUMENT_FRAGMENT_NODE
                                                            ? Array.from(c.children).forEach(function (y) {
                                                                  return x.observe(y);
                                                              })
                                                            : x.observe(c),
                                                            ze.set(g, x);
                                                    })(t.el.parentNode, t.parentResizeHandler),
                                                    !t.css)
                                                ) {
                                                    var s = t.el.getRootNode && t.el.getRootNode(),
                                                        n = z.is("ShadowRoot", s),
                                                        o = t.el.ownerDocument,
                                                        r = o.getElementById("apexcharts-css");
                                                    (!n && r) ||
                                                        ((t.css = document.createElement("style")),
                                                        (t.css.id = "apexcharts-css"),
                                                        (t.css.textContent =
                                                            '@keyframes opaque {\n  0% {\n      opacity: 0\n  }\n\n  to {\n      opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n  0%,to {\n      opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\n.legend-mouseover-inactive {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255,255,255,.96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30,30,30,.8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0,0,0,.7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,.apexcharts-tooltip-text-y-value,.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,.apexcharts-tooltip-text-goals-value:empty,.apexcharts-tooltip-text-y-label:empty,.apexcharts-tooltip-text-y-value:empty,.apexcharts-tooltip-text-z-value:empty,.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0!important\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,.apexcharts-pan-icon,.apexcharts-reset-icon,.apexcharts-selection-icon,.apexcharts-toolbar-custom-icon,.apexcharts-zoom-icon,.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,.apexcharts-reset-icon svg,.apexcharts-zoom-icon svg,.apexcharts-zoomin-icon svg,.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,.apexcharts-theme-dark .apexcharts-pan-icon svg,.apexcharts-theme-dark .apexcharts-reset-icon svg,.apexcharts-theme-dark .apexcharts-selection-icon svg,.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,.apexcharts-theme-dark .apexcharts-zoom-icon svg,.apexcharts-theme-dark .apexcharts-zoomin-icon svg,.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,.apexcharts-theme-light .apexcharts-reset-icon:hover svg,.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,.apexcharts-reset-icon,.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0,0,0,.7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n      opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,.apexcharts-datalabel.apexcharts-element-hidden,.apexcharts-hide .apexcharts-series-points {\n  opacity: 0\n}\n\n.apexcharts-hidden-element-shown {\n  opacity: 1;\n  transition: 0.25s ease all;\n}\n.apexcharts-datalabel,.apexcharts-datalabel-label,.apexcharts-datalabel-value,.apexcharts-datalabels,.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-annotation-rect,.apexcharts-area-series .apexcharts-area,.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-gridline,.apexcharts-line,.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-point-annotation-label,.apexcharts-radar-series path,.apexcharts-radar-series polygon,.apexcharts-toolbar svg,.apexcharts-tooltip .apexcharts-marker,.apexcharts-xaxis-annotation-label,.apexcharts-yaxis-annotation-label,.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,.resize-triggers,.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n\n.apexcharts-bar-goals-markers{\n  pointer-events: none\n}\n\n.apexcharts-bar-shadows{\n  pointer-events: none\n}\n\n.apexcharts-rangebar-goals-markers{\n  pointer-events: none\n}'),
                                                        n ? s.prepend(t.css) : o.head.appendChild(t.css));
                                                }
                                                var d = t.create(t.w.config.series, {});
                                                if (!d) return e(t);
                                                t.mount(d)
                                                    .then(function () {
                                                        "function" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.events.fireEvent("mounted", [t, t.w]), e(d);
                                                    })
                                                    .catch(function (c) {
                                                        i(c);
                                                    });
                                            } else i(new Error("Element not found"));
                                        });
                                    },
                                },
                                {
                                    key: "create",
                                    value: function (t, e) {
                                        var i = this.w;
                                        new Ye(this).initModules();
                                        var a = this.w.globals;
                                        if (
                                            ((a.noData = !1),
                                            (a.animationEnded = !1),
                                            this.responsive.checkResponsiveConfig(e),
                                            i.config.xaxis.convertedCatToNumeric && new Et(i.config).convertCatToNumericXaxis(i.config, this.ctx),
                                            null === this.el || (this.core.setupElements(), "treemap" === i.config.chart.type && ((i.config.grid.show = !1), (i.config.yaxis[0].show = !1)), 0 === a.svgWidth))
                                        )
                                            return (a.animationEnded = !0), null;
                                        var s = $.checkComboSeries(t);
                                        (a.comboCharts = s.comboCharts), (a.comboBarCount = s.comboBarCount);
                                        var n = t.every(function (c) {
                                            return c.data && 0 === c.data.length;
                                        });
                                        (0 === t.length || n) && this.series.handleNoData(),
                                            this.events.setupEventHandlers(),
                                            this.data.parseData(t),
                                            this.theme.init(),
                                            new Dt(this).setGlobalMarkerSize(),
                                            this.formatters.setLabelFormatters(),
                                            this.titleSubtitle.draw(),
                                            (a.noData && a.collapsedSeries.length !== a.series.length && !i.config.legend.showForSingleSeries) || this.legend.init(),
                                            this.series.hasAllSeriesEqualX(),
                                            a.axisCharts &&
                                                (this.core.coreCalculations(), "category" !== i.config.xaxis.type && this.formatters.setLabelFormatters(), (this.ctx.toolbar.minX = i.globals.minX), (this.ctx.toolbar.maxX = i.globals.maxX)),
                                            this.formatters.heatmapLabelFormatters(),
                                            new $(this).getLargestMarkerSize(),
                                            this.dimensions.plotCoords();
                                        var o = this.core.xySettings();
                                        this.grid.createGridMask();
                                        var r = this.core.plotChartType(t, o),
                                            d = new Mt(this);
                                        return (
                                            d.bringForward(),
                                            i.config.dataLabels.background.enabled && d.dataLabelsBackground(),
                                            this.core.shiftGraphPosition(),
                                            { elGraph: r, xyRatios: o, dimensions: { plot: { left: i.globals.translateX, top: i.globals.translateY, width: i.globals.gridWidth, height: i.globals.gridHeight } } }
                                        );
                                    },
                                },
                                {
                                    key: "mount",
                                    value: function () {
                                        var t = this,
                                            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                            i = this,
                                            a = i.w;
                                        return new Promise(function (s, n) {
                                            if (null === i.el) return n(new Error("Not enough data to display or target element not found"));
                                            (null === e || a.globals.allSeriesCollapsed) && i.series.handleNoData(), (i.grid = new _t(i));
                                            var o,
                                                r,
                                                d = i.grid.drawGrid();
                                            if (
                                                ((i.annotations = new Wt(i)),
                                                i.annotations.drawImageAnnos(),
                                                i.annotations.drawTextAnnos(),
                                                "back" === a.config.grid.position &&
                                                    (d && a.globals.dom.elGraphical.add(d.el), null != d && null !== (o = d.elGridBorders) && void 0 !== o && o.node && a.globals.dom.elGraphical.add(d.elGridBorders)),
                                                Array.isArray(e.elGraph))
                                            )
                                                for (var c = 0; c < e.elGraph.length; c++) a.globals.dom.elGraphical.add(e.elGraph[c]);
                                            else a.globals.dom.elGraphical.add(e.elGraph);
                                            "front" === a.config.grid.position &&
                                                (d && a.globals.dom.elGraphical.add(d.el), null != d && null !== (r = d.elGridBorders) && void 0 !== r && r.node && a.globals.dom.elGraphical.add(d.elGridBorders)),
                                                "front" === a.config.xaxis.crosshairs.position && i.crosshairs.drawXCrosshairs(),
                                                "front" === a.config.yaxis[0].crosshairs.position && i.crosshairs.drawYCrosshairs(),
                                                "treemap" !== a.config.chart.type && i.axes.drawAxis(a.config.chart.type, d);
                                            var g = new Yt(t.ctx, d),
                                                u = new Ht(t.ctx, d);
                                            if (
                                                (null !== d &&
                                                    (g.xAxisLabelCorrections(d.xAxisTickWidth),
                                                    u.setYAxisTextAlignments(),
                                                    a.config.yaxis.map(function (x, y) {
                                                        -1 === a.globals.ignoreYAxisIndexes.indexOf(y) && u.yAxisTitleRotate(y, x.opposite);
                                                    })),
                                                i.annotations.drawAxesAnnotations(),
                                                !a.globals.noData)
                                            ) {
                                                if (
                                                    (a.config.tooltip.enabled && !a.globals.noData && i.w.globals.tooltip.drawTooltip(e.xyRatios),
                                                    a.globals.axisCharts && (a.globals.isXNumeric || a.config.xaxis.convertedCatToNumeric || a.globals.isRangeBar))
                                                )
                                                    (a.config.chart.zoom.enabled || (a.config.chart.selection && a.config.chart.selection.enabled) || (a.config.chart.pan && a.config.chart.pan.enabled)) &&
                                                        i.zoomPanSelection.init({ xyRatios: e.xyRatios });
                                                else {
                                                    var p = a.config.chart.toolbar.tools;
                                                    ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function (x) {
                                                        p[x] = !1;
                                                    });
                                                }
                                                a.config.chart.toolbar.show && !a.globals.allSeriesCollapsed && i.toolbar.createToolbar();
                                            }
                                            a.globals.memory.methodsToExec.length > 0 &&
                                                a.globals.memory.methodsToExec.forEach(function (x) {
                                                    x.method(x.params, !1, x.context);
                                                }),
                                                a.globals.axisCharts || a.globals.noData || i.core.resizeNonAxisCharts(),
                                                s(i);
                                        });
                                    },
                                },
                                {
                                    key: "destroy",
                                    value: function () {
                                        var t, e;
                                        window.removeEventListener("resize", this.windowResizeHandler), (e = ze.get((t = this.parentResizeHandler))) && (e.disconnect(), ze.delete(t));
                                        var i = this.w.config.chart.id;
                                        i &&
                                            Apex._chartInstances.forEach(function (a, s) {
                                                a.id === z.escapeString(i) && Apex._chartInstances.splice(s, 1);
                                            }),
                                            new Oe(this.ctx).clear({ isUpdating: !1 });
                                    },
                                },
                                {
                                    key: "updateOptions",
                                    value: function (t) {
                                        var e = this,
                                            i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                                            a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                            s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
                                            n = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
                                            o = this.w;
                                        return (
                                            (o.globals.selection = void 0),
                                            t.series &&
                                                (this.series.resetSeries(!1, !0, !1),
                                                t.series.length &&
                                                    t.series[0].data &&
                                                    (t.series = t.series.map(function (r, d) {
                                                        return e.updateHelpers._extendSeries(r, d);
                                                    })),
                                                this.updateHelpers.revertDefaultAxisMinMax()),
                                            t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)),
                                            t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)),
                                            o.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(),
                                            t.theme && (t = this.theme.updateThemeOptions(t)),
                                            this.updateHelpers._updateOptions(t, i, a, s, n)
                                        );
                                    },
                                },
                                {
                                    key: "updateSeries",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                                        return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t, e, i);
                                    },
                                },
                                {
                                    key: "appendSeries",
                                    value: function (t) {
                                        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                            a = this.w.config.series.slice();
                                        return a.push(t), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a, e, i);
                                    },
                                },
                                {
                                    key: "appendData",
                                    value: function (t) {
                                        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                            i = this;
                                        (i.w.globals.dataChanged = !0), i.series.getPreviousPaths();
                                        for (var a = i.w.config.series.slice(), s = 0; s < a.length; s++) if (null != t[s]) for (var n = 0; n < t[s].data.length; n++) a[s].data.push(t[s].data[n]);
                                        return (i.w.config.series = a), e && (i.w.globals.initialSeries = z.clone(i.w.config.series)), this.update();
                                    },
                                },
                                {
                                    key: "update",
                                    value: function (t) {
                                        var e = this;
                                        return new Promise(function (i, a) {
                                            new Oe(e.ctx).clear({ isUpdating: !0 });
                                            var s = e.create(e.w.config.series, t);
                                            if (!s) return i(e);
                                            e.mount(s)
                                                .then(function () {
                                                    "function" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.events.fireEvent("updated", [e, e.w]), (e.w.globals.isDirty = !0), i(e);
                                                })
                                                .catch(function (n) {
                                                    a(n);
                                                });
                                        });
                                    },
                                },
                                {
                                    key: "getSyncedCharts",
                                    value: function () {
                                        var t = this.getGroupedCharts(),
                                            e = [this];
                                        return (
                                            t.length &&
                                                ((e = []),
                                                t.forEach(function (i) {
                                                    e.push(i);
                                                })),
                                            e
                                        );
                                    },
                                },
                                {
                                    key: "getGroupedCharts",
                                    value: function () {
                                        var t = this;
                                        return Apex._chartInstances
                                            .filter(function (e) {
                                                if (e.group) return !0;
                                            })
                                            .map(function (e) {
                                                return t.w.config.chart.group === e.group ? e.chart : t;
                                            });
                                    },
                                },
                                {
                                    key: "toggleSeries",
                                    value: function (t) {
                                        return this.series.toggleSeries(t);
                                    },
                                },
                                {
                                    key: "highlightSeriesOnLegendHover",
                                    value: function (t, e) {
                                        return this.series.toggleSeriesOnHover(t, e);
                                    },
                                },
                                {
                                    key: "showSeries",
                                    value: function (t) {
                                        this.series.showSeries(t);
                                    },
                                },
                                {
                                    key: "hideSeries",
                                    value: function (t) {
                                        this.series.hideSeries(t);
                                    },
                                },
                                {
                                    key: "resetSeries",
                                    value: function () {
                                        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
                                            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                                        this.series.resetSeries(t, e);
                                    },
                                },
                                {
                                    key: "addEventListener",
                                    value: function (t, e) {
                                        this.events.addEventListener(t, e);
                                    },
                                },
                                {
                                    key: "removeEventListener",
                                    value: function (t, e) {
                                        this.events.removeEventListener(t, e);
                                    },
                                },
                                {
                                    key: "addXaxisAnnotation",
                                    value: function (t) {
                                        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
                                            a = this;
                                        i && (a = i), a.annotations.addXaxisAnnotationExternal(t, e, a);
                                    },
                                },
                                {
                                    key: "addYaxisAnnotation",
                                    value: function (t) {
                                        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
                                            a = this;
                                        i && (a = i), a.annotations.addYaxisAnnotationExternal(t, e, a);
                                    },
                                },
                                {
                                    key: "addPointAnnotation",
                                    value: function (t) {
                                        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
                                            a = this;
                                        i && (a = i), a.annotations.addPointAnnotationExternal(t, e, a);
                                    },
                                },
                                {
                                    key: "clearAnnotations",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0,
                                            e = this;
                                        t && (e = t), e.annotations.clearAnnotations(e);
                                    },
                                },
                                {
                                    key: "removeAnnotation",
                                    value: function (t) {
                                        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0,
                                            i = this;
                                        e && (i = e), i.annotations.removeAnnotation(i, t);
                                    },
                                },
                                {
                                    key: "getChartArea",
                                    value: function () {
                                        return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
                                    },
                                },
                                {
                                    key: "getSeriesTotalXRange",
                                    value: function (t, e) {
                                        return this.coreUtils.getSeriesTotalsXRange(t, e);
                                    },
                                },
                                {
                                    key: "getHighestValueInSeries",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                                        return new Ut(this.ctx).getMinYMaxY(t).highestY;
                                    },
                                },
                                {
                                    key: "getLowestValueInSeries",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                                        return new Ut(this.ctx).getMinYMaxY(t).lowestY;
                                    },
                                },
                                {
                                    key: "getSeriesTotal",
                                    value: function () {
                                        return this.w.globals.seriesTotals;
                                    },
                                },
                                {
                                    key: "toggleDataPointSelection",
                                    value: function (t, e) {
                                        return this.updateHelpers.toggleDataPointSelection(t, e);
                                    },
                                },
                                {
                                    key: "zoomX",
                                    value: function (t, e) {
                                        this.ctx.toolbar.zoomUpdateOptions(t, e);
                                    },
                                },
                                {
                                    key: "setLocale",
                                    value: function (t) {
                                        this.localization.setCurrentLocaleValues(t);
                                    },
                                },
                                {
                                    key: "dataURI",
                                    value: function (t) {
                                        return new Rt(this.ctx).dataURI(t);
                                    },
                                },
                                {
                                    key: "exportToCSV",
                                    value: function () {
                                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                                        return new Rt(this.ctx).exportToCSV(t);
                                    },
                                },
                                {
                                    key: "paper",
                                    value: function () {
                                        return this.w.globals.dom.Paper;
                                    },
                                },
                                {
                                    key: "_parentResizeCallback",
                                    value: function () {
                                        this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
                                    },
                                },
                                {
                                    key: "_windowResize",
                                    value: function () {
                                        var t = this;
                                        clearTimeout(this.w.globals.resizeTimer),
                                            (this.w.globals.resizeTimer = window.setTimeout(function () {
                                                (t.w.globals.resized = !0), (t.w.globals.dataChanged = !1), t.ctx.update();
                                            }, 150));
                                    },
                                },
                                {
                                    key: "_windowResizeHandler",
                                    value: function () {
                                        var t = this.w.config.chart.redrawOnWindowResize;
                                        "function" == typeof t && (t = t()), t && this._windowResize();
                                    },
                                },
                            ],
                            [
                                {
                                    key: "getChartByID",
                                    value: function (t) {
                                        var e = z.escapeString(t),
                                            i = Apex._chartInstances.filter(function (a) {
                                                return a.id === e;
                                            })[0];
                                        return i && i.chart;
                                    },
                                },
                                {
                                    key: "initOnLoad",
                                    value: function () {
                                        for (var t = document.querySelectorAll("[data-apexcharts]"), e = 0; e < t.length; e++) new A(t[e], JSON.parse(t[e].getAttribute("data-options"))).render();
                                    },
                                },
                                {
                                    key: "exec",
                                    value: function (t, e) {
                                        var i = this.getChartByID(t);
                                        if (i) {
                                            i.w.globals.isExecCalled = !0;
                                            var a = null;
                                            if (-1 !== i.publicMethods.indexOf(e)) {
                                                for (var s = arguments.length, n = new Array(s > 2 ? s - 2 : 0), o = 2; o < s; o++) n[o - 2] = arguments[o];
                                                a = i[e].apply(i, n);
                                            }
                                            return a;
                                        }
                                    },
                                },
                                {
                                    key: "merge",
                                    value: function (t, e) {
                                        return z.extend(t, e);
                                    },
                                },
                            ]
                        ),
                        A
                    );
                })();
            Ct.exports = De;
        },
        68624: function (Ct, mt) {
            var h, K, it;
            !(function (F, _) {
                "use strict";
                "object" == typeof Ct.exports ? (Ct.exports = _()) : ((K = []), void 0 !== (it = "function" == typeof (h = _) ? h.apply(mt, K) : h) && (Ct.exports = it));
            })(0, function () {
                "use strict";
                var F = Object.prototype.toString;
                function _(V, Z) {
                    return null != V && Object.prototype.hasOwnProperty.call(V, Z);
                }
                function B(V) {
                    if (!V || (q(V) && 0 === V.length)) return !0;
                    if ("string" != typeof V) {
                        for (var Z in V) if (_(V, Z)) return !1;
                        return !0;
                    }
                    return !1;
                }
                function pt(V) {
                    return F.call(V);
                }
                var q =
                    Array.isArray ||
                    function (V) {
                        return "[object Array]" === F.call(V);
                    };
                function W(V) {
                    var Z = parseInt(V);
                    return Z.toString() === V ? Z : V;
                }
                function U(V) {
                    var G,
                        nt,
                        Z = function (j) {
                            return Object.keys(Z).reduce(function (H, E) {
                                return "create" === E || ("function" == typeof Z[E] && (H[E] = Z[E].bind(Z, j))), H;
                            }, {});
                        };
                    function rt(j, H) {
                        if (G(j, H)) return j[H];
                    }
                    function z(j, H, E, $) {
                        if (("number" == typeof H && (H = [H]), !H || 0 === H.length)) return j;
                        if ("string" == typeof H) return z(j, H.split(".").map(W), E, $);
                        var lt = H[0],
                            St = nt(j, lt);
                        return 1 === H.length ? ((void 0 === St || !$) && (j[lt] = E), St) : (void 0 === St && (j[lt] = "number" == typeof H[1] ? [] : {}), z(j[lt], H.slice(1), E, $));
                    }
                    return (
                        (G = (V = V || {}).includeInheritedProps
                            ? function () {
                                  return !0;
                              }
                            : function (j, H) {
                                  return ("number" == typeof H && Array.isArray(j)) || _(j, H);
                              }),
                        (nt = V.includeInheritedProps
                            ? function (j, H) {
                                  "string" != typeof H && "number" != typeof H && (H = String(H));
                                  var E = rt(j, H);
                                  if ("__proto__" === H || "prototype" === H || ("constructor" === H && "function" == typeof E)) throw new Error("For security reasons, object's magic properties cannot be set");
                                  return E;
                              }
                            : function (j, H) {
                                  return rt(j, H);
                              }),
                        (Z.has = function (j, H) {
                            if (("number" == typeof H ? (H = [H]) : "string" == typeof H && (H = H.split(".")), !H || 0 === H.length)) return !!j;
                            for (var E = 0; E < H.length; E++) {
                                var $ = W(H[E]);
                                if (!(("number" == typeof $ && q(j) && $ < j.length) || (V.includeInheritedProps ? $ in Object(j) : _(j, $)))) return !1;
                                j = j[$];
                            }
                            return !0;
                        }),
                        (Z.ensureExists = function (j, H, E) {
                            return z(j, H, E, !0);
                        }),
                        (Z.set = function (j, H, E, $) {
                            return z(j, H, E, $);
                        }),
                        (Z.insert = function (j, H, E, $) {
                            var lt = Z.get(j, H);
                            ($ = ~~$), q(lt) || Z.set(j, H, (lt = [])), lt.splice($, 0, E);
                        }),
                        (Z.empty = function (j, H) {
                            var E, $;
                            if (!B(H) && null != j && (E = Z.get(j, H))) {
                                if ("string" == typeof E) return Z.set(j, H, "");
                                if (
                                    (function st(V) {
                                        return "boolean" == typeof V || "[object Boolean]" === pt(V);
                                    })(E)
                                )
                                    return Z.set(j, H, !1);
                                if ("number" == typeof E) return Z.set(j, H, 0);
                                if (q(E)) E.length = 0;
                                else {
                                    if (
                                        !(function m(V) {
                                            return "object" == typeof V && "[object Object]" === pt(V);
                                        })(E)
                                    )
                                        return Z.set(j, H, null);
                                    for ($ in E) G(E, $) && delete E[$];
                                }
                            }
                        }),
                        (Z.push = function (j, H) {
                            var E = Z.get(j, H);
                            q(E) || Z.set(j, H, (E = [])), E.push.apply(E, Array.prototype.slice.call(arguments, 2));
                        }),
                        (Z.coalesce = function (j, H, E) {
                            for (var $, lt = 0, St = H.length; lt < St; lt++) if (void 0 !== ($ = Z.get(j, H[lt]))) return $;
                            return E;
                        }),
                        (Z.get = function (j, H, E) {
                            if (("number" == typeof H && (H = [H]), !H || 0 === H.length)) return j;
                            if (null == j) return E;
                            if ("string" == typeof H) return Z.get(j, H.split("."), E);
                            var $ = W(H[0]),
                                lt = nt(j, $);
                            return void 0 === lt ? E : 1 === H.length ? lt : Z.get(j[$], H.slice(1), E);
                        }),
                        (Z.del = function (H, E) {
                            if (("number" == typeof E && (E = [E]), null == H || B(E))) return H;
                            if ("string" == typeof E) return Z.del(H, E.split("."));
                            var $ = W(E[0]);
                            return nt(H, $), G(H, $) ? (1 !== E.length ? Z.del(H[$], E.slice(1)) : (q(H) ? H.splice($, 1) : delete H[$], H)) : H;
                        }),
                        Z
                    );
                }
                var dt = U();
                return (dt.create = U), (dt.withInheritedProps = U({ includeInheritedProps: !0 })), dt;
            });
        },
        42115: (Ct, mt, h) => {
            "use strict";
            h.d(mt, { X: () => m, x: () => B });
            var K = h(5e3),
                it = h(53101),
                F = h(33597);
            const _ = ["chart"];
            let B = (() => {
                class q {
                    constructor() {
                        this.autoUpdateSeries = !0;
                    }
                    ngOnInit() {
                        it.E.schedule(() => {
                            this.createElement();
                        });
                    }
                    ngOnChanges(W) {
                        it.E.schedule(() => {
                            this.autoUpdateSeries && 0 === Object.keys(W).filter((U) => "series" !== U).length ? this.updateSeries(this.series, !0) : this.createElement();
                        });
                    }
                    ngOnDestroy() {
                        this.chartObj && this.chartObj.destroy();
                    }
                    createElement() {
                        const W = {};
                        this.annotations && (W.annotations = this.annotations),
                            this.chart && (W.chart = this.chart),
                            this.colors && (W.colors = this.colors),
                            this.dataLabels && (W.dataLabels = this.dataLabels),
                            this.series && (W.series = this.series),
                            this.stroke && (W.stroke = this.stroke),
                            this.labels && (W.labels = this.labels),
                            this.legend && (W.legend = this.legend),
                            this.fill && (W.fill = this.fill),
                            this.tooltip && (W.tooltip = this.tooltip),
                            this.plotOptions && (W.plotOptions = this.plotOptions),
                            this.responsive && (W.responsive = this.responsive),
                            this.markers && (W.markers = this.markers),
                            this.noData && (W.noData = this.noData),
                            this.xaxis && (W.xaxis = this.xaxis),
                            this.yaxis && (W.yaxis = this.yaxis),
                            this.grid && (W.grid = this.grid),
                            this.states && (W.states = this.states),
                            this.title && (W.title = this.title),
                            this.subtitle && (W.subtitle = this.subtitle),
                            this.theme && (W.theme = this.theme),
                            this.chartObj && this.chartObj.destroy(),
                            (this.chartObj = new F(this.chartElement.nativeElement, W)),
                            this.render();
                    }
                    render() {
                        return this.chartObj.render();
                    }
                    updateOptions(W, U, dt, V) {
                        return this.chartObj.updateOptions(W, U, dt, V);
                    }
                    updateSeries(W, U) {
                        this.chartObj.updateSeries(W, U);
                    }
                    appendSeries(W, U) {
                        this.chartObj.appendSeries(W, U);
                    }
                    appendData(W) {
                        this.chartObj.appendData(W);
                    }
                    toggleSeries(W) {
                        return this.chartObj.toggleSeries(W);
                    }
                    showSeries(W) {
                        this.chartObj.showSeries(W);
                    }
                    hideSeries(W) {
                        this.chartObj.hideSeries(W);
                    }
                    resetSeries() {
                        this.chartObj.resetSeries();
                    }
                    zoomX(W, U) {
                        this.chartObj.zoomX(W, U);
                    }
                    toggleDataPointSelection(W, U) {
                        this.chartObj.toggleDataPointSelection(W, U);
                    }
                    destroy() {
                        this.chartObj.destroy();
                    }
                    setLocale(W) {
                        this.chartObj.setLocale(W);
                    }
                    paper() {
                        this.chartObj.paper();
                    }
                    addXaxisAnnotation(W, U, dt) {
                        this.chartObj.addXaxisAnnotation(W, U, dt);
                    }
                    addYaxisAnnotation(W, U, dt) {
                        this.chartObj.addYaxisAnnotation(W, U, dt);
                    }
                    addPointAnnotation(W, U, dt) {
                        this.chartObj.addPointAnnotation(W, U, dt);
                    }
                    removeAnnotation(W, U) {
                        this.chartObj.removeAnnotation(W, U);
                    }
                    clearAnnotations(W) {
                        this.chartObj.clearAnnotations(W);
                    }
                    dataURI(W) {
                        return this.chartObj.dataURI(W);
                    }
                }
                return (
                    (q.ɵfac = function (W) {
                        return new (W || q)();
                    }),
                    (q.ɵcmp = K.Xpm({
                        type: q,
                        selectors: [["apx-chart"]],
                        viewQuery: function (W, U) {
                            if ((1 & W && K.Gf(_, 7), 2 & W)) {
                                let dt;
                                K.iGM((dt = K.CRH())) && (U.chartElement = dt.first);
                            }
                        },
                        inputs: {
                            chart: "chart",
                            annotations: "annotations",
                            colors: "colors",
                            dataLabels: "dataLabels",
                            series: "series",
                            stroke: "stroke",
                            labels: "labels",
                            legend: "legend",
                            markers: "markers",
                            noData: "noData",
                            fill: "fill",
                            tooltip: "tooltip",
                            plotOptions: "plotOptions",
                            responsive: "responsive",
                            xaxis: "xaxis",
                            yaxis: "yaxis",
                            grid: "grid",
                            states: "states",
                            title: "title",
                            subtitle: "subtitle",
                            theme: "theme",
                            autoUpdateSeries: "autoUpdateSeries",
                        },
                        features: [K.TTD],
                        decls: 2,
                        vars: 0,
                        consts: [["chart", ""]],
                        template: function (W, U) {
                            1 & W && K._UZ(0, "div", null, 0);
                        },
                        styles: [""],
                    })),
                    q
                );
            })();
            window.ApexCharts = F;
            let m = (() => {
                class q {}
                return (
                    (q.ɵfac = function (W) {
                        return new (W || q)();
                    }),
                    (q.ɵmod = K.oAB({ type: q })),
                    (q.ɵinj = K.cJS({ imports: [[]] })),
                    q
                );
            })();
        },
    },
]);
